<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mobile.Communication</name>
    </assembly>
    <members>
        <member name="T:Mobile.Communication.Client.EnterpriseManagerClient">
            <summary>
            A class representing an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> client.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Client.EnterpriseManagerClient"/> class.
            </summary>
            <param name="name">The name of the EnterpriseManager.</param>
            <param name="remoteAddress">The <see cref="T:System.Net.IPEndPoint"/> to connect to.</param>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Client.EnterpriseManagerClient"/> class.
            </summary>
            <param name="name">The name of the EnterpriseManager.</param>
            <param name="address">The <see cref="T:System.Net.IPAddress"/> of the server.</param>
            <param name="port">The Port of the server.</param>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Client.EnterpriseManagerClient"/> class.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.SendCommandToServer(System.String)">
            <summary>
            Sends the <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.SendCommand(System.String)">
            <summary>
            Sends a command to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Client.EnterpriseManagerClient"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected,
            an error occured while encoding or transmitting data
             -or- all lines send by the client on startup are not completely received.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.InterpretResponse(System.String)">
            <summary>
            Interprets responses comming in.
            </summary>
            <param name="line">The <paramref name="line"/> that needs to be interpreted.</param>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.IsAlive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> specifying whether the object is connected to the
            <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server (true) or not (false).
            By setting this property the object connects to (true) or disconnects from (false)
            the server.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong
            while connecting or disconnecting.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.Dispose(System.Boolean)">
            <summary>
            Disconnects by sending the "quit" command.
            Then disposes the <see cref="T:Mobile.Communication.Client.EnterpriseManagerClient"/> object.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is being disposed;
            <see langword="false"/> if it's garbage-collected.</param>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.Disconnect(System.Boolean)">
            <summary>
            Disconnects from the server.
            </summary>
            <param name="sendQuit"><see langword="true"/> to send "quit" command.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.Connect">
            <summary>
            Connects to the server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Client.RobotClient"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no password has been entered.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.Disconnect">
            <summary>
            Disconnects from the server by sending quit-command and closing the connection.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="E:Mobile.Communication.Client.EnterpriseManagerClient.ConnectionEstablished">
            <summary>
            An event signaling that the connection to the server is established.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.OnConnectionEstablished">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Client.EnterpriseManagerClient.ConnectionEstablished"/> event.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Client.EnterpriseManagerClient.ConnectionLost">
            <summary>
            An event signaling that the connection to the server is lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.OnConnectionLost">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Client.EnterpriseManagerClient.ConnectionLost"/> event.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.Address">
            <summary>
            Gets or sets the IP-Address of the remote server.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Address.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.Port">
            <summary>
            Gets or sets the port number to connect to.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Port.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value"/> that was specified for a set operation is less than
            <see cref="F:System.Net.IPEndPoint.MinPort"/> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.DoPingOnConnect">
            <summary>
            Gets or sets whether to ping remote server before trying to establish a connection.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.Password">
            <summary>
            Gets or sets the password needed to sign up to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.Connected">
            <summary>
            Gets whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.EnterpriseManagerClient.AutoReconnect">
            <summary>
            Determines whether the client tries to reconnect to the server once the conection is lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Client.EnterpriseManagerClient.Client_ConnectionLost(System.Object,System.EventArgs)">
            <summary>
            This method is called if the client looses its connection to the server.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments containing information about the event.</param>
        </member>
        <member name="T:Mobile.Communication.Client.ErrorCodes">
            <summary>
            The codes to errors that may occurr while working with mobile client objects.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.ErrorCodes.ClientBase">
            <summary>
            Error codes used in <see cref="T:Mobile.Communication.Client.IClientBase"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Client.ErrorCodes.ClientBase.Connecting_Problem">
            <summary>
            A problem occurred while establishing the connection.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Client.ErrorCodes.ClientBase.Disconnecting_Problem">
            <summary>
            A problem occurred while disconnecting.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Client.ErrorCodes.ClientBase.Decrypting_Password_Error">
            <summary>
            An error occurred while decrypting the password.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.ConnectFirst">
            <summary>
              Looks up a localized string similar to Please connect first..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.NoPasswordEntered">
            <summary>
              Looks up a localized string similar to No password entered..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.NotConnectedToServer">
            <summary>
              Looks up a localized string similar to You are not connected to the server..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.ErrorMessages.WrongPasswordEntered">
            <summary>
              Looks up a localized string similar to Wrong password entered..
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.IArclClientBase">
            <summary>
            An interface for an ARCL client object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.ClientBaseEventHandler">
            <summary>
            Represents a method that will handle an event raised by <see cref="T:Mobile.Communication.Client.IClientBase"/>
            which has no specified type of arguments.
            </summary>
            <param name="client">The <see cref="T:Mobile.Communication.Client.IClientBase"/> raising the event.</param>
            <param name="args">The argument that contains the data the event is raised with.</param>
        </member>
        <member name="T:Mobile.Communication.Client.ClientBaseEventHandler`1">
            <summary>
            Represents a method that will handle an event raised by <see cref="T:Mobile.Communication.Client.IClientBase"/>
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="client">The <see cref="T:Mobile.Communication.Client.IClientBase"/> raising the event.</param>
            <param name="args">The argument that contains the data the event is raised with.</param>
        </member>
        <member name="T:Mobile.Communication.Client.IClientBase">
            <summary>
            An interface for all client objects.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.IClientBase.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.IClientBase.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Client.IClientBase.ConnectionEstablished">
            <summary>
            An event signaling that the connection to the server is established.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Client.IClientBase.ConnectionLost">
            <summary>
            An event signaling that the connection to the server is lost.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.Address">
            <summary>
            Gets or sets the IP-Address of the remote server.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Address.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.Port">
            <summary>
            Gets or sets the port number to connect to.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Port.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value"/> that was specified for a set operation is less than
            <see cref="F:System.Net.IPEndPoint.MinPort"/> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.DoPingOnConnect">
            <summary>
            Gets or sets whether to ping remote server before trying to establish a connection.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.Password">
            <summary>
            Gets or sets the password needed to sign up to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.Connected">
            <summary>
            Gets whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.IClientBase.AutoReconnect">
            <summary>
            Determines whether the client tries to reconnect to the server once the conection is lost.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.IEnterpriseManagerClient">
            <summary>
            An interface for a <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> client.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.IRobotClient">
            <summary>
            An interface for a <see cref="T:Mobile.Communication.Common.Robot"/> client.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Client.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Client"/> namespace contains objects that can be used to communicate with an ARCL server.
            Use these objects if you want to connect to an ARCL server.
            </summary>
            <seealso cref="N:Mobile.Communication.Server"/>
        </member>
        <member name="T:Mobile.Communication.Client.RobotClient">
            <summary>
            A class representing a <see cref="T:Mobile.Communication.Common.Robot"/> client.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Client.RobotClient"/> class.
            </summary>
            <param name="name">The name of the robot.</param>
            <param name="remoteAddress">The <see cref="T:System.Net.IPEndPoint"/> to connect to.</param>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Client.RobotClient"/> class.
            </summary>
            <param name="name">The name of the robot.</param>
            <param name="address">The <see cref="T:System.Net.IPAddress"/> of the server.</param>
            <param name="port">The Port of the server.</param>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Client.RobotClient"/> class.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.SendCommandToServer(System.String)">
            <summary>
            Sends the <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.SendCommand(System.String)">
            <summary>
            Sends a command to the <see cref="T:Mobile.Communication.Common.Robot"/> server.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Client.RobotClient"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected,
            an error occured while encoding or transmitting data
             -or- all lines send by the client on startup are not completely received.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.InterpretResponse(System.String)">
            <summary>
            Interprets responses comming in.
            </summary>
            <param name="line">The <paramref name="line"/> that needs to be interpreted.</param>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.IsAlive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> specifying whether the object is connected to the
            <see cref="T:Mobile.Communication.Common.Robot"/> server (true) or not (false).
            By setting this property the object connects to (true) or disconnects from (false)
            the server.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong
            while connecting or disconnecting.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.Dispose(System.Boolean)">
            <summary>
            Disconnects by sending the "quit" command.
            Then disposes the <see cref="T:Mobile.Communication.Client.RobotClient"/> object.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is being disposed;
            <see langword="false"/> if it's garbage-collected.</param>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.Disconnect(System.Boolean)">
            <summary>
            Disconnects from the server.
            </summary>
            <param name="sendQuit"><see langword="true"/> to send "quit" command.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.Connect">
            <summary>
            Connects to the server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Client.RobotClient"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no password has been entered.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.Disconnect">
            <summary>
            Disconnects from the server by sending quit-command and closing the connection.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if something went wrong.</exception>
        </member>
        <member name="E:Mobile.Communication.Client.RobotClient.ConnectionEstablished">
            <summary>
            An event signaling that the connection to the server is established.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.OnConnectionEstablished">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Client.RobotClient.ConnectionEstablished"/> event.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Client.RobotClient.ConnectionLost">
            <summary>
            An event signaling that the connection to the server is lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.OnConnectionLost">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Client.RobotClient.ConnectionLost"/> event.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.Address">
            <summary>
            Gets or sets the IP-Address of the remote server.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Address.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.Port">
            <summary>
            Gets or sets the port number to connect to.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if connected
            while setting new Port.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value"/> that was specified for a set operation is less than
            <see cref="F:System.Net.IPEndPoint.MinPort"/> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.DoPingOnConnect">
            <summary>
            Gets or sets whether to ping remote server before trying to establish a connection.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.Password">
            <summary>
            Gets or sets the password needed to sign up to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.Connected">
            <summary>
            Gets whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Client.RobotClient.AutoReconnect">
            <summary>
            Determines whether the client tries to reconnect to the server once the conection is lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Client.RobotClient.Client_ConnectionLost(System.Object,System.EventArgs)">
            <summary>
            This method is called if the client looses its connection to the server.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The arguments containing information about the event.</param>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.EnterPW">
            <summary>
            "enter password:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.WelcomeToServer">
            <summary>
            "Welcome to the server."
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ClosingConnection">
            <summary>
            "Closing connection"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ShuttingServerDown">
            <summary>
            "Shutting down Server"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.StartupSucceeded">
            <summary>
            "startup succeeded"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.CommandListStart">
            <summary>
            "commands:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.CommandListEnd">
            <summary>
            "end of commands"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.CmdError">
            <summary>
            "commanderror:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.CmdErrorDescription">
            <summary>
            "commanderrordescription:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.UnknownCommand">
            <summary>
            "unknown command"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.UnknownCommand_commanderror">
            <summary>
            "unknown command commanderror"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.QueueUpdate">
            <summary>
            "queueupdate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.QueueCancel">
            <summary>
            "queuecancel:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common._QueueCancel">
            <summary>
            "queuecancel" as in "queuecancel has failed to cancel ..."
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.QueueQuery">
            <summary>
            "queuequery:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.EndOfQueueQuery">
            <summary>
            "endqueuequery"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.QueueModify">
            <summary>
            "queuemodify"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Goal">
            <summary>
            "goal:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.EndOfGoals">
            <summary>
            "end of goals"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_NewParam">
            <summary>
            "will add new param"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_SectionComment">
            <summary>
            "will add config comment"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_Starting">
            <summary>
            "new config starting"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_Add">
            <summary>
            "added"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ParseStart">
            <summary>
            "will parse config"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ParseSuccess">
            <summary>
            "config parsed fine"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ParseFailure">
            <summary>
            "config had at least this problem:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_SectionValue">
            <summary>
            "getconfigsectionvalue:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ListStart">
            <summary>
            "_beginList"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ListEnd">
            <summary>
            "_endList"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_EndOfSectionValues">
            <summary>
            "endofgetconfigsectionvalues"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_SectionInfo">
            <summary>
            "getconfigsectioninfo:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_ParamInfo">
            <summary>
            "getconfigsectionparaminfo:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_EndOfSectionInfo">
            <summary>
            "endofgetconfigsectioninfo"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Config_Changed">
            <summary>
            "configuration changed"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_ObjectList">
            <summary>
            "mapobjectlist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_EndOfObjectList">
            <summary>
            "end of mapobjectlist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_ObjectInfo">
            <summary>
            "mapobjectinfo:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_ObjectInfoCoord">
            <summary>
            "mapobjectinfocoord:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_ObjectInfoParams">
            <summary>
            "mapobjectinfoparams:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_EndOfObjectInfo">
            <summary>
            "end of mapobjectinfo"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_TypeList">
            <summary>
            "mapobjecttypelist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_EndOfTypeList">
            <summary>
            "end of mapobjecttypelist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_TypeArgument">
            <summary>
            "mapobjecttypeinfoargument:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_EndOfTypeInfo">
            <summary>
            "end of mapobjecttypeinfo"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Map_Changed">
            <summary>
            "map changed"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_GroupList">
            <summary>
            "getdatastoregrouplist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_EndOfGroupList">
            <summary>
            "endofgetdatastoregrouplist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_GroupInfo">
            <summary>
            "getdatastoregroupinfo:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_EndOfGroupInfo">
            <summary>
            "endofgetdatastoregroupinfo"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_GroupValues">
            <summary>
            "getdatastoregroupvalues:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_EndOfGroupValues">
            <summary>
            "endofgetdatastoregroupvalues"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_FieldInfo">
            <summary>
            "getdatastorefieldinfo:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_EndOfFieldInfo">
            <summary>
            "endofgetdatastorefieldinfo"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_FieldValue">
            <summary>
            "getdatastorefieldvalues:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DataStore_EndOfFieldValue">
            <summary>
            "endofgetdatastorefieldvalues"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_Add">
            <summary>
            "extioadd:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_InputSet">
            <summary>
            "extioinputupdate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_InputSetBit">
            <summary>
            "extioinputupdatebit:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_InputSetByte">
            <summary>
            "extioinputupdatebyte:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_OutputSet">
            <summary>
            "extiooutputupdate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_OutputSetBit">
            <summary>
            "extiooutputupdatebit:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_OutputSetByte">
            <summary>
            "extiooutputupdatebyte:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_Remove">
            <summary>
            "extioremove:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.ExtIO_OutputUpdated">
            <summary>
            "extiooutputupdateneeded:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.DateTime">
            <summary>
            "datetime:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.Logging">
            <summary>
            "logging"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Common.End">
            <summary>
            "end" as in "End of MapObjectList", "... MapObjectInfo", ...
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Error">
            <summary>
            "error:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.End">
            <summary>
            "end" as in "End of InputList", "... Routes", ...
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Input">
            <summary>
            "input:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.InputList">
            <summary>
            "inputlist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EndOfInputList">
            <summary>
            "end of inputlist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Output">
            <summary>
            "output:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.OutputList">
            <summary>
            "outputlist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EndOfOutputList">
            <summary>
            "end of outputlist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.IoRestart">
            <summary>
            "iorestart" as in "IORestart begin" and "IORestart end"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Going">
            <summary>
            "going"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Patrolling">
            <summary>
            "patrolling"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Executing">
            <summary>
            "executing"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Arrived">
            <summary>
            "arrived"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Finished">
            <summary>
            "finished"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.CompletedMacro">
            <summary>
            "completed macro"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Stopping">
            <summary>
            "stopping"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Interrupted">
            <summary>
            "interrupted:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Odometer">
            <summary>
            "odometer:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.OdometerReset">
            <summary>
            "reset odometer"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EstimatedTimeOfArrival">
            <summary>
            "eta"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Shutdown">
            <summary>
            "shutting down"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.QueueDropoff">
            <summary>
            "queuedropoff"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Localized">
            <summary>
            "localized"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Docking">
            <summary>
            "DockingState: Docking"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.UnDocking">
            <summary>
            "DockingState: Undocking"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Saying">
            <summary>
            "saying"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SetupError">
            <summary>
            "setuperror:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SetupError_NothingToSay">
            <summary>
            "there was nothing given to say"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Staying">
            <summary>
            "staying"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.CentralServer">
            <summary>
            "centralserver:" as in "CentralServer: not connected" and "CentralServer: connected"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.QueueRobot">
            <summary>
            "queuerobot:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EndOfShowRobot">
            <summary>
            "endqueueshowrobot"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status">
            <summary>
            "status:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_ForHuman">
            <summary>
            "extendedstatusforhumans:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_BatteryVoltage">
            <summary>
            "batteryvoltage:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_Location">
            <summary>
            "location:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_LocalizationScore">
            <summary>
            "localizationscore:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_Temperature">
            <summary>
            "temperature:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Status_StateOfCharge">
            <summary>
            "stateofcharge:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.PauseState">
            <summary>
            "pausestate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.PauseTask">
            <summary>
            "pausetask:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitState">
            <summary>
            "waitstate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitTask">
            <summary>
            "waittask:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EStopPressed">
            <summary>
            "estop pressed"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.MotorsDisabled">
            <summary>
            "estop relieved but motors still disabled"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.MotorsEnabled">
            <summary>
            "motors enabled"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EStopPressedCannotEnableMotors">
            <summary>
            "estop pressed cannot enable motors"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.DockStatus_DockingState">
            <summary>
            "dockingstate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.DockStatus_ForcedState">
            <summary>
            "forcedstate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.DockStatus_ChargeState">
            <summary>
            "chargestate:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RouteOutputStarting">
            <summary>
            "routes"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Route">
            <summary>
            "route:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RouteOutputEnding">
            <summary>
            "end of routes"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Macro">
            <summary>
            "macro:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.MacroOutputEnding">
            <summary>
            "end of macros"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitCancelled">
            <summary>
            "wait cancelled"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitingCompleted">
            <summary>
            "waiting completed"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitingNot">
            <summary>
            "not waiting"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.WaitingRegexPattern">
            <summary>
            waiting (?&lt;Time&gt;-1|\d+) seconds with status "(?&lt;Status&gt;.*)"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.PausingNot">
            <summary>
            "not pausing"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.PausingCancelled">
            <summary>
            "pause cancelled"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.PausingRegexPattern">
            <summary>
            pausing with status "(?&lt;Status&gt;.*)"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Fault">
            <summary>
            "fault:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Fault_Cleared">
            <summary>
            "faultcleared:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.AppFaultSet">
            <summary>
            "applicationfaultset"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.AppFaultClear">
            <summary>
            "applicationfaultclear"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Fault_ListItem">
            <summary>
            "faultlist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.Fault_EndOfList">
            <summary>
            "end of faultList"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchableForbidden">
            <summary>
            "switchableforbidden:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchableForbiddenList">
            <summary>
            "switchableforbiddenlist:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchForbiddenOn">
            <summary>
            "switchforbiddenon:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchForbiddenOff">
            <summary>
            "switchforbiddenoff:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchForbiddensOnByPrefix">
            <summary>
            "switchforbiddensonbyprefix:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchForbiddensOffByPrefix">
            <summary>
            "switchforbiddensoffbyprefix:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.EndOfSwitchableForbiddenList">
            <summary>
            end of switchableforbiddenlist
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchedXforbiddens">
            <summary>
            Regex: switched {0} \d+ by {1} {2}
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchedXforbiddensByName">
            <summary>
            Regex: switched {0} \d+ by name {1}
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.SwitchedXforbiddensByPrefix">
            <summary>
            Regex: switched {0} \d+ by prefix {1}
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_ListItem">
            <summary>
            "rangedevice"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_CurrentDrawingData">
            <summary>
            "rangedevicecurrentdrawingdata"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_CumulativeDrawingData">
            <summary>
            "rangedevicecumulativedrawingdata"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_EndOfList">
            <summary>
            "endofrangedevicelist"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_GetCumulative">
            <summary>
            "rangedevicegetcumulative"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.RangeDevice_GetCurrent">
            <summary>
            "rangedevicegetcurrent"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.CustomSensor_AddedReading">
            <summary>
            "added reading"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.CustomSensor_AddedAbsoluteReading">
            <summary>
            "added absolute reading"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.Robot.CustomSensor_ClearedReadings">
            <summary>
            "cleared readings"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueueShow">
            <summary>
            "queueshow:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.EndOfShow">
            <summary>
            "endqueueshow"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueueRobot">
            <summary>
            "queuerobot"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.EndOfShowRobot">
            <summary>
            "endqueueshowrobot"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueueMulti">
            <summary>
            "queuemulti"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.EndOfQueueMulti">
            <summary>
            "endqueuemulti"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueuePickup">
            <summary>
            "queuepickup"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueuePickupDropoff">
            <summary>
            "queuepickupdropoff"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueueCancel">
            <summary>
            "queuecancel"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.QueueCancelMultiSegment">
            <summary>
            "queuecancelmultisegment"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.GoalDistanceRemaining">
            <summary>
            "goaldistanceremaining:"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.EndOfGoalDistanceRemaining">
            <summary>
            "endgoaldistanceremaining"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.Fault">
            <summary>
            "robotfault"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.Fault_Cleared">
            <summary>
            "robotfaultcleared"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.Fault_ListItem">
            <summary>
            "robotfaultquery"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclAnswers.EnterpriseManager.Fault_EndOfList">
            <summary>
            "endqueryfaults"
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBaseEventHandler">
            <summary>
            Represents a method that will handle an event fired from an ARCLBase class
            which has no specified type of arguments.
            </summary>
            <param name="arcl">The <see cref="T:Mobile.Communication.Common.ArclBase"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBaseEventHandler`1">
            <summary>
            Represents a method that will handle an event fired from an ARCLBase class
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="arcl">The <see cref="T:Mobile.Communication.Common.ArclBase"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase">
            <summary>
            A base class for objects connected to an ARCL server or client.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.ArclCommand">
            <summary>
            A class representing an ARCl command.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ArclCommand.Command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ArclCommand.Description">
            <summary>
            The description of the command.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ArclCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instace of <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="description">Its description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ArclCommand.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/>.
            </summary>
            <returns>A string that represents the <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ArclCommand.CompareTo(Mobile.Communication.Common.ArclBase.ArclCommand)">
            <summary>
            Compares two ARCL commands.
            </summary>
            <param name="other">The other <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/>.</param>
            <returns>.Value Condition:
            Less than zero -> This instance precedes <paramref name="other"/>.
            Zero -> This instance has the same position in the sort order as <paramref name="other"/>.
            Greater than zero -> This instance follows <paramref name="other"/>
             -or- <paramref name="other"/> is <see langword="null"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.ResponseFlag">
            <summary>
            A flag representing the type of responses.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.None">
            <summary>
            No response.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.InterpretedAnswers">
            <summary>
            Those are messages dedicated to this ARCL connection.
            For example responses to an ARCL command.
            These messages could be parsed inside the object.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.UnInterpretedAnswers">
            <summary>
            Those are messages dedicated to this ARCL connection.
            For example responses to an ARCL command.
            These messages could NOT be parsed inside the object.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.AllAnswers">
            <summary>
            Those are messages dedicated to this ARCL connection.
            For example responses to an ARCL command.
            This includes <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.InterpretedAnswers"/> and <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.UnInterpretedAnswers"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueUpdate">
            <summary>
            A "QueueUpdate: ..." message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueCancel">
            <summary>
            A "QueueCancel: ..." message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueShow">
            <summary>
            A "QueueShow: ..." message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.JobBroadcast">
            <summary>
            Broadcast messages containing information about jobs.
            This includes
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueUpdate"/>,
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueCancel"/> and
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueShow"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueRobot">
            <summary>
            A "QueueRobot: ..." message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.IOupdate">
            <summary>
            A message about an IO update.
            "Input: ..." or "Output: ..." messages.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.Fault">
            <summary>
            A message about a fault.
            "Fault: ...", "FaultCleared: ...", "RobotFault: ...", "RobotFaultCleared: ..." messages.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.BroadCast">
            <summary>
            A broadcast message. This includes
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.JobBroadcast"/>,
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.QueueRobot"/>,
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.IOupdate"/> and
            <see cref="F:Mobile.Communication.Common.ArclBase.ResponseFlag.Fault"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResponseFlag.All">
            <summary>
            All messages received will be queued.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.JobManagement">
            <summary>
            A flag representing which kind of jobs will be managed by this object.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.JobManagement.None">
            <summary>
            No job will be managed.
            Jobs can be queued but they'll never get updated.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.JobManagement.ManageLocal">
            <summary>
            Manages jobs that were queued by this object (using one of the QueueXXX methods) only.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.JobManagement.ManageRemote">
            <summary>
            Manage jobs that were NOT queued by this object.
            These jobs may have been queued to the remote QueuingManager earlier -or- have been queued by another ARCL connection.
            This will signal remotely queued jobs by raising events.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.JobManagement.Full">
            <summary>
            Manage all jobs.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.ResetReason">
            <summary>
            Reason for reset.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResetReason.ConnectionLost">
            <summary>
            Connection has been lost.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.ResetReason.Disposing">
            <summary>
            Object is disposing.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._serialization_Version">
            <summary>
            Version identifier for serialization.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._defaultBuildJobTimeout">
            <summary>
            The default timeout for building a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._defaultIntersegmentQueuedTimeDiff">
            <summary>
            A value used to build jobs.
            This time-span is considered to be the maximum difference in two segments "Queued" property to be part of one job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._defaultCommandErrorDescriptionTimeout">
            <summary>
            A value used to wait for 'CommandErrorDescription:' message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._anyStringPattern">
            <summary>
            ".*"
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._anyStringRegex">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> of <see cref="F:Mobile.Communication.Common.ArclBase._anyStringPattern"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.assemblyVersion">
            <summary>
            The current version of the library.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_0">
            <summary>
            Version 1.0.0.0
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_1">
            <summary>
            Version 1.0.0.1
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_2">
            <summary>
            Version 1.0.0.2
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_3">
            <summary>
            Version 1.0.0.3
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_4">
            <summary>
            Version 1.0.0.4
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_5">
            <summary>
            Version 1.0.0.5
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_6">
            <summary>
            Version 1.0.0.6
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_7">
            <summary>
            Version 1.0.0.7
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_8">
            <summary>
            Version 1.0.0.8
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_0_9">
            <summary>
            Version 1.0.0.9
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_0_1_0">
            <summary>
            Version 1.0.1.0
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version_1_1_0_0">
            <summary>
            Version 1.1.0.0
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._version">
            <summary>
            The version of serialization code.
            </summary>
            <remarks>Version change 1.0.0.1: Added macros (plus serialization in Robot)</remarks>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.connection">
            <summary>
            The telnet connection.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.responsesConnection">
            <summary>
            The responses of the connection.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.interpretingThread">
            <summary>
            The <see cref="T:System.Threading.Thread"/> used to interpret answers.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.responses">
            <summary>
            All responses received from the server.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.sleepTime">
            <summary>
            2x connections polling interval
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.LogSynchronization">
            <summary>
            Determines whether log messages about synchronization will be added to the log.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.syncEvent">
            <summary>
            The event to sync commands (sent) and responses to those (received).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.responseTimeout">
            <summary>
            The amount of time (milliseconds) to wait for a resonse given to a sent command.
            If this is less than 0 it will block the calling Thread until a response is received.
            This may be a problem if no response will be received due to a loss of connection.
            In this case the calling Thread will be blocked indefinitely long.
            If the timeout exceeds before a response has been received, an Exception is thrown.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.sendable">
            <summary>
            Specifies whether the object is able to send commands.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.LogEvents">
            <summary>
            Determines whether log messages about events will be added to the log.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.SequentialEventRaising">
             <summary>
             Determines whether events will be raised sequentially (one by one).
             If <see langword="true"/> the next event will be raised when the user code of the previous one is finished.
             Set this to <see langword="false"/> to be able to wait in one event for another.
             This is <see langword="true"/> by default for backwards compatibility (same behavior as before).
             </summary>
             <example>
             This example shows a deadlock situation if this is set to <see langword="true"/>.
             <code>
             public class MyObject {
            	
            		private ArclBase myObject;
            		private System.Collection.Generic.List&lt;string&gt; goals;
            		private System.Threading.AutoResetEvent are;
            		
            		public MyObject() {
            			are = new System.Threading.AutoResetEvent(false);
            			
            			myObject = new RobotClient("MyRobot", System.Net.IPAddress.Parse("192.168.1.102"), 7171);
            			myObject.MapChanged += myObject_MapChanged;
            			myObject.Goals.CollectionChanged += myObject_GoalsComplete;
            		}
            		
            		private void myObject_MapChanged(ArclBase arcl, EventArgs args) {
            			myObject.RefreshGoals();
            
            			// Wait until goals are completed by checking the event
            			// Yes, this is nonsense but symbolizes what is not possible
            			are.WaitOne();
            			
            			// Print goals
            			// Yes, this should be done by just iterating over the return value of "myObject.RefreshGoals()".
            			// Still, this is just for showing what is not possible
            			foreach (string goal in goals) {
            				Console.WriteLine(goal);
            			}
            		}
            		
            		private void Goals_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) {
            			switch (e.Action) {
            				case System.Collections.Specialized.NotifyCollectionChangedAction.Add:
            					foreach (string goal in e.NewItems)
            						goals.Add(goal);
            					break;
            				case System.Collections.Specialized.NotifyCollectionChangedAction.Remove:
            					foreach (string goal in e.OldItems)
            						goals.Remove(goal);
            					break;
            				case System.Collections.Specialized.NotifyCollectionChangedAction.Replace:
            					break;
            				case System.Collections.Specialized.NotifyCollectionChangedAction.Move:
            					break;
            				case System.Collections.Specialized.NotifyCollectionChangedAction.Reset:
            					goals.Clear();
            					break;
            				default:
            					break;
            			}
            			// Signal done
            			are.Set();
            		}
             }
             </code>
             This ends up in a deadlock since are.Set() will never get executed because Goals_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) will not be triggered.
             </example>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.AsyncEventRaising">
             <summary>
             Determines whether events will be raised on the interpreting <see cref="T:System.Threading.Thread"/>.
             If <see langword="true"/> each event will be raised inside the interpreting <see cref="T:System.Threading.Thread"/>.
             Set this to <see langword="false"/> to raise events from a threadpool <see cref="T:System.Threading.Thread"/>.
             Like this you are able to call another function within the event handling method.
             This is <see langword="true"/> by default for backwards compatibility (same behavior as before).
             </summary>
             <example>
             This example shows a deadlock situation if this is set to <see langword="false"/>.
             <code>
             public class MyObject {
            	
            		private ArclBase myObject;
            		
            		public MyObject() {
            			myObject = new RobotClient("MyRobot", System.Net.IPAddress.Parse("192.168.1.102"), 7171);
            			myObject.MapChanged += myObject_MapChanged;
            		}
            		
            		private void myObject_MapChanged(ArclBase arcl, EventArgs args) {
            			// This call 'myObject.RefreshGoals();' will cause a deadlock
            			// or throw a TimeoutException if ResponseTimeout &gt;= 0.
            			string[] goals = myObject.RefreshGoals();
            
            			// Print goals
            			foreach (string goal in goals) {
            				Console.WriteLine(goal);
            			}
            		}
             }
             </code>
             This ends up in a deadlock since myObject.RefreshGoals() is executed on the interpreting <see cref="T:System.Threading.Thread"/>.
             This means that it will wait and cannot receive and interpret the response.
             </example>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase._syncEventRaising">
            <summary>
            An object to sync event raising by the <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.syncEventRaising">
            <summary>
            An object to sync event raising by the <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.eventPool">
            <summary>
            A thread pool to raise events.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.GlobalLogger">
            <summary>
            Gets or sets the global logger.
            This logger acts as a fallback in case the local logger is not set and serves as a logger for static methods.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.GlobalCommunicationLogger">
            <summary>
            Gets or sets the global logger for communication. This forwards <see cref="P:Mobile.Networking.Common.TelnetBase.GlobalLogger"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.logger">
            <summary>
            The logger used to log messages while interpreting.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.commandsList">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> containing all commands and their descriptions.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.goalsList">
            <summary>
            A list of goals.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.identifier">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.remoteDt">
            <summary>
            The remote date and time.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.queuingManager">
            <summary>
            The QueuingManager.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.#ctor(System.String)">
            <summary>
            Constructor setting name of the object.
            </summary>
            <param name="name">The name of the object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.ArclBase"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.LogInformationLine(System.String,Mobile.Logger.Level)">
            <summary>
            Logs an information line.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The severity of the message.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.InitializeInterpreting">
            <summary>
            Initializes the interpreting <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.InterpretResponseThread(System.Object)">
            <summary>
            Interprets responses.
            </summary>
            <param name="obj">The object to start Thread with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.QueuedResponseFlagSet(Mobile.Communication.Common.ArclBase.ResponseFlag)">
            <summary>
            Checks whether this flag is set.
            </summary>
            <param name="flag">The flag to check.</param>
            <returns><see langword="true"/> if this flag is set; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.QueueResponse(System.String,Mobile.Communication.Common.ArclBase.ResponseFlag)">
            <summary>
            Adds the <paramref name="line"/> if the <paramref name="flag"/> is set.
            </summary>
            <param name="line">The line to add to <see cref="P:Mobile.Communication.Common.ArclBase.Responses"/>.</param>
            <param name="flag">The flag of the line.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.StartInterpreting(System.Collections.Concurrent.ConcurrentQueue{System.String})">
            <summary>
            Starts the interpreting Thread.
            <see cref="M:Mobile.Communication.Common.ArclBase.InterpretResponse(System.String)"/> will be called continously if new responses are available.
            </summary>
            <param name="queue">The queue responses will be added to.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.StopInterpreting">
            <summary>
            Terminates the interpreting thread.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.InterpretResponse(System.String)">
            <summary>
            Interprets a single response.
            Handles: list of commands and goals, the configuration, external I/O (soft signals), job ubpdates (update/cancel) and command errors.
            </summary>
            <param name="line">The line/response to interpret.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SendCommand(System.String,Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject)">
            <summary>
            Sends a command and removes the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/> if sending fails.
            </summary>
            <param name="command">The command to send.</param>
            <param name="wait">The <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/> to remove if from <see cref="F:Mobile.Communication.Common.ArclBase.syncEvent"/> if sending fails.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if sending <paramref name="command"/> fails.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SendCommand(System.String)">
            <summary>
            Sends a command.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Help">
            <summary>
            Gets all ARCL-commands and their description.
            </summary>
            <returns>All ARCL-commands and their description.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Help(Mobile.Communication.Common.ArclBase.ArclCommand[]@,System.String@)">
            <summary>
            Gets all ARCL-commands and their description.
            </summary>
            <param name="commands">All ARCL-commands and their description.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if <see cref="P:Mobile.Communication.Common.ArclBase.Commands"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshGoals">
            <summary>
            Refreshes the list of goals.
            </summary>
            <returns>An array containing a copy of the list of goals.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <example>
            This sample shows how to safely iterate through a recently refreshed array of goals.
            <code>
            public static void Main(string[] args) {
            
            	try {
            
            		// Specify remote ARCL server
            		System.Net.IPAddress address = System.Net.IPAddress.Parse("192.168.1.57");
            		int port = 7171;
            
            		// Create a robot client
            		Mobile.Communication.Common.IArclBase robot = new Mobile.Communication.Client.RobotClient("MyRobotsName", address, port);
            
            		// Connect to robot
            		robot.IsAlive = true;
            
            		// Refresh goals
            		string[] goals = robot.RefreshGoals();
            
            		// Iterate through goals
            		foreach (string goal in goals) {
            
            			// Do something (f.e. check if a goal is part of the map)
            			if (goal == "My Goal") {
            				// Goal has been found -> leave loop
            				break;
            			}
            			
            		}
            
            	} catch (Exception ex) {
            		// Handle Exception
            	}
            
            }
            </code>
            </example>
            <seealso cref="P:Mobile.Communication.Common.ArclBase.Goals"/>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshGoals(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of goals.
            </summary>
            <param name="goals">An array containing a copy of the list of goals.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if <see cref="P:Mobile.Communication.Common.ArclBase.Goals"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.ArclBase.Goals"/>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.GetDateTime">
            <summary>
            Gets the date and time of the remote object.
            </summary>
            <returns>The date and time of the remote object.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.GetDateTime(System.DateTime@,System.String@)">
            <summary>
            Gets the date and time of the remote object.
            </summary>
            <param name="dateTime">The date and time of the remote object.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if date and time of remote object has been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Log(System.String,Mobile.Communication.Common.AramLogLevel)">
            <summary>
            Logs a message to the Aram log.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the message.</param>
            <returns>The date and time of the remote object.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Log(System.String,Mobile.Communication.Common.AramLogLevel,System.String@)">
            <summary>
            Logs a message to the Aram log.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the message.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completes successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ChangeConfigParameter(System.String,System.String,System.Object)">
            <summary>
            Changes a config parameter.
            </summary>
            <param name="section">The section under which the parameter is listed.</param>
            <param name="parameter">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.IsConfigEditable">
            <summary>
            Determines whether the config can be changed over ARCL.
            </summary>
            <returns><see langword="true"/> if the config can be changed through ARCL; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ConfigStart">
            <summary>
            Starts a new config.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ConfigParse">
            <summary>
            Parses the new config.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ConfigAdd(System.String,System.Object)">
            <summary>
            Adds the parameter with the specified value to the config.
            </summary>
            <param name="parameter">The name of the parameter.</param>
            <param name="value">The value of the <paramref name="parameter"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ConfigAdd(System.String)">
            <summary>
            Adds a section to the new config.
            </summary>
            <param name="section">The name of the new section</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.GetConfigSectionValues(System.String)">
            <summary>
            Gets the values of the <paramref name="section"/> of the ARCL object's config.
            </summary>
            <param name="section">The section to get the parameters and corresponding values for.</param>
            <returns>The values of the <paramref name="section"/> of the ARCL server's config.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.GetConfigSectionInfo(System.String)">
            <summary>
            Gets the information about the <paramref name="section"/> of the ARCL object's config.
            </summary>
            <param name="section">The section for which to get the parameters and their information.</param>
            <returns>The updated <paramref name="section"/> of the ARCL object's config.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshMapObject(System.String)">
            <summary>
            Refreshes the values of an object in the map.
            </summary>
            <param name="name">The name of the map object.</param>
            <returns>The map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshMapObject(System.String,Mobile.Communication.Common.Map.MapObject@,System.String@)">
            <summary>
            Refreshes the values of an object in the map.
            </summary>
            <param name="name">The name of the map object.</param>
            <param name="mapObject">The map object.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if date and time of remote object has been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshMapObjectCollection``1">
            <summary>
            Refreshes the MapObject collection of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
            <returns>An array containing the refreshed elements of the MapObject collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RefreshMapObjectCollection``1(``0[]@,System.String@)">
            <summary>
            Refreshes the MapObject collection of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
            <param name="collection">An array containing the refreshed elements of the MapObject collection.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation was successful;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalsAdd(System.String,System.Int32,System.Int32)">
            <summary>
            Adds soft signals (external I/Os) to the configuration.
            </summary>
            <param name="name">The name of the I/O block to add.</param>
            <param name="nrInputs">The number of inputs to add. This needs to be &gt; 0.</param>
            <param name="nrOutputs">The number of outputs to add. This needs to be &gt; 0.</param>
            <exception cref="T:System.ArgumentException">Thrown if invalid value for <paramref name="nrInputs"/> or <paramref name="nrOutputs"/>.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetInput(System.String,System.UInt32)">
            <summary>
            Sets the input of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="value">The value to set for the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetInput(System.String,System.String)">
            <summary>
            Sets the input of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="hexValue">The hex value to set for the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetInputBit(System.String,System.Byte,System.Boolean)">
            <summary>
            Sets the input bit of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bitPos">The position of the bit within the input block.</param>
            <param name="enable"><see langword="true"/> to set input bit high (on); <see langword="false"/> to set input bit low (off).</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetInputByte(System.String,System.Byte,System.Byte)">
            <summary>
            Sets the input byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the input block.</param>
            <param name="value">The new value of the byte within the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetInputByte(System.String,System.Byte,System.String)">
            <summary>
            Sets the input byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the input block.</param>
            <param name="hexValue">The new hex value of the byte within the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetOutput(System.String,System.UInt32)">
            <summary>
            Sets the output of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="value">The value to set for the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetOutput(System.String,System.String)">
            <summary>
            Sets the output of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="hexValue">The hex value to set for the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetOutputBit(System.String,System.Byte,System.Boolean)">
            <summary>
            Sets the output bit of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bitPos">The position of the bit within the output block.</param>
            <param name="enable"><see langword="true"/> to set input bit high (on); <see langword="false"/> to set input bit low (off).</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetOutputByte(System.String,System.Byte,System.Byte)">
            <summary>
            Sets the output byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the output block.</param>
            <param name="value">The new value of the byte within the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalSetOutputByte(System.String,System.Byte,System.String)">
            <summary>
            Sets the output byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the output block.</param>
            <param name="hexValue">The new hex value of the byte within the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SoftSignalsRemove(System.String)">
            <summary>
            Removes soft signals (external I/Os) from the configuration.
            </summary>
            <param name="name">The name of the I/O block to remove.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Close">
            <summary>
            Closes the object.
            This releases all associated resources by disposing the object.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.LogArclTimeout(System.String)">
            <summary>
            Logs that an ARCL request timed out / ARCL reply did not make it back in time.
            </summary>
            <param name="name">The name of the method that timed out.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.LogArclError(System.String,System.String)">
            <summary>
            Logs that an ARCL request failed / ARCL replied with error.
            </summary>
            <param name="error">The error message received from ARCL.</param>
            <param name="name">The name of the method that timed out.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            Stops interpreting, closes the connection and disconnects the object from its remoting channel.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is disposed;
            <see langword="false"/> if it is garbage-collected.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.Reset(Mobile.Communication.Common.ArclBase.ResetReason)">
            <summary>
            Resets all Member variables the <see cref="T:Mobile.Communication.Common.ArclBase"/> needs to communicate.
            Also relases all <see cref="T:System.Threading.Thread"/>s waiting for responses if an infinite responseTimeout is set.
            </summary>
            <param name="reason">The reason of the reset.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ToString">
            <summary>
            Overridden from <see cref="T:System.Object"/>.
            Returns the <see cref="P:Mobile.Communication.Common.ArclBase.Name"/> of this <see cref="T:Mobile.Communication.Common.ArclBase"/> object.
            </summary>
            <returns>The <see cref="P:Mobile.Communication.Common.ArclBase.Name"/> of this <see cref="T:Mobile.Communication.Common.ArclBase"/> object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.TryParseRemoteDateTime(System.String,System.DateTime@)">
            <summary>
            Parses <paramref name="input"/> to a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="dt">The parsed <see cref="T:System.DateTime"/>.</param>
            <returns><see langword="true"/> if the <paramref name="input"/> was converted successfully;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.CreateFromSegmentsList(System.Collections.Generic.LinkedList{Mobile.Communication.Common.Queuing.Segment},System.String)">
            <summary>
            Creates a job from a list of segments and a jobid.
            Checks if the job might be a pickup, pickupDropoff or dropoff job.
            </summary>
            <param name="editableCollection">The collection of segments.</param>
            <param name="jobid">The ID of the job.</param>
            <returns>The job.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.CombineJobs(Mobile.Communication.Common.Queuing.JobData@,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Combines two jobs.
            Inserts the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s from <paramref name="insert"/> into <paramref name="result"/>.
            </summary>
            <param name="result">The result of the combination.</param>
            <param name="insert">The job holding the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="insert"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.CheckStorageForJob(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.Segment},System.String,Mobile.Communication.Common.Queuing.Segment@,Mobile.Communication.Common.Queuing.JobData@)">
            <summary>
            Checks the storage for matching jobs and segments.
            </summary>
            <param name="segments">The collection of segments to check.</param>
            <param name="jobid">The job ID.</param>
            <param name="already_stored">Sets the matching segment. <see langword="null"/> if none has been found.</param>
            <param name="storedJob">Sets the matching job. Matching means that IDs of the segment match. <see langword="null"/> if none has been found.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.InsertJobIntoStorage(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.JobData@,Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Inserts <paramref name="job"/> into the storage or updates a job that is already
            stored with the data of <paramref name="job"/>.
            In this case <paramref name="job"/> will point to the (already stored) job that got updated.
            </summary>
            <param name="actual">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that initiated the process of building a job.</param>
            <param name="job">The job that should be stored.</param>
            <param name="already_stored">A segment corresponding to <paramref name="actual"/> that is aldready stored.
            If this isn't <see langword="null"/>, the segments of <paramref name="job"/> will be inserted into <paramref name="actual"/>'s job
            AND <paramref name="job"/> will be set to <paramref name="actual"/>'s job.</param>
            <param name="storedJob">A job corresponding to <paramref name="job"/> that is already stored.
            If this isn't <see langword="null"/>, the segments of <paramref name="job"/> will be into this job
            AND <paramref name="job"/> will be set to this job.</param>
            <returns><see langword="true"/> if <paramref name="job"/> has been added to the storage; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="job"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.BuildJob(Mobile.Communication.Common.Queuing.Segment,System.String,System.Boolean,System.String,System.String,Mobile.Communication.Common.Queuing.JobData@)">
            <summary>
            Builds a job from information received over several received lines.
            Adds this job and all <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s to the storage.
            Returns <see langword="true"/> if a new job has been added to the storage; otherwise, <see langword="false"/>.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to start with.</param>
            <param name="jobid">The id of the job the actual (line) <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> belongs to.</param>
            <param name="buildByJobID">Specifies whether to combine job by jobid [JOBXXX] (<see langword="true"/>)
            or link information [ID_PICKUPXXX] (<see langword="false"/>).</param>
            <param name="message">The message specification to check for. (For example 'QueueUpdate: ' or 'QueueCancel: ')</param>
            <param name="terminationMessage">The message to identify the end of the message sequence.
            If this is <see langword="null"/> only <see cref="F:Mobile.Communication.Common.ArclBase._defaultBuildJobTimeout"/> is used to stop building a job.</param>
            <param name="job">The job this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been added to.</param>
            <returns><see langword="true"/> if a new job has been added to the storage; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.HandleNewSegment(System.String,System.String,System.Int32,System.String,Mobile.Communication.Common.Queuing.Segment.Status,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            Handles a new segment.
            Checks for linked segments,
            builds job (if necessary),
            adds segment and/or job to storage.
            </summary>
            <param name="encID">The id of the segment.</param>
            <param name="encGoal">The goal.</param>
            <param name="encPriority">The priority.</param>
            <param name="encJobID">The id of the job.</param>
            <param name="encStatus">The status of the segment.</param>
            <param name="encRobotName">The name of the robot performing the segment.</param>
            <param name="encQueued">The time the segment has been queued.</param>
            <param name="encFinished">The time the segment has been finished by the robot.</param>
            <param name="encLinkedID">The id of the segment this one is linked to.</param>
            <param name="messageIdentifier">The identifier of the message (QueueCancel, QueueUpdate, ...).</param>
            <param name="terminationMessage">The message to identify the end of the message sequence.
            If this is <see langword="null"/> only <see cref="F:Mobile.Communication.Common.ArclBase._defaultBuildJobTimeout"/> is used to stop building a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ParseQueueCancel(System.String[],System.String@,System.String@,System.Int32@,Mobile.Communication.Common.Queuing.Segment.Status@,System.String@,System.String@,System.String@,System.DateTime@,System.Nullable{System.DateTime}@)">
            <summary>
            Parses information of a "QueueCancel:" line.
            </summary>
            <param name="input">The information provided after "QueueCancel:" splitted by ' '.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="job_id">The id of the job.</param>
            <param name="priority">The priority.</param>
            <param name="status">The status.</param>
            <param name="linkID">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> this one is linked to.</param>
            <param name="goal">The goal.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time the job was queued.</param>
            <param name="finished">The time the job has finished.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ParseQueueCancel(System.String,System.String@,System.String@,System.Int32@,Mobile.Communication.Common.Queuing.Segment.Status@,System.String@,System.String@,System.String@,System.DateTime@,System.Nullable{System.DateTime}@)">
            <summary>
            Parses information of a "QueueCancel:" line.
            </summary>
            <param name="input">The information provided after "QueueCancel:".</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="job_id">The id of the job.</param>
            <param name="priority">The priority.</param>
            <param name="status">The status.</param>
            <param name="linkID">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> this one is linked to.</param>
            <param name="goal">The goal.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time the job was queued.</param>
            <param name="finished">The time the job has finished.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ParseQueueUpdateShowQuery(System.String[],System.String@,System.String@,System.Int32@,Mobile.Communication.Common.Queuing.Segment.Status@,System.String@,System.String@,System.String@,System.DateTime@,System.Nullable{System.DateTime}@,System.Int32@)">
            <summary>
            Parses information of a "QueueShow:" or "QueueUpdate:" line.
            </summary>
            <param name="input">The information provided after "QueueXXX:" splitted by ' '.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="job_id">The id of the job.</param>
            <param name="priority">The priority.</param>
            <param name="status">The status.</param>
            <param name="linkID">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> this one is linked to.</param>
            <param name="goal">The goal.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> was queued.</param>
            <param name="finished">The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has finished.</param>
            <param name="failCount">The #times the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> failed.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.ParseQueueUpdateShowQuery(System.String,System.String@,System.String@,System.Int32@,Mobile.Communication.Common.Queuing.Segment.Status@,System.String@,System.String@,System.String@,System.DateTime@,System.Nullable{System.DateTime}@,System.Int32@)">
            <summary>
            Parses information of a "QueueShow:" or "QueueUpdate:" line.
            </summary>
            <param name="input">The information provided after "QueueXXX:".</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="job_id">The id of the job.</param>
            <param name="priority">The priority.</param>
            <param name="status">The status.</param>
            <param name="linkID">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> this one is linked to.</param>
            <param name="goal">The goal.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> was queued.</param>
            <param name="finished">The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has finished.</param>
            <param name="failCount">The #times the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> failed.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.UpdateSegment(Mobile.Communication.Common.Queuing.Segment,System.String,System.Int32,Mobile.Communication.Common.Queuing.Segment.Status,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Updates the given <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="actual">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="status">The new status.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been queued.</param>
            <param name="finished">The time this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been finished.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.UpdateSegment(Mobile.Communication.Common.Queuing.Segment,System.String,System.Int32,Mobile.Communication.Common.Queuing.Segment.Status,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Updates the given <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="actual">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="status">The new status.</param>
            <param name="robotName">The name of the executing robot.</param>
            <param name="queued">The time this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been queued.</param>
            <param name="finished">The time this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been finished.</param>
            <param name="failCount">The number of times this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has failed.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.EncodeSegment(System.String[],Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Parses a "queuepickup ...", "queuedropoff" or "queuemulti:" line.
            </summary>
            <param name="input">The received line splitted by ' '.</param>
            <param name="job">The job that needs to be updated with those information.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.DataStore_SetFieldCallbacks(Mobile.Communication.Common.DataStorage.Group)">
            <summary>
            Sets the callbacks for field based operations in a <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="group">The group for which to set the callbacks.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.RaiseEvent(System.Delegate,System.Object[])">
            <summary>
            This method will raise an event according to the settings for event raising.
            This means <see cref="P:Mobile.Communication.Common.ArclBase.AsyncEventRaising"/> and <see cref="P:Mobile.Communication.Common.ArclBase.SequentialEventRaising"/>.
            </summary>
            <param name="method">The method/event to invoke/raise.</param>
            <param name="args">The arguments to pass to <paramref name="method"/>.</param>
        </member>
        <member name="E:Mobile.Communication.Common.ArclBase.UnhandledException">
            <summary>
            This event is raised by a <see cref="T:System.Exception"/> that has not been handled.
            Methods registered to this event MUST NOT THROW any <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.OnUnhadledException(System.Exception)">
            <summary>
            Logs the <see cref="T:System.Exception"/> if <see cref="P:Mobile.Communication.Common.ArclBase.Logger"/> is set
            and raises <see cref="E:Mobile.Communication.Common.ArclBase.UnhandledException"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that has not been handled.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.OnUnhadledException(System.Exception,System.Boolean)">
            <summary>
            Logs the <see cref="T:System.Exception"/> if wanted and <see cref="P:Mobile.Communication.Common.ArclBase.Logger"/> is set.
            Additionally raises <see cref="E:Mobile.Communication.Common.ArclBase.UnhandledException"/>.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> that has not been handled.</param>
            <param name="log">Determines whether to add the <paramref name="ex"/> to the log.</param>
        </member>
        <member name="E:Mobile.Communication.Common.ArclBase.MapChanged">
            <summary>
            This event is raised when the map has changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.OnMapChanged">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.ArclBase.MapChanged"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.ArclBase.ConfigChanged">
            <summary>
            This event is change when the config has changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.OnConfigChanged">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.ArclBase.ConfigChanged"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.ArclBase.SoftSignalChanged">
            <summary>
            This event is raised when a soft signal block's value has changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.OnSoftSignalChanged(Mobile.Communication.Common.SoftSignal)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.ArclBase.SoftSignalChanged"/>.
            </summary>
            <param name="signal">The <see cref="T:Mobile.Communication.Common.SoftSignal"/> that has changed.</param>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.IsInterpreting">
            <summary>
            Gets whether the interpreting thread is alive.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.ManageLocalJobs">
            <summary>
            Gets whether locally queued jobs will be managed by this object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.ManageRemoteJobs">
            <summary>
            Gets whether remotely queued jobs are managed by this object.
            Remotely means not queued through this object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Identifier">
            <summary>
            Gets the identifier of the object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Responses">
            <summary>
            Gets the responses queue.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.ResponseTimeout">
            <summary>
            Gets or sets the amount of time (milliseconds) to wait for a resonse given to a sent command.
            If this is less than 0 it will block the calling Thread until a response is received.
            This may be a problem if no response will be received due to a loss of connection.
            In this case the calling Thread will be blocked indefinitely long.
            If the timeout exceeds before a response has been received, an Exception is thrown.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.PollingInterval">
            <summary>
            The frequency to check for incomming data (in milliseconds).
            The default is 10ms.
            </summary>
            <exception cref="T:System.ArgumentException">The value is less than zero.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.IsAlive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> specifying whether the object is connected (true) or not (false).
            By setting this property the object connects (true) or disconnects (false).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.ResponsesText">
            <summary>
            Gets all queued responses of the server
            as one <see cref="T:System.String"/> seperated by lines.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.QueueAll">
            <summary>
            If true, all responses are going to be queued;
            otherwise, responses that are interpreted (such as "endOf...")
            will not be added to <see cref="P:Mobile.Communication.Common.IArclBase.Responses"/>.
            If set to <see langword="false"/> no response will be queued.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.QueuedResponses">
            <summary>
            Gets or sets which responses will be added to <see cref="P:Mobile.Communication.Common.ArclBase.Responses"/> queue.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Goals">
            <summary>
            Gets a read-only collection of all goals.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.ArclBase.RefreshGoals"/>
            <example>
            This sample shows how to safely iterate through a collection of goals.
            <code>
            public static void Main(string[] args) {
            
            	try {
            
            		// Specify remote ARCL server
            		System.Net.IPAddress address = System.Net.IPAddress.Parse("192.168.1.57");
            		int port = 7171;
            
            		// Create a robot client
            		Mobile.Communication.Common.IArclBase robot = new Mobile.Communication.Client.RobotClient("MyRobotsName", address, port);
            
            		// Connect to robot
            		robot.IsAlive = true;
            
            		// Refresh goals to populate the property
            		robot.RefreshGoals();
            
            		// Lock list of goals so that it cannot be altered while iterating through it
            		lock (((System.Collections.ICollection) robot.Goals).SyncRoot) {
            
            			// Iterate through goals
            			foreach (string goal in robot.Goals) {
            
            				// Do something (f.e. check if a goal is part of the map)
            				if (goal == "My Goal") {
            					// Goal has been found -> leave loop
            					break;
            				}
            
            			}
            
            		}
            
            	} catch (Exception ex) {
            		// Handle Exception
            	}
            
            }
            </code>
            </example>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Commands">
            <summary>
            Gets a read-only collection of all <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Configuration">
            <summary>
            Gets the configuration of the remote ARCL object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.ManageJobs">
            <summary>
            Gets or sets which jobs will be managed by this instance of <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.QM">
            <summary>
            Gets the base QueuingManager.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Map">
            <summary>
            Gets the map of the system.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.DataStore">
            <summary>
            Gets access to the data store of the system.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Heartbeat">
            <summary>
            Gets the (modifiable) <see cref="P:Mobile.Communication.Common.ArclBase.Heartbeat"/> used by the connection of this <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.IsLoggingCommunication">
            <summary>
            Gets whether messages transmitted to/received from the remote object are logged.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.CommunicationLogger">
            <summary>
            Gets or sets the <see cref="T:Mobile.Logger.TextFileLogger"/> used to log communication messages.
            Set this to <see langword="null"/> to disable logging communication messages.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.IsLoggingInterpretation">
            <summary>
            Gets whether messages appearing while interpreting the ARCL text get logged.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArclBase.Logger">
            <summary>
            Gets or sets the <see cref="T:Mobile.Logger.TextFileLogger"/> used for logging.
            Set this to <see langword="null"/> to disable logging.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.SyncEvent">
            <summary>
            A class to synchronize commands and their responses
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry">
            <summary>
            A class representing an Entry of the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Entry.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Entry.#ctor(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex,Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/>.
            </summary>
            <param name="positive">The <see cref="T:System.Text.RegularExpressions.Regex"/> of a positive <see cref="T:System.Text.RegularExpressions.Match"/>.</param>
            <param name="negative">The <see cref="T:System.Text.RegularExpressions.Regex"/> of a negative <see cref="T:System.Text.RegularExpressions.Match"/>.</param>
            <param name="logLine">The delegate to log an information line of the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="positive"/> or <paramref name="negative"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Entry.WaitOne(System.Int32,System.String@)">
            <summary>
            Blocks the current <see cref="T:System.Threading.Thread"/> until the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/> is set.
            </summary>
            <param name="timeOutMs">The amount of time to wait.</param>
            <param name="error">The error message; if there is one.</param>
            <returns><see langword="true"/> if the current instance receives a signal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Entry.TrySet(System.String,System.String)">
            <summary>
            Sets the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/> to signaled allowing the waiting
            <see cref="T:System.Threading.Thread"/> to pass.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to check for a match.</param>
            <param name="error">The error message to set in case of a negative match.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Entry.Set(System.String)">
            <summary>
            Sets the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.Entry"/> to signaled allowing the waiting
            <see cref="T:System.Threading.Thread"/> to pass.
            Also sets the error message.
            </summary>
            <param name="error">The message of the error.</param>
        </member>
        <member name="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject">
            <summary>
            A class containing data for the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/>.</returns>
        </member>
        <member name="F:Mobile.Communication.Common.ArclBase.SyncEvent.Log">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/> logs messages.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.#ctor(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            The default constructor.
            </summary>
            <param name="logLine">The delegate to log an information line of the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.PrepareWaiting(System.String,System.String)">
            <summary>
            Prepares waiting for a response which equals <paramref name="positiveIdentifier"/>
            or <paramref name="negativeIdentifier"/> (caseINsensitive).
            Call <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.RemoveWaitObject(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject)"/> or <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>
            afterwards to keep <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/> clean.
            </summary>
            <param name="positiveIdentifier">The <see cref="T:System.String"/> to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting no error message.</param>
            <param name="negativeIdentifier">The <see cref="T:System.String"/> to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting an error message.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/> to pass to <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="positiveIdentifier"/> or <paramref name="negativeIdentifier"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.PrepareWaiting(System.String[],System.String[])">
            <summary>
            Prepares waiting for a response which equals one of the strings of
            <paramref name="positiveIdentifiers"/> or <paramref name="negativeIdentifiers"/> (caseINsensitive).
            Call <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.RemoveWaitObject(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject)"/> or <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>
            afterwards to keep <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/> clean.
            </summary>
            <param name="positiveIdentifiers">The <see cref="T:System.String"/>s to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting no error message.</param>
            <param name="negativeIdentifiers">The <see cref="T:System.String"/>s to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting an error message.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/> to pass to <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="positiveIdentifiers"/> or <paramref name="negativeIdentifiers"/>
            is <see langword="null"/>.
             -or- if one of the <see cref="T:System.String"/>s in
            <paramref name="positiveIdentifiers"/> or <paramref name="negativeIdentifiers"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.PrepareWaiting(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)">
            <summary>
            Prepares waiting for a response which matches the given <see cref="T:System.Text.RegularExpressions.Regex"/>es
            (<paramref name="positiveIdentifier"/> or <paramref name="negativeIdentifier"/>).
            Call <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.RemoveWaitObject(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject)"/> or <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>
            afterwards to keep <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/> clean.
            </summary>
            <param name="positiveIdentifier">The <see cref="T:System.Text.RegularExpressions.Regex"/> to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting no error message.</param>
            <param name="negativeIdentifier">The <see cref="T:System.Text.RegularExpressions.Regex"/> to match which will release
            the waiting <see cref="T:System.Threading.Thread"/> setting an error message.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject"/> to pass to <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="positiveIdentifier"/> or <paramref name="negativeIdentifier"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.RemoveWaitObject(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject)">
            <summary>
            Removes the <paramref name="waitObject"/> from the <see cref="T:Mobile.Communication.Common.ArclBase.SyncEvent"/>.
            This needs to be called if an error occurrs between calls of PrepareWaiting
            and <see cref="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)"/>.
            </summary>
            <param name="waitObject"></param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.WaitFor(Mobile.Communication.Common.ArclBase.SyncEvent.WaitObject,System.Int32,System.String@)">
            <summary>
            Blocks the current <see cref="T:System.Threading.Thread"/> until the positive or negative response (specified
            in <paramref name="waitObject"/>) is received or <paramref name="timeOutMs"/> elapsed.
            Use PrepareWaiting to get the <paramref name="waitObject"/>, then send the command
            and call this method afterwards to wait for the response.
            </summary>
            <param name="waitObject">The object to wait for.</param>
            <param name="timeOutMs">The amount of time to wait for a response before failing.</param>
            <param name="error">The error message or <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the thread has been released in time.
            Which means: A matching response has been received in time - either positive or negative;
            <see langword="false"/> if <paramref name="timeOutMs"/> elapsed and no matching response has been received.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.Set(System.String,System.String)">
            <summary>
            Releases the first matching thread from waiting.
            </summary>
            <param name="identifier">The answer received that needs to match.</param>
            <param name="error">The error message to set in case of a negative match.</param>
        </member>
        <member name="M:Mobile.Communication.Common.ArclBase.SyncEvent.ReleaseAll(System.String)">
            <summary>
            Releases all waiting Threads.
            </summary>
            <param name="error">The error message or <see cref="F:System.String.Empty"/> or <see langword="null"/> if no error occurred.</param>
        </member>
        <member name="T:Mobile.Communication.Common.ArrivalEstimate">
            <summary>
            A class representing an estimation of the robots arrival on a goal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArrivalEstimate.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.ArrivalEstimate"/>.
            </summary>
            <param name="time">The time (in seconds).</param>
            <param name="distance">The distance (in mm).</param>
        </member>
        <member name="P:Mobile.Communication.Common.ArrivalEstimate.Time">
            <summary>
            The estimated time (in seconds) it will take for the robot to reach its goal.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.ArrivalEstimate.Distance">
            <summary>
            The distance (in mm) to the goal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.ArrivalEstimate.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> representation of this instance of <see cref="T:Mobile.Communication.Common.ArrivalEstimate"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of this instance of <see cref="T:Mobile.Communication.Common.ArrivalEstimate"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.ArclComparer">
            <summary>
            A class exposing the default <see cref="T:System.StringComparer"/> to use to compare ARCL messages.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclComparer.ServerCulture">
            <summary>
            The culture of the ARCL server.
            [en-US].
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclComparer.Default">
            <summary>
            The default <see cref="T:System.StringComparer"/> to use to compare ARCL messages.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ArclComparer.Comparison">
            <summary>
            The default <see cref="T:System.StringComparison"/> to use to compare ARCL messages.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.SwitchableForbiddenComparer">
            <summary>
            Represents a switchable forbidden comparison operation that uses specific comparison rules.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.SwitchableForbiddenComparer.ByName">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.SwitchableForbiddenComparer"/> that uses the name of a <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> as a basis.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.Compare(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.Equals(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are both the same type of object and those objects are equal; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.GetHashCode(System.Object)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is no <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.Compare(Mobile.Communication.Common.SwitchableForbidden,Mobile.Communication.Common.SwitchableForbidden)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.Equals(Mobile.Communication.Common.SwitchableForbidden,Mobile.Communication.Common.SwitchableForbidden)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbiddenComparer.GetHashCode(Mobile.Communication.Common.SwitchableForbidden)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
            <param name="obj">A <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.FaultComparer">
            <summary>
            Represents a fault comparison operation that uses specific comparison rules.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.FaultComparer.ByName">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.FaultComparer"/> that uses the name of a <see cref="T:Mobile.Communication.Common.FaultComparer"/> as a basis.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.Compare(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.Equals(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are both the same type of object and those objects are equal; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.GetHashCode(System.Object)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.Compare(Mobile.Communication.Common.Fault,Mobile.Communication.Common.Fault)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.Fault"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.Fault"/> to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.Equals(Mobile.Communication.Common.Fault,Mobile.Communication.Common.Fault)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.Fault"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.Fault"/> to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.FaultComparer.GetHashCode(Mobile.Communication.Common.Fault)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="obj">A <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.RangeDeviceComparer">
            <summary>
            Represents a fault comparison operation that uses specific comparison rules.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDeviceComparer.ByName">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.RangeDeviceComparer"/> that uses the name of a <see cref="T:Mobile.Communication.Common.RangeDeviceComparer"/> as a basis.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.Compare(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.Equals(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are both the same type of object and those objects are equal; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.GetHashCode(System.Object)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is no <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.Compare(Mobile.Communication.Common.RangeDevice,Mobile.Communication.Common.RangeDevice)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.RangeDevice"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.RangeDevice"/> to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.Equals(Mobile.Communication.Common.RangeDevice,Mobile.Communication.Common.RangeDevice)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">A <see cref="T:Mobile.Communication.Common.RangeDevice"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:Mobile.Communication.Common.RangeDevice"/> to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDeviceComparer.GetHashCode(Mobile.Communication.Common.RangeDevice)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="obj">A <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.Config">
            <summary>
            A class representing the <see cref="T:Mobile.Communication.Common.Configuration.Config"/> of the remote ARCL object.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.#ctor(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Configuration.Section})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.
            </summary>
            <param name="sections">The <see cref="T:Mobile.Communication.Common.Configuration.Section"/>s to initialize this <see cref="T:Mobile.Communication.Common.Configuration.Config"/> with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Config.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.Section"/> having the specified <paramref name="name"/> in this <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> does not exist in this <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.GetOrAdd(Mobile.Communication.Common.Configuration.Section)">
            <summary>
            Gets or adds a <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
            <param name="section">The <see cref="T:Mobile.Communication.Common.Configuration.Section"/> to add.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.Section"/> that has already been part of the <see cref="T:Mobile.Communication.Common.Configuration.Config"/>
            or <paramref name="section"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.Clear">
            <summary>
            Clears the elements of this <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.Contains(Mobile.Communication.Common.Configuration.Section)">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Configuration.Config"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of the same name as <paramref name="item"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Configuration.Section"/> to locate in the <see cref="T:Mobile.Communication.Common.Configuration.Config"/> by name.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.Configuration.Config"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.Section"/> named like <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or its name is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.CopyTo(Mobile.Communication.Common.Configuration.Section[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Configuration.Config"/> to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Configuration.Config"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Config.Count">
            <summary>
            Gets the number of <see cref="T:Mobile.Communication.Common.Configuration.Section"/>s in this <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>s if this <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Config.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.Config"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.AlreadyContainSection">
            <summary>
              Looks up a localized string similar to Config already contains section named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.ConfigReadOnly">
            <summary>
              Looks up a localized string similar to This Config is read-only..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.ListAlreadyContainsParameter">
            <summary>
              Looks up a localized string similar to List &apos;{0}&apos; already contains parameter named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.ParameterCollectionReadOnly">
            <summary>
              Looks up a localized string similar to This parameter collection is read-only..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.SectionAlreadyContainsParameter">
            <summary>
              Looks up a localized string similar to Section &apos;{0}&apos; already contains parameter named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ErrorMessages.SectionReadOnly">
            <summary>
              Looks up a localized string similar to This section is read-only..
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.ListParameter">
            <summary>
            A class representing a list of configuration parameters.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section,System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Configuration.SectionItem})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <param name="name">The name of the list.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="sectionItems">The items to initialize this list with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section,System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Configuration.SectionItem},Mobile.Communication.Common.Configuration.SectionItem.Information)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <param name="name">The name of the list.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="sectionItems">The items to initialize this list with.</param>
            <param name="info">The information of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ListParameter.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> having the specified <paramref name="name"/> in this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> does not exist in this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.AddOrUpdateInfo(Mobile.Communication.Common.Configuration.SectionItem)">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> or updates the info on the one that already exists.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.AddOrUpdateValue(Mobile.Communication.Common.Configuration.Parameter)">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/> or updates the value on the one that already exists.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.GetOrAdd(Mobile.Communication.Common.Configuration.ListParameter)">
            <summary>
            Gets or adds a <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> to add.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> that has already been part of the <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>
            or <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.Clear">
            <summary>
            Clears the elements of this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.Contains(Mobile.Communication.Common.Configuration.SectionItem)">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> of the same name as <paramref name="item"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> to locate in the <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> by name.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> named like <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or its name is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.CopyTo(Mobile.Communication.Common.Configuration.SectionItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.ListParameter.Count">
            <summary>
            Gets the number of <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>s in this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>s of this <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.ListParameter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common.Configuration"/> namespace contains objects which are related to ARAM's configuration.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.Parameter">
            <summary>
            A class representing a <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/> in the <see cref="T:Mobile.Communication.Common.Configuration.Config"/> of the remote ARCL object.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.
            </summary>
            <param name="name">The name of the list.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="value">The value of the <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section,System.Object,Mobile.Communication.Common.Configuration.SectionItem.Information)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.
            </summary>
            <param name="name">The name of the list.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="value">The value of the <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.</param>
            <param name="info">The information of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.ParseValue(System.String)">
            <summary>
            Parses the <see cref="T:System.String"/> representation of a <paramref name="value"/> to its
            <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/> or <see cref="T:System.Double"/> value.
            If <paramref name="value"/> doesn't match any of those types, <paramref name="value"/> is returned (<see cref="T:System.String"/>).
            </summary>
            <param name="value">The <see cref="T:System.String"/> to parse.</param>
            <returns>The <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/> or <see cref="T:System.Double"/> value of <paramref name="value"/>.
            If <paramref name="value"/> doesn't match any of those types, <paramref name="value"/> is returned (<see cref="T:System.String"/>).</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged">
            <summary>
            An event raised if <see cref="P:Mobile.Communication.Common.Configuration.Parameter.Value"/> has been changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.OnValueChanged(System.Object,System.Object)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged"/>
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Parameter.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.Configuration.Parameter.ValueChanged"/> directly.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Parameter.Value">
            <summary>
            Gets the value of the <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/>.
            This may be a <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.Section">
            <summary>
            A class representing a <see cref="T:Mobile.Communication.Common.Configuration.Section"/> in the <see cref="T:Mobile.Communication.Common.Configuration.Config"/> of the remote ARCL object.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.#ctor(System.String,System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Configuration.SectionItem})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="sectionItems">The items to initialize the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Section.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> having the specified <paramref name="name"/> in this <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> does not exist in this <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.AddOrUpdateInfo(Mobile.Communication.Common.Configuration.SectionItem)">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> or updates the info on the one that already exists.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.AddOrUpdateValue(Mobile.Communication.Common.Configuration.Parameter)">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/> or updates the value on the one that already exists.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.Parameter"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.GetOrAdd(Mobile.Communication.Common.Configuration.ListParameter)">
            <summary>
            Gets or adds a <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/>.
            </summary>
            <param name="parameter">The <see cref="T:Mobile.Communication.Common.Configuration.ListParameter"/> to add.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> that has already been part of the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>
            or <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.Clear">
            <summary>
            Clears the elements of this <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.Contains(Mobile.Communication.Common.Configuration.SectionItem)">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Configuration.Section"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> of the same name as <paramref name="item"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> to locate in the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> by name.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.Configuration.Section"/> contains a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/> named like <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or its name is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.CopyTo(Mobile.Communication.Common.Configuration.SectionItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Section.Count">
            <summary>
            Gets the number of <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>s in this <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>s of this <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.Section.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Section.Name">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.Section.Description">
            <summary>
            The description of the <see cref="T:Mobile.Communication.Common.Configuration.Section"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.SectionItem">
            <summary>
            A base class for items stored in a section of the configuration.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.SectionItem.Level">
            <summary>
            The experience level of a user that is allowed to modify this parameter.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.Unknown">
            <summary>
            Unknown level (not set).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.Basic">
            <summary>
            A beginner is allowed to modify this parameter.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.Intermediate">
            <summary>
            An intermetiate experienced user should modify this parameter.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.Advanced">
            <summary>
            Only an advanced user should modify this parameter.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.Expert">
            <summary>
            Only an expert user should modify this parameter.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem.Level.FACTORY">
            <summary>
            A factory setting that should only be changed by Omron Adept employees.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Configuration.SectionItem.Information">
            <summary>
            A class containing information about a <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.Information.#ctor(System.Type,Mobile.Communication.Common.Configuration.SectionItem.Level,System.Object,System.Object,System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.SectionItem.Information"/>.
            </summary>
            <param name="type">The <see cref="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Type"/> of the value.</param>
            <param name="level">The experience level of the user to modify the parameter.</param>
            <param name="min">The minimum value of the parameter -or- <see langword="null"/> if value has no minimal value.</param>
            <param name="max">The maximum value of the parameter -or- <see langword="null"/> if value has no maximal value.</param>
            <param name="description">The description of the parameter.</param>
            <param name="choices">The choices to select for the value.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.Information.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.SectionItem.Information"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.Information.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.SectionItem.Information"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Type">
            <summary>
            Gets the <see cref="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Type"/> of the value.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Level">
            <summary>
            Gets the experience level of the user to modify the parameter.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.MinValue">
            <summary>
            Gets the minimum value of the parameter -or- <see langword="null"/> if value has no minimal value.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.MaxValue">
            <summary>
            Gets the maximum value of the parameter -or- <see langword="null"/> if value has no maximal value.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Description">
            <summary>
            Gets the description of the parameter.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Information.Choices">
            <summary>
            Gets the choices to select for the value.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem._serialization_version">
            <summary>
            The string value to deserialize the version of the serialized <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Configuration.SectionItem._version_1_0_0_0">
            <summary>
            Version 1.0.0.0 (for serialization).
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
            <param name="name">The name of the item.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> itself.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.#ctor(System.String,Mobile.Communication.Common.Configuration.ListParameter,Mobile.Communication.Common.Configuration.Section,Mobile.Communication.Common.Configuration.SectionItem.Information)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
            <param name="name">The name of the item.</param>
            <param name="parent">The parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> itself.</param>
            <param name="parentSection">The parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="info">The information of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Configuration.SectionItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Name">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Parent">
            <summary>
            Gets the parent list of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>
            -or- <see langword="null"/> if the only parent is the <see cref="T:Mobile.Communication.Common.Configuration.Section"/> itself.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.ParentSection">
            <summary>
            Gets the parent <see cref="T:Mobile.Communication.Common.Configuration.Section"/> of this <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Configuration.SectionItem.Info">
            <summary>
            Gets information about the <see cref="T:Mobile.Communication.Common.Configuration.SectionItem"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.DataChange`1">
            <summary>
            A class that contains data about a changed state.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> that has changed.</typeparam>
        </member>
        <member name="P:Mobile.Communication.Common.DataChange`1.OldData">
            <summary>
            The old data.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataChange`1.NewData">
            <summary>
            The new data.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataChange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataChange`1"/>.
            </summary>
            <param name="oldData">The old data.</param>
            <param name="newData">The new data.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataChange`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataChange`1.ToString">
            <summary>
            Overwridden ToString-method inherited from object.
            </summary>
            <returns>{OldData} -> {NewData}</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataChange`1.Equals(System.Object)">
            <summary>
            Overwridden Equals-method inherited from object.
            </summary>
            <param name="obj">The object to compare this one with.</param>
            <returns><see langword="true"/>, if the objects have the same values; <see langword="false"/>, otherwise.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataChange`1.Equals(Mobile.Communication.Common.DataChange{`0})">
            <summary>
            Compares this object with another one of the same type.
            </summary>
            <param name="other">The other <see cref="T:Mobile.Communication.Common.DataChange`1"/> to compare this one with.</param>
            <returns><see langword="true"/>, if the objects have the same values; <see langword="false"/>, otherwise.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage">
            <summary>
            A class representing a data storage.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.RefreshGroupValuesCallback">
            <summary>
            A delegate to get the values of all keys in a certain group.
            </summary>
            <param name="group">The group of keys to refresh.</param>
            <returns>The group that has been refreshed.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.RefreshGroupInfoCallback">
            <summary>
            A delegate to get the info of all keys in a certain group.
            </summary>
            <param name="group">The group of keys to refresh.</param>
            <returns>The group that has been refreshed.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.RefreshValueCallback">
            <summary>
            A delegate to refresh the value of a key in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <param name="key">The key to refresh.</param>
            <returns>The value of the key.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.RefreshInfoCallback">
            <summary>
            A delegate to refresh the info of a key in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <param name="key">The key to refresh.</param>
            <returns>The information of the key.</returns>
        </member>
        <member name="F:Mobile.Communication.Common.DataStorage.getGroups">
            <summary>
            The callback to initialize the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            This populates the storage with all available groups.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DataStorage.refreshGroupValues">
            <summary>
            The callback to get the values of all keys in a certain group.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DataStorage.refreshGroupInfo">
            <summary>
            The callback to get the info of all keys in a certain group.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.#ctor">
            <summary>
            Default constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            Make sure to set callbacks later.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.#ctor(System.Action,Mobile.Communication.Common.DataStorage.RefreshGroupValuesCallback,Mobile.Communication.Common.DataStorage.RefreshGroupInfoCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <param name="getGroups">The callback to get all groups of the data store.</param>
            <param name="getGroupValues">The callback to get the values of a group.</param>
            <param name="getGroupInfo">The callback to get the info of a group.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage"/> by deserializing.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.DataStorage"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            Disposes all <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>s.
            Clears this <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            Also disconnects the object from its remoting channel if any.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is disposed; <see langword="false"/> if it is garbage-collected.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.SetCallback(System.Action)">
            <summary>
            Sets the callback to initialize the <see cref="T:Mobile.Communication.Common.DataStorage"/>
            by populating all keys.
            </summary>
            <param name="getGroups">The callback for getting all groups.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.SetCallback(Mobile.Communication.Common.DataStorage.RefreshGroupInfoCallback)">
            <summary>
            Sets the callback to get information about a <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="refreshInfo">The callback for gathering information.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.SetCallback(Mobile.Communication.Common.DataStorage.RefreshGroupValuesCallback)">
            <summary>
            Sets the callback to get the values for all keys in a <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="refrehValues">The callback for getting all values.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Initialize">
            <summary>
            Initializes the data store.
            Populates this <see cref="T:Mobile.Communication.Common.DataStorage"/> with all available <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>s
            and gets all info and values for the keys.
            </summary>
            <remarks>
            The same can be achieved by the following code snippet:
            <code>
            this.RefreshGroupsList():
            foreach (var group in this.GroupNames) {
            	this.RefreshGroupInfo(group);
            	this.RefreshGroupValues(group);
            }
            </code>
            </remarks>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Initialize(System.String@)">
            <summary>
            Initializes the data store.
            </summary>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupsList">
            <summary>
            Populates this <see cref="T:Mobile.Communication.Common.DataStorage"/> with all available <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupsList(System.String@)">
            <summary>
            Populates this <see cref="T:Mobile.Communication.Common.DataStorage"/> with all available <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>s.
            </summary>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupInfo(System.String)">
            <summary>
            Refreshes the info/description of all keys in a group.
            </summary>
            <param name="group">The group to refresh.</param>
            <returns>The <paramref name="group"/> that has been refreshed.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupInfo(System.String,Mobile.Communication.Common.DataStorage.Group@,System.String@)">
            <summary>
            Refreshes the info/description of all keys in a group.
            </summary>
            <param name="groupName">The name of the group to refresh.</param>
            <param name="group">If this method returns <see langword="true"/>, this contains The <paramref name="group"/> that has been refreshed
            or <see langword="null"/> if the operation failed (returns <see langword="false"/>).</param>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupValues(System.String)">
            <summary>
            Refreshes the value of all keys in a group.
            </summary>
            <param name="group">The group to refresh.</param>
            <returns>The <paramref name="group"/> that has been refreshed.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.RefreshGroupValues(System.String,Mobile.Communication.Common.DataStorage.Group@,System.String@)">
            <summary>
            Refreshes the value of all keys in a group.
            </summary>
            <param name="groupName">The name of the group to refresh.</param>
            <param name="group">If this method returns <see langword="true"/>, this contains The <paramref name="group"/> that has been refreshed
            or <see langword="null"/> if the operation failed (returns <see langword="false"/>).</param>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Item(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.DataStorage.DataItem"/> in the <paramref name="group"/> associated with the specified <paramref name="key"/>.
            </summary>
            <param name="group">The name of the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.</param>
            <param name="key">The key </param>
            <returns>The <see cref="T:Mobile.Communication.Common.DataStorage.DataItem"/> in the <paramref name="group"/> associated with the specified <paramref name="key"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.ToArray">
            <summary>
            Copies the key and <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> pairs stored in the <see cref="T:Mobile.Communication.Common.DataStorage"/> to a new array.
            </summary>
            <returns>A new array containing a snapshot of key and value pairs copied from the <see cref="T:Mobile.Communication.Common.DataStorage"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.ContainsGroup(System.String)">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.DataStorage"/> contains the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> to locate in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.</param>
            <returns><see langword="true"/> if the group has been successfully located in the <see cref="T:Mobile.Communication.Common.DataStorage"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.TryGetValue(System.String,Mobile.Communication.Common.DataStorage.Group@)">
            <summary>
            Attempts to get the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> associated with the specified key from the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <param name="name">The name of the group to get.</param>
            <param name="group">When this method returns, <paramref name="group"/> contains the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>
            from the <see cref="T:Mobile.Communication.Common.DataStorage"/> with the specified name or null, if the operation failed.</param>
            <returns> <see langword="true"/> if the <paramref name="name"/> was found in the <see cref="T:Mobile.Communication.Common.DataStorage"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> associated with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> to get.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> associated with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Clear">
            <summary>
            Clears all entries from the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Count">
            <summary>
            Gets the number of groups in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Mobile.Communication.Common.DataStorage"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.IsEmpty">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.DataStorage"/> is empty.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.GroupNames">
            <summary>
            Gets the names of all groups in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Groups">
            <summary>
            Gets all groups in the <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.DataItem">
            <summary>
            A class representing data of a key in the data store.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage.DataItem"/>.
            </summary>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage.DataItem"/>.
            </summary>
            <param name="description">The description of the item.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage.DataItem"/>.
            </summary>
            <param name="value">The value of the item.</param>
            <param name="description">The description of the item.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the current <see cref="P:Mobile.Communication.Common.DataStorage.DataItem.Value"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> of the current <see cref="P:Mobile.Communication.Common.DataStorage.DataItem.Value"/>.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged">
            <summary>
            This event is raised when a property changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/>.
            </summary>
            <param name="value">The new value of the property.</param>
            <param name="propertyName">The name of the property. This is obtained automatically
            by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> by default.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.DataItem.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> directly.</param>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.DataItem.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.DataItem.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.DataStorage.Group">
            <summary>
            A class representing a group of keys in a <see cref="T:Mobile.Communication.Common.DataStorage"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DataStorage.Group.refreshKeyValue">
            <summary>
            The callback to refresh the value of a key in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DataStorage.Group.refreshKeyInfo">
            <summary>
            The callback to refresh the info of a key in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.#ctor">
            <summary>
            Default constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> by deserializing.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            Clears this <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            Also disconnects the object from its remoting channel if any.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is disposed; <see langword="false"/> if it is garbage-collected.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.TryRemove(System.String,Mobile.Communication.Common.DataStorage.DataItem@)">
            <summary>
            Attempts to remove and return the value with the specified key from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">When this method returns <see langword="true"/>, <paramref name="value"/> contains
            the object removed from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> or <see langword="null"/> if the operation failed.</param>
            <returns><see langword="true"/> if an object was removed successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.RefreshValue(System.String)">
            <summary>
            Refreshes the value of a key.
            </summary>
            <param name="key">The key to refresh.</param>
            <returns>The refreshed value of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.RefreshValue(System.String,System.Object@,System.String@)">
            <summary>
            Refreshes the value of a key.
            </summary>
            <param name="key">The key to refresh.</param>
            <param name="value">If this method returns <see langword="true"/>, this contains the refreshed value
            of the <paramref name="key"/> or <see langword="null"/> if the operation failed (returns <see langword="false"/>).</param>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.RefreshInfo(System.String)">
            <summary>
            Refreshes the info/description of a key.
            </summary>
            <param name="key">The key to refresh.</param>
            <returns>The refreshed info/description of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.RefreshInfo(System.String,System.String@,System.String@)">
            <summary>
            Refreshes the info/description of a key.
            </summary>
            <param name="key">The key to refresh.</param>
            <param name="info">If this method returns <see langword="true"/>, this contains the refreshed info/description
            of the <paramref name="key"/> or <see cref="F:System.String.Empty"/> if the operation failed (returns <see langword="false"/>).</param>
            <param name="error">The error message describing why the operation failed.</param>
            <returns><see langword="true"/> if the operation was successfull; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.ToArray">
            <summary>
            Copies the key and value pairs stored in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> to a new array.
            </summary>
            <returns>A new array containing a snapshot of key and value pairs copied from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.SetCallback(Mobile.Communication.Common.DataStorage.RefreshValueCallback)">
            <summary>
            Sets the callback to refresh the value of a key.
            </summary>
            <param name="refreshValue">The callback to refresh a key.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.SetCallback(Mobile.Communication.Common.DataStorage.RefreshInfoCallback)">
            <summary>
            Sets the callback to refresh the info of a key.
            </summary>
            <param name="refreshInfo">The callback to refresh a key.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.DataStorage.DataItem.PropertyChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.</param>
            <returns><see langword="true"/> if the key has been successfully located in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.TryGetValue(System.String,Mobile.Communication.Common.DataStorage.DataItem@)">
            <summary>
            Attempts to get the value associated with the specified key from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, <paramref name="value"/> contains the object
            from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> with the specified key or null, if the operation failed.</param>
            <returns> <see langword="true"/> if the <paramref name="key"/> was found in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Values">
            <summary>
            Gets a collection containing the items in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Item(System.String)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value of the <paramref name="key"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.Clear">
            <summary>
            Clears all keys and values from the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.DataStorage.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.IsEmpty">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> is empty.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Description">
            <summary>
            Gets the description of this <see cref="T:Mobile.Communication.Common.DataStorage.Group"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.DataStorage.Group.Category">
            <summary>
            Gets the category this <see cref="T:Mobile.Communication.Common.DataStorage.Group"/> is in.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.EmEventHandler">
            <summary>
            Represents a method that will handle an event fired from an EnterpriseManager
            which has no specified type of arguments.
            </summary>
            <param name="server">The <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.EmEventHandler`1">
            <summary>
            Represents a method that will handle an event fired from an EnterpriseManager
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="server">The <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.EnterpriseManager">
            <summary>
            A class to simplify working with an Enterterprise Manager.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This Constructor is used to deserialize the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.ClearConnectedRobots">
            <summary>
            Clears <see cref="P:Mobile.Communication.Common.EnterpriseManager.ConnectedRobots"/>;
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotStatuses">
            <summary>
            Updates the status of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The statuses of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/></returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotStatuses(Mobile.Communication.Common.RobotStatusOnEnterpriseManager[]@,System.String@)">
            <summary>
            Updates the status of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotStatuses">The statuses of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.EnterpriseManager.ConnectedRobots"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="true"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotTargets">
            <summary>
            Updates the targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The targets of robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotTargets(Mobile.Communication.Common.RobotTarget[]@,System.String@)">
            <summary>
            Updates the targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotTargets">The targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.EnterpriseManager.ConnectedRobots"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="true"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotFaults">
            <summary>
            Updates the faults of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The faults of all robots.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.UpdateRobotFaults(Mobile.Communication.Common.RobotFault[]@,System.String@)">
            <summary>
            Updates the faults of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotFaults">The faults of all robots.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.EnterpriseManager.ConnectedRobots">
            <summary>
            Gets a read-only collection of the names of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.EnterpriseManager.QueuingManager">
            <summary>
            Gets the QueuingManager to queue and manipulate jobs.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.GetRobotFaults(System.String)">
            <summary>
            Gets the faults of a specific robot.
            If <paramref name="robotName"/> is <see langword="null"/>, empty or whitespace, the faults of all robots are returned.
            </summary>
            <param name="robotName">The name of the robot.</param>
            <returns>The faults of a specific robot.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.QueueJob(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="job">The job that needs to be done.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <paramref name="job"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="job"/> is already queued.
             -or- First <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> isn't a pickup.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.Modify(System.String,Mobile.Communication.Common.Queuing.ModifcationType,System.Object)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if modifying failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object,System.String)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="cancelType">The cancel type.</param>
            <param name="cancelValue">The cancel value.</param>
            <param name="cancelReason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cancelValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="cancelType"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.CancelMultiSegment(System.String,System.String)">
            <summary>
            Cancels a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in a multi job specified by <paramref name="id"/>. This <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> must not be the first one.
            </summary>
            <param name="id">The id of the segment to cancel.</param>
            <param name="cancelReason">The reason to cancel the segment.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.RefreshSegments">
            <summary>
            Gets a collection of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s containing all segments queued on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s queued on this <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred getting <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.RefreshSegment(System.String)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.RefreshJob(System.String)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.ToString">
            <summary>
            Overridden from <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            Returns an EM qualifier followed by the <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            </summary>
            <returns>An EM qualifier followed by the <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.ArclBase"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.Reset(Mobile.Communication.Common.ArclBase.ResetReason)">
            <summary>
            Resets all Member variables the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> needs to communicate.
            Also relases all <see cref="T:System.Threading.Thread"/>s waiting for responses.
            </summary>
            <param name="reason">The reason of the reset.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.InterpretResponse(System.String)">
            <summary>
            Interprets a single response.
            </summary>
            <param name="line">The line/response to interpret.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.EncodePickupDropoffJob(System.String[])">
            <summary>
            Parses a "queuepickupdropoff ..." line.
            </summary>
            <param name="input">The "queuepickupdropoff ..." line splitted by ' '.</param>
            <returns><see langword="true"/> if all information could be parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EnterpriseManager.ParseFault(System.String,System.Boolean)">
            <summary>
            Parses a robot fault.
            </summary>
            <param name="faultText">The string describing the fault.</param>
            <param name="useRegex">Determines whether to use a <see cref="T:System.Text.RegularExpressions.Regex"/> to parse the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <returns>The robot fault.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorCodes">
            <summary>
            The codes to errors that may occurr while working with mobile objects.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorCodes.Common">
            <summary>
            Error codes used in several classes.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.Unknown_Exception">
            <summary>
            Unknown ErrorCode.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.Sending_Command_Failed">
            <summary>
            Sending the command to the server has failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.StartupLines_NotReceived">
            <summary>
            Not all startup lines were received.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.Help_Failed">
            <summary>
            Receiving commands by sending out "help" failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.GetGoals_Failed">
            <summary>
            Receiving commands by sending out "getgoals" failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.GetDateTime_Failed">
            <summary>
            Getting remote date and time failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.Logging_Failed">
            <summary>
            Adding a message to Aram log failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.ConfigStart_Failed">
            <summary>
            Failed to start a new config.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.ConfigAdd_Failed">
            <summary>
            Failed to add a value to the config.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.ConfigParse_Failed">
            <summary>
            Failed to parse the config.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.ConfigGetSectionValues_Failed">
            <summary>
            Failed to get values of a section in the config.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.ConfigGetSectionInfo_Failed">
            <summary>
            Failed to get information about a section in the config.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.MapObjectInfo_Failed">
            <summary>
            Failed to get information about an object in the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.MapObjectList_Failed">
            <summary>
            Failed to get a list of objects of the given type placed in the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.MapObjectTypeInfo_Failed">
            <summary>
            Failed to get information about an object type used in the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.MapObjectTypeList_Failed">
            <summary>
            Failed to get a list of object types used throughout the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsAdd_Failed">
            <summary>
            Failed to add soft signals.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetInput_Failed">
            <summary>
            Failed to set inputs of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetInputBit_Failed">
            <summary>
            Failed to set input bit of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetInputByte_Failed">
            <summary>
            Failed to set input byte of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetOutput_Failed">
            <summary>
            Failed to set output of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetOutputBit_Failed">
            <summary>
            Failed to set output bit of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsSetOutputByte_Failed">
            <summary>
            Failed to set output byte of soft signal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.SoftSignalsRemove_Failed">
            <summary>
            Failed to remove soft signals.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.DataStore_GetGroups_Failed">
            <summary>
            Failed to get groups in data store.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.DataStore_GetGroupValues_Failed">
            <summary>
            Failed to get values of a group in data store.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.DataStore_GetGroupInfo_Failed">
            <summary>
            Failed to get info on a group in data store.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.DataStore_GetFieldValue_Failed">
            <summary>
            Failed to get the value of a key in data store.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.DataStore_GetFieldInfo_Failed">
            <summary>
            Failed to get the info of a key in data store.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Common.Intrepreting_Answer_Failed">
            <summary>
            Interpreting the response received from the server has failed.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorCodes.Robot">
            <summary>
            Error codes just used in <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Unknown_Dock_State">
            <summary>
            The <see cref="T:Mobile.Communication.Common.DockStates"/> could not be identified.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GetRoutes_Failed">
            <summary>
            Receiving routes by sending out "getroutes" failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GetMacros_Failed">
            <summary>
            Receiving macros by sending out "getmacros" failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GetSwitchableForbiddens_Failed">
            <summary>
            Failed to get list of switchable forbidden lines and areas.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GetFaults_Failed">
            <summary>
            Failed to get faults.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshStatus_Failed">
            <summary>
            Refreshing status failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshDockingStatus_Failed">
            <summary>
            Refreshing docking status failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshWaitState_Failed">
            <summary>
            Refreshing wait state failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshPauseState_Failed">
            <summary>
            Refreshing pause state failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshStatusStatusOnEM_Failed">
            <summary>
            Refreshing the <see cref="T:Mobile.Communication.Common.ErrorCodes.Robot"/>s status on the <see cref="T:Mobile.Communication.Common.ErrorCodes.EnterpriseManager"/> failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshMotorStatus_Failed">
            <summary>
            Refreshing the status of the motors failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshOdometer_Failed">
            <summary>
            Refreshing the odometer failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshEstimatedArrival_Failed">
            <summary>
            Refreshing the estimated arrival failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshRangeDeviceList_Failed">
            <summary>
            Refreshing the list range devices failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshRangeDeviceCurrent_Failed">
            <summary>
            Refreshing the current readings of a range device failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.RefreshRangeDeviceCumulative_Failed">
            <summary>
            Refreshing the cumulative readings of a range device failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.EnableMotors_Failed">
            <summary>
            Failed to enable the motors.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.ResetOdometer_Failed">
            <summary>
            Failed to reset the odometer.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GotoGoal_Failed">
            <summary>
            Unable to initialize goto goal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.GotoPoint_Failed">
            <summary>
            Unable to initialize goto point.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.LocalizeAtGoal_Failed">
            <summary>
            Unable to localize robot at a goal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.LocalizeToPoint_Failed">
            <summary>
            Unable to localize robot to a point.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.PatrolRoute_Failed">
            <summary>
            Unable to initialzie patrol route.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.ExecuteMacro_Failed">
            <summary>
            Unable to initialize executing a macro.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Stop_Failed">
            <summary>
            Stopping the robot failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Stay_Failed">
            <summary>
            Staying failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Go_Failed">
            <summary>
            Go failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Say_Failed">
            <summary>
            Saying sth failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.WaitTaskTermination_Failed">
            <summary>
            Terminating the wait task failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.PauseTaskTermination_Failed">
            <summary>
            Terminating the pause task failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.TerminateWaitTask_Failed">
            <summary>
            Terminating the wait task failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.SwitchForbiddenByName_Failed">
            <summary>
            Switching the status of a forbidden line or area by its name failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.SwitchForbiddenByPrefix_Failed">
            <summary>
            Switching the status of forbidden lines or areas by their prefix failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.QueueDropoff_Failed">
            <summary>
            Unable to queue dropoff.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Modifying_Segment_Failed">
            <summary>
            Unable to modify a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Cancelling_Job_Failed">
            <summary>
            Unable to cancel a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Getting_Segments_Failed">
            <summary>
            Unable to get all segments.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Updating_Segment_Failed">
            <summary>
            Unable to update the status of a segment.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Updating_Job_Failed">
            <summary>
            Unable to update a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.InputQuery_Failed">
            <summary>
            Unable to update input status.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.InputList_Failed">
            <summary>
            Unable to update input list.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.OutputQuery_Failed">
            <summary>
            Unable to update output status.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.OutputList_Failed">
            <summary>
            Unable to update output list.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.OutputSet_Failed">
            <summary>
            Unable to set output to on or off.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.SetFault_Failed">
            <summary>
            Unable to set fault.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.ClearFault_Failed">
            <summary>
            Unable to clear fault.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Docking_Failed">
            <summary>
            Unable to dock.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.UnDocking_Failed">
            <summary>
            Unable failed to undock.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Unknown_Forced_State">
            <summary>
            The <see cref="T:Mobile.Communication.Common.ForcedStates"/> could not be identified.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Unknown_Charge_State">
            <summary>
            The <see cref="T:Mobile.Communication.Common.ChargeStates"/> could not be identified.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.Robot.Updating_Status_Failed">
            <summary>
            An error occurred during updating the status of the robot.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorCodes.EnterpriseManager">
            <summary>
            Error codes just used in <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Cancelling_Job_Failed">
            <summary>
            Unable to cancel a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Cancelling_Segment_Failed">
            <summary>
            Unable to cancel a segment.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Queue_Job_Failed">
            <summary>
            Unable to queue a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Modifying_Segment_Failed">
            <summary>
            Unable to modify a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Updating_Segment_Failed">
            <summary>
            Unable to update the status of a segment.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Updating_Job_Failed">
            <summary>
            Unable to update a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.GetRobotStatus_Failed">
            <summary>
            Unable to get the status of a robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.GetRobotFaults_Failed">
            <summary>
            Failed to get faults of a robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorCodes.EnterpriseManager.Getting_Segments_Failed">
            <summary>
            Unable to get all segments.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.AramLogLevel">
            <summary>
            The level of an Aram log message.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.AramLogLevel.Terse">
            <summary>
            Terse. Most important.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.AramLogLevel.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.AramLogLevel.Verbose">
            <summary>
            Verbose. Least important.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatusOnEM">
            <summary>
            Status of an Adept Lnyx on the Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotStatusOnEM.Unknown">
            <summary>
            Unknown status of this robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotStatusOnEM.Available">
            <summary>
            Robot is available to be used by the Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotStatusOnEM.UnAvailable">
            <summary>
            Robot is NOT available to be used by the Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotStatusOnEM.InProgress">
            <summary>
            The is currently executing a job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotSubStatusOnEM">
            <summary>
            SubStatus of an Adept Lynx on the Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Unknown">
            <summary>
            Unknown substate.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Available">
            <summary>
            Robot is available to be used by the Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.NotUsingEnterpriseManager">
            <summary>
            This robot is not using an Enterprise Manager.
            The Enterprise Manager will not use this robot to fullfill tasks.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.UnknownBatteryType">
            <summary>
            Battery level could not be determined.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.ForcedDocked">
            <summary>
            The robot is forced to dock.
            Maybe the battery status is too low.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Lost">
            <summary>
            The robot does not know where it is.
            It can not localize itself on the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.EStopPressed">
            <summary>
            The EmergenyStop button is pressed (and not released).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Interrupted">
            <summary>
            The robot has been interrupted. For example if an ESTOP has been pressed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.InterruptedButNotYetIdle">
            <summary>
            The robot has been interrupted and the reason for being interrupted is not active anymore (for example motors are enabled again after an ESTOP).
            However the robot is not yet ready to perform the next command from QueuingManager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.OutgoingARCLConnLost">
            <summary>
            Outgoing ARCL connection has been lost.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Parking">
            <summary>
            The robot is parking.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Parked">
            <summary>
            The robot is parked.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.DockParking">
            <summary>
            The robot is docking instead of parking.
            Either because the battery level dropped beyond ParkLowStateOfCharge or no more standy goals are available.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.DockParked">
            <summary>
            The robot docked instead of parked.
            Either because the battery level dropped beyond ParkLowStateOfCharge or no more standy goals are available.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.ModeIsLocked">
            <summary>
            The robot's mode has been locked.
            So the QueuingManager cannot access the robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.UnAllocated">
            <summary>
            Route to target not yet planned.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Allocated">
            <summary>
            Route is planned.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Driving">
            <summary>
            Driving to goal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.RobotSubStatusOnEM.Custom">
            <summary>
            A custom status is applied (like fault name).
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ForcedStates">
            <summary>
            The ForcedStates enumeration.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ForcedStates.Unknown">
            <summary>
            Undefined ForcedState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ForcedStates.Forced">
            <summary>
            Forced means the robot is forced to do something (for example dock, if battery is empty).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ForcedStates.Unforced">
            <summary>
            The oposite of "Forced", the robot behaves like this because it is told to do so by commands.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ChargeStates">
            <summary>
            The ChargeStates enumeration.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Unknown">
            <summary>
            Unknown ChargeState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Unknowable">
            <summary>
            Undefined ChargeState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Not">
            <summary>
            Actually not charging.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Bulk">
            <summary>
            Bulk charging (maximum charge current allowed for the cells).
            The robot is getting the most current into the battery.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Overcharge">
            <summary>
            Overcharging battery to ensure full capacity.
            The robot is getting some current, but less than Bulk (normally based on voltage at that point or something).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Float">
            <summary>
            Full battery, just charge to capacity against self discharging.
            The robot is doing a maintenance charge, keeping the state of charge at 100% or something.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ChargeStates.Balance">
            <summary>
            Slowly loading battery to nearly 100% of capacity.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.DockStates">
            <summary>
            The DockStates enumeration.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DockStates.Unknown">
            <summary>
            Undefined DockState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DockStates.Docked">
            <summary>
            Robot currently docked to a dockingStation.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DockStates.Undocked">
            <summary>
            Oposite of docked, robot currently not docked to a dockingStation.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DockStates.Docking">
            <summary>
            Robot is going to dock at a dockingStation.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.DockStates.Undocking">
            <summary>
            Robot is currently undocking from a docktingStation.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.MotorState">
            <summary>
            The states of the motors.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.MotorState.Unknown">
            <summary>
            Unknown motor state.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.MotorState.Enabled">
            <summary>
            Motors are enabled.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.MotorState.Disabled">
            <summary>
            Motors are disabled.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.MotorState.ESTOP">
            <summary>
            ESTOP is pressed.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.PauseState">
            <summary>
            The pausing states of a robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.PauseState.Unknown">
            <summary>
            Unknown PauseState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.PauseState.NotPausing">
            <summary>
            Robot is not pausing.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.PauseState.Pausing">
            <summary>
            Robot is pausing.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.PauseState.PauseCancelled">
            <summary>
            PauseTask is finished.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.WaitState">
            <summary>
            The waiting states of a robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.WaitState.Unknown">
            <summary>
            Unknown WaitState.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.WaitState.NotWaiting">
            <summary>
            The robot is not waiting.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.WaitState.Waiting">
            <summary>
            The robot is waiting.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.WaitState.WaitingCompleted">
            <summary>
            Waiting is completed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.WaitState.WaitingCancelled">
            <summary>
            Waiting is cancelled.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorStrings">
            <summary>
            Messages used if an error occurres while working with mobile common objects.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorStrings.Common">
            <summary>
            Common error descriptions.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.IsNullOrEmpty">
            <summary>
            A string similar to "is null or empty.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.IsNullOrWhitespace">
            <summary>
            A string similar to "is null, empty or consists of whitespace characters only.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.CanNotParseDateTime">
            <summary>
            A string similar to "The given date and time are in an unknown format (maybe depending on the CultureInfo) and therefore can not be parsed.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.ValidValues">
            <summary>
            A string similar to "Valid values are: ".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.ValidArguments">
            <summary>
            A string similar to "Valid arguments are: ".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.ArgumentInvalid">
            <summary>
            A string similar to " is not a valid argument.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.ArgumentInvalidType">
            <summary>
            A string similar to "This object is not of type ".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.ResponseTimedOut">
            <summary>
            A string similar to "The timeout provided by "ResponseTimeout" has expired and no response has been received."
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.StartupLinesNotComplete">
            <summary>
            A string similar to "Not all lines send at startup have been received yet.
            Therefore sending commands is not possible."
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.InvalidJob">
            <summary>
            A string similar to "This job is not valid.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.JobAlreadyQueued">
            <summary>
            A string similar to "The job is already queued.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.InvalidAnswer">
            <summary>
            A string similar to "The received line "{0}" seems invalid.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.CommandsTimedOut">
            <summary>
            A string similar to "Not all commands received in time.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.NoValidLimitation">
            <summary>
            A string similar to "No negative values are allowed. Only -1 to signal no limitation.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.NoCallback">
            <summary>
            A string similar to "No callback".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.TypeError">
            <summary>
            A string similar to "{0} is not of desired type {1}".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.NoSpacesAllowed">
            <summary>
            A string similar to "No spaces allowed.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.HasValue">
            <summary>
            A string similar to "'{0}' has value [{1}}.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Common.NotValid">
            <summary>
            A string similar to "{0} is not valid.".
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorStrings.DataStructures">
            <summary>
            Messages thrown by DataStructures used within mobile objects.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.IndexOutOfRange">
            <summary>
            A string similar to "index is less than 0. -or- index is equal to or greater than size of the collection.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionEmpty">
            <summary>
            A string similar to "The collection is empty.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionMaxSizeReached">
            <summary>
            A string similar to "Maximum size of the collection is reached - Collection is full.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionIsReadOnly">
            <summary>
            A string similar to "This collection is read-only.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionItemIsNull">
            <summary>
            A string similar to "An item in the collection is null.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionAlreadyContainsItem">
            <summary>
            A string similar to "{0} is already part of the collection.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionDoesNotContainItem">
            <summary>
            A string similar to "{0} is not part of the collection.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionEnumBeforeFirst">
            <summary>
            A string similar to "The enumerator is positioned before the first element of the collection.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionEnumBehindLast">
            <summary>
            A string similar to "The enumerator is positioned after the last element of the collection.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.CollectionModifiedAfterEnumCreation">
            <summary>
            A string similar to "The collection was modified after the enumerator was created.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.ParameterListTooLong">
            <summary>
            A string similar to "The list is longer than the max possible size this collection can reach.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.ParameterListEmpty">
            <summary>
            A string similar to "The list is empty.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.ParameterListsHaveDifferentLength">
            <summary>
            A string similar to "The length of the lists are different.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.DataStructures.ArrayIsEmpty">
            <summary>
            A string similar to "The array needs to have at least one entry.".
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorStrings.Robot">
            <summary>
            Messages thrown by <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.DockNotAvailable">
            <summary>
            A string similar to "Specified dock is not available.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.GoalNotAvailable">
            <summary>
            A string similar to "Specified goal is not available.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.RouteNotAvailable">
            <summary>
            A string similar to "Specified route is not available.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.ParseErrorChargeState">
            <summary>
            A string similar to "Could not parse chargeState.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.ParseErrorDockState">
            <summary>
            A string similar to "Could not parse dockState.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.ParseErrorForcedState">
            <summary>
            A string similar to "Could not parse forcedState.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.IoCannotUpdate_NoDelegate">
            <summary>
            A string similar to "Cannot update IO's state as no delegate is set.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.OutputCannotSetTo">
            <summary>
            A string similar to "Cannot set the output to {0}.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.OutputCannotChange_NoDelegate">
            <summary>
            A string similar to "Cannot change output's state as no delegate is set.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.Robot.FaultContainsInvalidChars">
            <summary>
            A string similar to "Name of fault contains invalid characters. No spaces or special characters allowed - Only letters and numbers.".
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.ErrorStrings.EnterpriseManager">
            <summary>
            Messages thrown by <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.EnterpriseManager.SegmentsAlreadyLinked">
            <summary>
            A string similar to "This Segment is already linked to {0} instead of {1}.".
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.ErrorStrings.EnterpriseManager.UnknownCancelType">
            <summary>
            A string similar to "UNKNOWN CANCELTYPE! We should never be here!".
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.EventQueue`1">
            <summary>
            An alternate implementation of <see cref="T:System.Collections.Generic.Queue`1"/> that raises an event if an element is being en-/de-queued.
            This class also implements <see cref="T:System.Collections.ICollection"/> and <see cref="T:System.Collections.IEnumerable"/> explicitly.
            </summary>
            <typeparam name="T">The type of elements to store in the queue.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.EventQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.EventQueue`1"/> class.
            </summary>
            <param name="capacity">The capacity the queue will be initialized with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.EventQueue`1"/> class.
            </summary>
            <param name="collection">The collection the queue will be initialized with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            The value can be null for reference types.</param>
            <returns>true if item is found in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater
            than the length of <paramref name="array"/>.
             -or- The number of elements in the source <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <returns>The object that is removed from the beginning of </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to remove and return the object at the beginning of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <param name="result">When this method returns, if the operation was successful, result contains the
            object removed. If no object was available to be removed, the value is the default value of type T.</param>
            <returns><see langword="true"/> if an element was removed and returned from the beginning of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> successfully;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            The value can be null for reference types.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the first occurrence within the entire <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found;
            otherwise, the default value for type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.FindAll(System.Predicate{`0})">
            <summary>
             Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns> A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified
            predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first matching element from the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="item">The item to check equality with.</param>
            <param name="comparer">The mechanism to check equality between <paramref name="item"/>
            and all elements in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> with.
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> is called
            like <paramref name="comparer"/>.Equals(<paramref name="item"/>, element).
            Where element is the element in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.RemoveAll(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes each matching element from the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <param name="item">The item to check equality with.</param>
            <param name="comparer">The mechanism to check equality between <paramref name="item"/>
            and all elements in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> with.
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> is called
            like <paramref name="comparer"/>.Equals(<paramref name="item"/>, element).
            Where element is the element in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Remove(`0)">
            <summary>
            Removes an element from the queue.
            Determines the element to remove by its reference.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.Count">
            <summary>
            Gets the number of elements in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.IsEmpty">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is empty.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> <paramref name="index"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
             -or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
             -or- The number of elements in the source <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is greater than
            the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:Mobile.Communication.Common.EventQueue`1"/>
            cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Equals(System.Object)">
            <summary>
            Checks if this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals another object, not by reference.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals the other object; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.Equals(Mobile.Communication.Common.EventQueue{`0})">
            <summary>
            Checks if an <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals another by element, not by reference.
            </summary>
            <param name="queue">The queue to equal with.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals <paramref name="queue"/>
            by elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.ContentEqual(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if an <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by element,
            not by reference.
            </summary>
            <param name="queue">The queue to equal with.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> equals <paramref name="queue"/>
            by elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged">
            <summary>
            This event is raised whenever the <see cref="T:Mobile.Communication.Common.EventQueue`1"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,`0,System.Int32)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/>.
            Use this when removing or adding an element from/to the queue.
            </summary>
            <param name="change">The change made to the queue.</param>
            <param name="item">The item involved in the change.</param>
            <param name="index">The index of the item in the queue.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.EventQueue`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/> event directly if <paramref name="queueChangedCallback"/> is <see langword="null"/>.
            </summary>
            <param name="queueChangedCallback">The callback to invoke <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/> or <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.EventQueue`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="P:Mobile.Communication.Common.EventQueue`1.MaxLength">
            <summary>
            Gets or sets the maximum number of items held by this <see cref="T:Mobile.Communication.Common.EventQueue`1"/>.
            A value of <c>-1</c> means no limitation.
            If the number of items stored in this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> exceeds this value,
            the earliest response will be dequeued.
            If <paramref name="value"/> is less than <see cref="P:Mobile.Communication.Common.EventQueue`1.Count"/>,
            this <see cref="T:Mobile.Communication.Common.EventQueue`1"/> is shortened to <paramref name="value"/> items.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is out of range (less than <c>-1</c>).</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Event.ActionEventArgs">
            <summary>
            EventArgs that contains a <see cref="T:System.String"/> describing the action (e.g. interrupted or failed).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Event.ActionEventArgs.Action">
            <summary>
            The action.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.ActionEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Event.ActionEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.DataChangedEventArgs`1">
            <summary>
            Event argument holding data for a change made to a value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value that has changed.</typeparam>
        </member>
        <member name="P:Mobile.Communication.Common.Event.DataChangedEventArgs`1.DataChange">
            <summary>
            Both values.
            The old and the new one.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.DataChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            The constructor setting the old and the new status.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.ValueEventArgs`1">
            <summary>
            A class deriving from <see cref="T:System.EventArgs"/> that contains a typed value.
            </summary>
            <typeparam name="T">The type of the value passed by the event.</typeparam>
        </member>
        <member name="F:Mobile.Communication.Common.Event.ValueEventArgs`1.Value">
            <summary>
            The value to pass.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.ValueEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Event.ValueEventArgs`1"/>.
            </summary>
            <param name="value">The value to pass.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.FaultEventArgs`1">
            <summary>
            A class that contains information about an event related to faults.
            </summary>
            <typeparam name="T">The type of the fault.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.Event.FaultEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Event.FaultEventArgs`1"/>.
            </summary>
            <param name="fault">The <see cref="P:Mobile.Communication.Common.Event.FaultEventArgs`1.Fault"/>.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.FaultEventArgs`1.Fault">
            <summary>
            Gets the fault.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Event.GoalReachedEventArgs">
            <summary>
            EventArgs containing a goal the robot has arrived at.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Event.GoalReachedEventArgs.Goal">
            <summary>
            The goal the robot has arrived at.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.GoalReachedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Event.GoalReachedEventArgs"/> class.
            </summary>
            <param name="goal">The goal the robot has arrived at.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.IOChangedEventArgs">
            <summary>
            Provides data of the Changed <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.IOChangedEventArgs.#ctor(System.String,Mobile.Communication.Common.IO.Switch)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Event.IOChangedEventArgs"/>.
            </summary>
            <param name="label">The label of the changed <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <param name="state">The new <see cref="T:Mobile.Communication.Common.IO.Switch"/> of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.IOChangedEventArgs.Label">
            <summary>
            Gets the label of the changed <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Event.IOChangedEventArgs.State">
            <summary>
            Gets the new <see cref="T:Mobile.Communication.Common.IO.Switch"/> of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Event.JobEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> containing a <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.JobEventArgs.#ctor(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Event.JobEventArgs"/>.
            </summary>
            <param name="job">The job.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.JobEventArgs.Job">
            <summary>
            The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object the event is fired for.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Event.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common.Event"/> namespace contains objects used to raise events.
            All classes in here derive from <see cref="T:System.EventArgs"/> which means they contain arguments for events that are raised in various situations.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Event.PatrolFinishedEventArgs">
            <summary>
            EventArgs containing a route the robot finished patrolling.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Event.PatrolFinishedEventArgs.Route">
            <summary>
            The route the robot finished patrolling.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PatrolFinishedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Event.PatrolFinishedEventArgs"/> class.
            </summary>
            <param name="route">The route the robot finished patrolling.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs">
            <summary>
            Provides data for a changed property.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs"/> class
            setting the name of the changed property and it's new value.
            </summary>
            <param name="name">The name of the property that changed.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This Constructor is used to deserialize the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.PropertyChangedEventArgs.Value">
            <summary>
            The new value of the property.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1">
            <summary>
            Provides data for a changed property.
            </summary>
            <typeparam name="T">The type hold by the property.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1"/> class
            setting the name of the changed property as well as it's old and new value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This Constructor is used to deserialize the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1.Change">
            <summary>
            The changes made.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.PropertyChangedEventArgs`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Event.SwitchableForbiddenEventArgs">
            <summary>
            Provides data of the Changed <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Event.SwitchableForbiddenEventArgs.#ctor(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
            <param name="label">The label of the changed <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <param name="state">The new <see cref="T:Mobile.Communication.Common.SwitchableForbidden.Switch"/> of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Event.SwitchableForbiddenEventArgs.Label">
            <summary>
            Gets the label of the changed <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Event.SwitchableForbiddenEventArgs.State">
            <summary>
            Gets the new <see cref="T:Mobile.Communication.Common.SwitchableForbidden.Switch"/> of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Fault">
            <summary>
            A class representing a fault.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Fault.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Fault.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on a "Go" command.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Fault.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on a "Go" command.</param>
            <param name="isClearedOnAck">Whether this is <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Fault.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.Fault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on a "Go" command.</param>
            <param name="isClearedOnAck">Whether this is <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement.</param>
            <param name="fromApp">Whether this <see cref="T:Mobile.Communication.Common.Fault"/> comes from application (<see langword="true"/>) or from Aram (internal fault; <see langword="false"/>).</param>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.Name">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.ShortDescription">
            <summary>
            Gets the short description of the <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.LongDescription">
            <summary>
            Gets the long description of the <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.IsDriving">
            <summary>
            Gets whether this is a driving <see cref="T:Mobile.Communication.Common.Fault"/>.
            Driving faults prevent the robot from moving until they are cleared.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.IsCritical">
            <summary>
            Gets whether this is a critical <see cref="T:Mobile.Communication.Common.Fault"/>.
            Critical faults will continue to show up (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.IsClearedOnGo">
            <summary>
            Gets whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.IsClearedOnAck">
            <summary>
            Gets whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement
            (through MobileEyes/MobilePlanner/LynxTouchscreen).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Fault.IsAppFault">
            <summary>
            Gets whether this <see cref="T:Mobile.Communication.Common.Fault"/> was triggered from inside Aram (<see langword="false"/>) or from the application/payload (<see langword="true"/>).
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Fault.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Mobile.Communication.Common.Fault"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.RobotFault">
            <summary>
            A class representing a robot fault.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotFault.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotFault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="robot">The name of the robot.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotFault.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotFault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="robot">The name of the robot.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.RobotFault"/> is cleared on a "Go" command.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotFault.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotFault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="robot">The name of the robot.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.RobotFault"/> is cleared on a "Go" command.</param>
            <param name="isClearedOnAck">Whether this is <see cref="T:Mobile.Communication.Common.RobotFault"/> is cleared on acknowledgement.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotFault.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotFault"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="robot">The name of the robot.</param>
            <param name="shortDescription">The short description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="longDescription">The long description of the <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isDriving">Whether this is a driving <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isCritical">Whether this is a critical <see cref="T:Mobile.Communication.Common.RobotFault"/>.</param>
            <param name="isClearedOnGo">Whether this <see cref="T:Mobile.Communication.Common.RobotFault"/> is cleared on a "Go" command.</param>
            <param name="isClearedOnAck">Whether this is <see cref="T:Mobile.Communication.Common.RobotFault"/> is cleared on acknowledgement.</param>
            <param name="fromApp">Whether this <see cref="T:Mobile.Communication.Common.RobotFault"/> comes from application (<see langword="true"/>) or from Aram (internal fault; <see langword="false"/>).</param>
        </member>
        <member name="P:Mobile.Communication.Common.RobotFault.RobotName">
            <summary>
            Gets the name of the robot this fault occurred on.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotFault.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Mobile.Communication.Common.RobotFault"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Mobile.Communication.Common.RobotFault"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.IArclBase">
            <summary>
            An interface for all ARCL objects.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SendCommand(System.String)">
            <summary>
            Sends a command.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.Help">
            <summary>
            Gets all ARCL-commands and their description.
            </summary>
            <returns>All ARCL-commands and their description.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.Help(Mobile.Communication.Common.ArclBase.ArclCommand[]@,System.String@)">
            <summary>
            Gets all ARCL-commands and their description.
            </summary>
            <param name="commands">All ARCL-commands and their description.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if <see cref="P:Mobile.Communication.Common.IArclBase.Commands"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshGoals">
            <summary>
            Refreshes the list of goals.
            </summary>
            <returns>An array containing a copy of the list of goals.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <seealso cref="P:Mobile.Communication.Common.IArclBase.Goals"/>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshGoals(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of goals.
            </summary>
            <param name="goals">An array containing a copy of the list of goals.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if <see cref="P:Mobile.Communication.Common.IArclBase.Commands"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.IArclBase.Goals"/>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.GetDateTime">
            <summary>
            Gets the date and time of the remote object.
            </summary>
            <returns>The date and time of the remote object.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.GetDateTime(System.DateTime@,System.String@)">
            <summary>
            Gets the date and time of the remote object.
            </summary>
            <param name="dateTime">The date and time of the remote object.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if date and time of remote object has been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.Log(System.String,Mobile.Communication.Common.AramLogLevel)">
            <summary>
            Logs a message to the Aram log.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the message.</param>
            <returns>The date and time of the remote object.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.Log(System.String,Mobile.Communication.Common.AramLogLevel,System.String@)">
            <summary>
            Logs a message to the Aram log.
            </summary>
            <param name="message">The message to log.</param>
            <param name="level">The level of the message.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completes successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.ChangeConfigParameter(System.String,System.String,System.Object)">
            <summary>
            Changes a config parameter.
            </summary>
            <param name="section">The section under which the parameter is listed.</param>
            <param name="parameter">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.IsConfigEditable">
            <summary>
            Determines whether the config can be changed over ARCL.
            </summary>
            <returns><see langword="true"/> if the config can be changed through ARCL; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.ConfigStart">
            <summary>
            Starts a new config.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.ConfigParse">
            <summary>
            Parses the new config.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.ConfigAdd(System.String,System.Object)">
            <summary>
            Adds the parameter with the specified value to the config.
            </summary>
            <param name="parameter">The name of the parameter.</param>
            <param name="value">The value of the <paramref name="parameter"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.ConfigAdd(System.String)">
            <summary>
            Adds a section to the new config.
            </summary>
            <param name="section">The name of the new section</param>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.GetConfigSectionValues(System.String)">
            <summary>
            Gets the values of the <paramref name="section"/> of the ARCL object's config.
            </summary>
            <param name="section">The section for which to get the parameters and their values.</param>
            <returns>The updated <paramref name="section"/> of the ARCL objects's config.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.GetConfigSectionInfo(System.String)">
            <summary>
            Gets the information about the <paramref name="section"/> of the ARCL object's config.
            </summary>
            <param name="section">The section for which to get the parameters and their information.</param>
            <returns>The updated <paramref name="section"/> of the ARCL object's config.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshMapObject(System.String)">
            <summary>
            Refreshes the values of an object in the map.
            </summary>
            <param name="name">The name of the map object.</param>
            <returns>The map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshMapObject(System.String,Mobile.Communication.Common.Map.MapObject@,System.String@)">
            <summary>
            Refreshes the values of an object in the map.
            </summary>
            <param name="name">The name of the map object.</param>
            <param name="mapObject">The map object.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if date and time of remote object has been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshMapObjectCollection``1">
            <summary>
            Refreshes the MapObject collection of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
            <returns>An array containing the refreshed elements of the MapObject collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.RefreshMapObjectCollection``1(``0[]@,System.String@)">
            <summary>
            Refreshes the MapObject collection of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the objects in the collection.</typeparam>
            <param name="collection">An array containing the refreshed elements of the MapObject collection.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation was successful;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalsAdd(System.String,System.Int32,System.Int32)">
            <summary>
            Adds soft signals (external I/Os) to the configuration.
            </summary>
            <param name="name">The name of the I/O block to add.</param>
            <param name="nrInputs">The number of inputs to add. This needs to be &gt; 0.</param>
            <param name="nrOutputs">The number of outputs to add. This needs to be &gt; 0.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetInput(System.String,System.UInt32)">
            <summary>
            Sets the input of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="value">The value to set for the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetInput(System.String,System.String)">
            <summary>
            Sets the input of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="hexValue">The hex value to set for the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetInputBit(System.String,System.Byte,System.Boolean)">
            <summary>
            Sets the input bit of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bitPos">The position of the bit within the input block.</param>
            <param name="enable"><see langword="true"/> to set input bit high (on); <see langword="false"/> to set input bit low (off).</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetInputByte(System.String,System.Byte,System.Byte)">
            <summary>
            Sets the input byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the input block.</param>
            <param name="value">The new value of the byte within the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetInputByte(System.String,System.Byte,System.String)">
            <summary>
            Sets the input byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the input block.</param>
            <param name="hexValue">The new hex value of the byte within the input block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetOutput(System.String,System.UInt32)">
            <summary>
            Sets the output of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="value">The value to set for the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetOutput(System.String,System.String)">
            <summary>
            Sets the output of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="hexValue">The hex value to set for the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetOutputBit(System.String,System.Byte,System.Boolean)">
            <summary>
            Sets the output bit of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bitPos">The position of the bit within the output block.</param>
            <param name="enable"><see langword="true"/> to set input bit high (on); <see langword="false"/> to set input bit low (off).</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetOutputByte(System.String,System.Byte,System.Byte)">
            <summary>
            Sets the output byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the output block.</param>
            <param name="value">The new value of the byte within the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalSetOutputByte(System.String,System.Byte,System.String)">
            <summary>
            Sets the output byte of a soft signal block.
            </summary>
            <param name="name">The name of the I/O block.</param>
            <param name="bytePos">The position of the byte within the output block.</param>
            <param name="hexValue">The new hex value of the byte within the output block.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.SoftSignalsRemove(System.String)">
            <summary>
            Removes soft signals (external I/Os) from the configuration.
            </summary>
            <param name="name">The name of the I/O block to remove.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if not connected.
             -or- an error occured while encoding or transmitting data.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.IArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IArclBase.Close">
            <summary>
            Closes the object.
            This releases all associated resources by disposing the object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Identifier">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.IsAlive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> specifying whether the object is connected (true) or not (false).
            By setting this property the object connects (true) or disconnects (false).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.PollingInterval">
            <summary>
            The frequency to check for incomming data (in milliseconds).
            The default is 10ms.
            </summary>
            <exception cref="T:System.ArgumentException">The value is less than zero.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.ResponseTimeout">
            <summary>
            Gets or sets the amount of time (milliseconds) to wait for a resonse given to a sent command.
            If this is less than 0 it will block the calling Thread until a response is received.
            This may be a problem if no response will be received due to a loss of connection.
            In this case the calling Thread will be blocked indefinitely long.
            If the timeout exceeds before a response has been received, an Exception is thrown.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Responses">
            <summary>
            Gets the responses queue.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.ResponsesText">
            <summary>
            Gets all queued responses of the server
            as one <see cref="T:System.String"/> seperated by lines.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.QueueAll">
            <summary>
            If true, all responses are going to be queued;
            otherwise, responses that are interpreted (such as "endOf...")
            will not be added to <see cref="P:Mobile.Communication.Common.IArclBase.Responses"/>.
            If set to <see langword="false"/> no response will be queued.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.QueuedResponses">
            <summary>
            Gets or sets which responses will be added to <see cref="P:Mobile.Communication.Common.IArclBase.Responses"/> queue.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Goals">
            <summary>
            Gets a read-only collection of all goals.
            See the example how to safely iterate through the list of goals.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.IArclBase.RefreshGoals"/>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Commands">
            <summary>
            Gets a read-only collection of all <see cref="T:Mobile.Communication.Common.ArclBase.ArclCommand"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Configuration">
            <summary>
            Gets the configuration of the remote ARCL object.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.ManageJobs">
            <summary>
            Gets or sets which jobs will be managed by this instance of <see cref="T:Mobile.Communication.Common.IArclBase"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.QM">
            <summary>
            Gets the base QueuingManager.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Map">
            <summary>
            Gets the map of the system.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.DataStore">
            <summary>
            Gets access to the data store of the system.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Heartbeat">
            <summary>
            Gets the (modifiable) <see cref="P:Mobile.Communication.Common.IArclBase.Heartbeat"/> used by this <see cref="T:Mobile.Communication.Common.IArclBase"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.IsLoggingCommunication">
            <summary>
            Gets whether messages transmitted to/received from the remote object are logged.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.CommunicationLogger">
            <summary>
            Gets or sets the <see cref="T:Mobile.Logger.TextFileLogger"/> used to log communication messages.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.IsLoggingInterpretation">
            <summary>
            Gets whether messages appearing while interpreting the ARCL text get logged.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IArclBase.Logger">
            <summary>
            Gets or sets the <see cref="T:Mobile.Logger.TextFileLogger"/> used for logging.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IArclBase.UnhandledException">
            <summary>
            This event is raised by a <see cref="T:System.Exception"/> has not been handled by the user.
            Methods registered to this event MUST NOT THROW any <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IArclBase.MapChanged">
            <summary>
            This event is raised when the map has changed.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IArclBase.ConfigChanged">
            <summary>
            This event is change when the config has changed.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IArclBase.SoftSignalChanged">
            <summary>
            This event is raised when a soft signal block's value has changed.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.IEnterpriseManager">
            <summary>
            An interface to simplify working with an Enterterprise Manager.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotStatuses">
            <summary>
            Updates the status of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The statuses of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/></returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotStatuses(Mobile.Communication.Common.RobotStatusOnEnterpriseManager[]@,System.String@)">
            <summary>
            Updates the status of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotStatuses">The statuses of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IEnterpriseManager.ConnectedRobots"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="true"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotTargets">
            <summary>
            Updates the targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The targets of robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotTargets(Mobile.Communication.Common.RobotTarget[]@,System.String@)">
            <summary>
            Updates the targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotTargets">The targets of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IEnterpriseManager.ConnectedRobots"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="true"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotFaults">
            <summary>
            Updates the faults of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The faults of all robots.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.UpdateRobotFaults(Mobile.Communication.Common.RobotFault[]@,System.String@)">
            <summary>
            Updates the faults of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="robotFaults">The faults of all robots.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEnterpriseManager.ClearConnectedRobots">
            <summary>
            Clears <see cref="P:Mobile.Communication.Common.IEnterpriseManager.ConnectedRobots"/>;
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IEnterpriseManager.ConnectedRobots">
            <summary>
            Gets a read-only collection of all robots connected to the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IEnterpriseManager.QueuingManager">
            <summary>
            Gets the QueuingManager to queue and manipulate jobs.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.IEventQueue`1">
            <summary>
            An interface for a queue that fires events.
            </summary>
            <typeparam name="T">The type of elements to store in the queue.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            The value can be null for reference types.</param>
            <returns>true if item is found in the <see cref="T:Mobile.Communication.Common.EventQueue`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> elements to an existing
            one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the
            destination of the elements copied from <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater
            than the length of <paramref name="array"/>.
             -or- The number of elements in the source <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <returns>The object that is removed from the beginning of </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            The value can be null for reference types.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the first occurrence within the entire <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found;
            otherwise, the default value for type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.FindAll(System.Predicate{`0})">
            <summary>
             Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
            <returns> A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified
            predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first matching element from the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="item">The item to check equality with.</param>
            <param name="comparer">The mechanism to check equality between <paramref name="item"/>
            and all elements in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> with.
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> is called
            like <paramref name="comparer"/>.Equals(<paramref name="item"/>, element).
            Where element is the element in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.RemoveAll(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes each matching element from the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            </summary>
            <param name="item">The item to check equality with.</param>
            <param name="comparer">The mechanism to check equality between <paramref name="item"/>
            and all elements in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> with.
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/> is called
            like <paramref name="comparer"/>.Equals(<paramref name="item"/>, element).
            Where element is the element in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IEventQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IEventQueue`1.IsEmpty">
            <summary>
            Determines whether the <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> is empty.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IEventQueue`1.MaxLength">
            <summary>
            Gets or sets the maximum number of items held by this <see cref="T:Mobile.Communication.Common.IEventQueue`1"/>.
            A value of <c>-1</c> means no limitation.
            If the number of items stored in this <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> exceeds this value,
            the earliest response will be dequeued.
            If this is set to a value less than <see cref="P:System.Collections.ICollection.Count"/>,
            this <see cref="T:Mobile.Communication.Common.IEventQueue`1"/> is shortened.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.IO">
            <summary>
            A class representing an IO.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.IO.Switch">
            <summary>
            The state of the IO.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.IO.Switch.Unknown">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.IO.Switch.On">
            <summary>
            IO is set.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.IO.Switch.Off">
            <summary>
            IO is NOT set.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.IO.Switch.Broken">
            <summary>
            IO is broken.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.IO.RefreshStatusCallback">
            <summary>
            A delegate to update the <see cref="T:Mobile.Communication.Common.IO"/>'s state on a remote robot.
            </summary>
            <param name="label">The label of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <returns>The status of the <see cref="T:Mobile.Communication.Common.IO"/>.</returns>
        </member>
        <member name="F:Mobile.Communication.Common.IO._sync">
            <summary>
            An object to synchronization of several threads.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IO.#ctor(System.String,Mobile.Communication.Common.IO.Switch,Mobile.Communication.Common.IO.RefreshStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <param name="initialState">The initial state of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IO.#ctor(System.String,Mobile.Communication.Common.IO.RefreshStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IO.SetCallback(Mobile.Communication.Common.IO.RefreshStatusCallback)">
            <summary>
            Sets the callback to refresh the status of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
            <param name="refreshState">The callback to refresh the status of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IO.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.IO.StateChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.IO.StateChanged"/> event directly if <paramref name="stateChangedCallback"/> is <see langword="null"/>.
            </summary>
            <param name="stateChangedCallback">The callback to invoke <see cref="E:Mobile.Communication.Common.IO.StateChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.IO.StateChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IO.RefreshStatus">
            <summary>
            Refreshes the state of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
            <returns>The state of the <see cref="T:Mobile.Communication.Common.IO"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> has been set during creation.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the IO.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IO.RefreshStatus(Mobile.Communication.Common.IO.Switch@,System.String@)">
            <summary>
            Refreshes the state of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
            <param name="state">The state of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.IO.Label">
            <summary>
            Gets the name/label of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IO.Status">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.IO.Switch"/> of the <see cref="T:Mobile.Communication.Common.IO"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IO.StateChanged">
            <summary>
            The event signalling that the <see cref="T:Mobile.Communication.Common.IO"/>'s state changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IO.OnStateChanged(Mobile.Communication.Common.IO.Switch)">
            <summary>
            Fires the <see cref="E:Mobile.Communication.Common.IO.StateChanged"/> event.
            </summary>
            <param name="state">The new state of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IO.ToString">
            <summary>
            Returns the label and the state of the IO.
            "[Label] [Switch]".
            </summary>
            <returns>A string like: "[Label] [Switch]".</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Input">
            <summary>
            A class representing an Input.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Input.#ctor(System.String,Mobile.Communication.Common.IO.Switch,Mobile.Communication.Common.IO.RefreshStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Input"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.Input"/>.</param>
            <param name="initialState">The initial state of the <see cref="T:Mobile.Communication.Common.Input"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Input.#ctor(System.String,Mobile.Communication.Common.IO.RefreshStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Input"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.Input"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Output">
            <summary>
            A class representing an Output.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Output.SetStatusCallback">
            <summary>
            A delegate to set the <see cref="T:Mobile.Communication.Common.Output"/>'s state on the remote <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="label">The label of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="state">The state to set the <see cref="T:Mobile.Communication.Common.Output"/> to.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Output.#ctor(System.String,Mobile.Communication.Common.IO.Switch,Mobile.Communication.Common.IO.RefreshStatusCallback,Mobile.Communication.Common.Output.SetStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="initialState">The initial state of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
            <param name="setStatus">The <see cref="T:Mobile.Communication.Common.Output.SetStatusCallback"/> to change the <see cref="T:Mobile.Communication.Common.Output"/> on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Output.#ctor(System.String,Mobile.Communication.Common.IO.RefreshStatusCallback,Mobile.Communication.Common.Output.SetStatusCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="name">The name/label of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="refreshStatus">The <see cref="T:Mobile.Communication.Common.IO.RefreshStatusCallback"/> to update the state of the <see cref="T:Mobile.Communication.Common.IO"/> on the robot.</param>
            <param name="setStatus">The <see cref="T:Mobile.Communication.Common.Output.SetStatusCallback"/> to change the <see cref="T:Mobile.Communication.Common.Output"/> on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Output.SetStatus(Mobile.Communication.Common.IO.Switch)">
            <summary>
            Sets the state of the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="status">The state of the <see cref="T:Mobile.Communication.Common.Output"/>. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <exception cref="T:System.InvalidOperationException">Thrown if no <see cref="T:Mobile.Communication.Common.Output.SetStatusCallback"/> has been set during creation.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="status"/> is <see cref="F:Mobile.Communication.Common.IO.Switch.Unknown"/>.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the output.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Output.SetStatus(Mobile.Communication.Common.IO.Switch,System.String@)">
            <summary>
            Sets the state of the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="status">The state of the <see cref="T:Mobile.Communication.Common.Output"/>. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Output.SetCallback(Mobile.Communication.Common.Output.SetStatusCallback)">
            <summary>
            Sets the callback to set the status of a <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="setState">The callback to set the status of a <see cref="T:Mobile.Communication.Common.Output"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Output.TurnOn">
            <summary>
            Sets the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Output.TurnOn(System.String@)">
            <summary>
            Sets the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Output.TurnOff">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Output.TurnOff(System.String@)">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.IOCollection`1">
            <summary>
            A class representing a collection of <see cref="T:Mobile.Communication.Common.IO"/>s.
            </summary>
            <typeparam name="T">The Type of <see cref="T:Mobile.Communication.Common.IO"/>s in this collection.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.#ctor">
            <summary>
            Initialized a new instance of <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialized a new instance of <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="ios">The IOs to initialize this <see cref="T:Mobile.Communication.Common.IOCollection`1"/> with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.AddOrUpdate(`0)">
            <summary>
            Adds an <see cref="T:Mobile.Communication.Common.IO"/> to the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="io">The <see cref="T:Mobile.Communication.Common.IO"/> to add to this <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="io"/>'s label is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.TryAdd(`0)">
            <summary>
            Attempts to add the specified <see cref="T:Mobile.Communication.Common.IO"/> to the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="io">The <see cref="T:Mobile.Communication.Common.IO"/> to add.</param>
            <returns><see langword="true"/> if <paramref name="io"/> was added to the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            If the <see cref="T:Mobile.Communication.Common.IO"/> already exists, this method returns <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.Clear">
            <summary>
            Clears the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.Contains(System.String)">
            <summary>
            Determines whether an <see cref="T:Mobile.Communication.Common.IO"/> having the given <paramref name="label"/> is part of this <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="label">The name of the <see cref="T:Mobile.Communication.Common.IO"/> to locate in the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.IOCollection`1"/> contains a <see cref="T:Mobile.Communication.Common.IO"/> having the given <paramref name="label"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="label"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.GetIO(System.String)">
            <summary>
            Gets an <see cref="T:Mobile.Communication.Common.IO"/> by its name.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.IO"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.IO"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> does not exist in the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.TryGetIO(System.String,`0@)">
            <summary>
            Attempts to get the <see cref="T:Mobile.Communication.Common.IO"/> associated with
            the specified <paramref name="name"/> from the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.IO"/> to get.</param>
            <param name="io">When this method returns, value contains the <see cref="T:Mobile.Communication.Common.IO"/>
            from <see cref="T:Mobile.Communication.Common.IOCollection`1"/> with the specified <paramref name="name"/>
            or the default value of <typeparamref name="T"/>, if the operation failed.</param>
            <returns><see langword="true"/> if <paramref name="name"/> was found in the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>;
            otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.ToArray">
            <summary>
            Returns an array containing all <see cref="T:Mobile.Communication.Common.IO"/>s in this collection.
            </summary>
            <returns>An array containing all <see cref="T:Mobile.Communication.Common.IO"/>s in this collection.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.IOCollection`1.Names">
            <summary>
            Gets the labels of all <see cref="T:Mobile.Communication.Common.IO"/>s in this <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IOCollection`1.IOs">
            <summary>
            Gets all <see cref="T:Mobile.Communication.Common.IO"/>s in this <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IOCollection`1.Count">
            <summary>
            Gets the number of <see cref="T:Mobile.Communication.Common.IO"/>s in this <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged">
            <summary>
            An event raised if the <see cref="T:Mobile.Communication.Common.IOCollection`1"/> changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,`0)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/>.
            Use this when removing or adding an element from/to the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <param name="change">The change made to the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</param>
            <param name="item">The item involved in the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/> event directly if <paramref name="collectionChangedCallback"/> is <see langword="null"/>.
            </summary>
            <param name="collectionChangedCallback">The callback to invoke <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.IOCollection`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IOCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the <see cref="T:Mobile.Communication.Common.IOCollection`1"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.InputCollection">
            <summary>
            A class representing a collection of <see cref="T:Mobile.Communication.Common.Input"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.InputCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.InputCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.InputCollection.#ctor(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Input})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.InputCollection"/>.
            </summary>
            <param name="inputs">The inputs to initialize the <see cref="T:Mobile.Communication.Common.InputCollection"/> with.</param>
        </member>
        <member name="P:Mobile.Communication.Common.InputCollection.Item(System.String)">
            <summary>
            Gets the state of an <see cref="T:Mobile.Communication.Common.Input"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Input"/>.</param>
            <returns>The state of an <see cref="T:Mobile.Communication.Common.Input"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.OutputCollection">
            <summary>
            A class representing a collection of <see cref="T:Mobile.Communication.Common.Output"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.OutputCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.OutputCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.OutputCollection.#ctor(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Output})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.OutputCollection"/>.
            </summary>
            <param name="outputs">The inputs to initialize the <see cref="T:Mobile.Communication.Common.InputCollection"/> with.</param>
        </member>
        <member name="P:Mobile.Communication.Common.OutputCollection.Item(System.String)">
            <summary>
            Gets or sets the state of the <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <returns>The state of the <see cref="T:Mobile.Communication.Common.Output"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.IRobot">
            <summary>
            An interface to simplify working with a Robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRoutes">
            <summary>
            Refreshes the list of routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
            </summary>
            <returns>The routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing routes.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <seealso cref="P:Mobile.Communication.Common.IRobot.Routes"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRoutes(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
            </summary>
            <param name="routes">The routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if <see cref="P:Mobile.Communication.Common.IRobot.Routes"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.IRobot.Routes"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshMacros">
            <summary>
            Refreshes the list of macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
            </summary>
            <returns>The macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing macros.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <seealso cref="P:Mobile.Communication.Common.IRobot.Macros"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshMacros(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
            </summary>
            <param name="macros">The macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IRobot.Macros"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.IRobot.Macros"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshSwitchableForbiddens">
            <summary>
            Refreshes the collection of switchable forbidden lines and areas.
            </summary>
            <returns>The collection of switchable forbidden lines and areas.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing macros.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <seealso cref="P:Mobile.Communication.Common.IRobot.SwitchableForbiddens"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshSwitchableForbiddens(Mobile.Communication.Common.SwitchableForbidden[]@,System.String@)">
            <summary>
            Refreshes the collection of switchable forbidden lines and areas.
            </summary>
            <param name="switchableForbiddens">The collection of switchable forbidden lines and areas.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.IRobot.SwitchableForbiddens"/>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshStatus">
            <summary>
            Refreshes the status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshStatus(Mobile.Communication.Common.RobotStatus@,System.String@)">
            <summary>
            Refreshes the status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="status">The status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="status"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshDockingStatus">
            <summary>
            Refreshes the docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshDockingStatus(Mobile.Communication.Common.RobotStatus.RobotDockingState@,System.String@)">
            <summary>
            Refreshes the docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="dockingStatus">The docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="dockingStatus"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshWaitState">
            <summary>
            Refreshes the wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshWaitState(Mobile.Communication.Common.RobotStatus.WaitingState@,System.String@)">
            <summary>
            Refreshes the wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="waitState">The wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the wait state was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshPauseState">
            <summary>
            Refreshes the pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshPauseState(Mobile.Communication.Common.RobotStatus.PausingState@,System.String@)">
            <summary>
            Refreshes the pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="pauseState">The pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the pause state was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshStatusOnEnterpriseManager">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshStatusOnEnterpriseManager(Mobile.Communication.Common.RobotStatusOnEnterpriseManager@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="statusOnEM">The <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshMotorStatus">
            <summary>
            Refreshes the status of the motors.
            </summary>
            <returns>The status of the motors.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshMotorStatus(Mobile.Communication.Common.MotorState@,System.String@)">
            <summary>
            Refreshes the status of the motors.
            </summary>
            <param name="motorStatus">The status of the motors.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IRobot.MotorStatus"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshOdometer">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshOdometer(Mobile.Communication.Common.Odometer@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <param name="odometer">The <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IRobot.Odometer"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshEstimatedArrival">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshEstimatedArrival(Mobile.Communication.Common.ArrivalEstimate@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.
            </summary>
            <param name="estimate">The <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IRobot.EstimatedArrival"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.EnableMotors">
            <summary>
            Enables the motors of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.EnableMotors(System.String@)">
            <summary>
            Enables the motors of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the motors were enabled successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ResetOdometer">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ResetOdometer(System.String@)">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.IRobot.Odometer"/> was reset successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeToPoint(Mobile.Communication.Common.Location)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="location">The point to localize the <see cref="T:Mobile.Communication.Common.Robot"/> to.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeToPoint(Mobile.Communication.Common.Location,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="location">The point to localize the <see cref="T:Mobile.Communication.Common.Robot"/> to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized to the given point successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeToPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The Heading of the 2D-point.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeToPoint(System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The Heading of the 2D-point.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized to the given point successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeAtGoal(System.String)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> at the specified goal.
            </summary>
            <param name="goal">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.LocalizeAtGoal(System.String,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> at the specified goal.
            </summary>
            <param name="goal">The name of the goal.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToPoint(Mobile.Communication.Common.Location)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="location">The point to the <see cref="T:Mobile.Communication.Common.Robot"/> is sent to.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToPoint(Mobile.Communication.Common.Location,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="location">The point to the <see cref="T:Mobile.Communication.Common.Robot"/> is sent to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to <paramref name="location"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The heading of the robot at the point.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToPoint(System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The heading of the robot at the point.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to a point was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToGoal(System.String)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to the specified goal.
            </summary>
            <param name="goal">The name of the goal to go to.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GoToGoal(System.String,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to the specified goal.
            </summary>
            <param name="goal">The name of the goal to go to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to a <paramref name="goal"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PatrolRoute(System.String,System.Boolean)">
            <summary>
            Sends the robot on a route.
            </summary>
            <param name="route">the name of the route to patrol.</param>
            <param name="forever">Determines whether to patrol <paramref name="route"/> forever (<see langword="true"/>)
            or only once (<see langword="false"/>).</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="route"/>
            is not available on the current map.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing patroling a route.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PatrolRoute(System.String,System.Boolean,System.String@)">
            <summary>
            Sends the robot on a route.
            </summary>
            <param name="route">the name of the route to patrol.</param>
            <param name="forever">Determines whether to patrol <paramref name="route"/> forever (<see langword="true"/>)
            or only once (<see langword="false"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if patroling a <paramref name="route"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ExecuteMacro(System.String)">
            <summary>
            Executes a given macro.
            </summary>
            <param name="macro">The macro to exectue.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ExecuteMacro(System.String,System.String@)">
            <summary>
            Executes a given macro.
            </summary>
            <param name="macro">The macro to exectue.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if executing a <paramref name="macro"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Dock">
            <summary>
            Sends the robot to dock.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Dock(System.String@)">
            <summary>
            Sends the robot to dock.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot has been send to dock successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.UnDock">
            <summary>
            Sends the robot to un-dock.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.UnDock(System.String@)">
            <summary>
            Sends the robot to un-dock.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot has been send to un-dock successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Stop">
            <summary>
            Stops the current activity.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing stopping the <see cref="T:Mobile.Communication.Common.Robot"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Stop(System.String@)">
            <summary>
            Stops the current activity.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if stopping the <see cref="T:Mobile.Communication.Common.Robot"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Stay">
            <summary>
            Makes the robot stay for one additional minute.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Stay(System.String@)">
            <summary>
            Makes the robot stay for one additional minute.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot is staying for one additional minute;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Go">
            <summary>
            Sends the go command to the robot.
            This can either:
            clear faults -or-
            terminate wait tasks (like waitActive or stay).
            PLEASE NOTE THAT - UNLIKE ALL OTHER METHODS - THIS METHOD DOES NOT WAIT FOR A RESPONSE FROM THE ROBOT!!!
            THIS METHOD DIRECTLY RETURNS AFTER SENDING THE COMMAND.
            This is because there are situations where go does not get a return message (e.g. when robot is idle).
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Go(System.String@)">
            <summary>
            Sends the go command to the robot.
            This can either:
            clear faults -or-
            terminate wait tasks (like waitActive or stay).
            PLEASE NOTE THAT - UNLIKE ALL OTHER METHODS - THIS METHOD DOES NOT WAIT FOR A RESPONSE FROM THE ROBOT!!!
            THIS METHOD DIRECTLY RETURNS AFTER SENDING THE COMMAND.
            This is because there are situations where go does not get a return message (e.g. when robot is idle).
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the command has been transmitted successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Say(System.String)">
            <summary>
            Makes the robot say the <paramref name="text"/>.
            </summary>
            <param name="text">The text to say.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Say(System.String,System.String@)">
            <summary>
            Makes the robot say the <paramref name="text"/>.
            </summary>
            <param name="text">The text to say.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if saying <paramref name="text"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.TerminateWaitTask(System.Boolean)">
            <summary>
            Terminates the wait task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the wait task.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.TerminateWaitTask(System.Boolean,System.String@)">
            <summary>
            Terminates the wait task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the wait task.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the wait task is terminated succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.TerminatePauseTask(System.Boolean)">
            <summary>
            Terminates the pause task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the pause task.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.TerminatePauseTask(System.Boolean,System.String@)">
            <summary>
            Terminates the pause task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the pause task.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the pause task is terminated succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SwitchForbidden(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Switches a forbidden line or area in the map on or off.
            </summary>
            <param name="name">The name of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="name"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SwitchForbidden(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch,System.String@)">
            <summary>
            Switches a forbidden line or area in the map on or off.
            </summary>
            <param name="name">The name of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="name"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SwitchForbiddenByPrefix(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Switches a forbidden line or area in the map on or off by using a prefix.
            </summary>
            <param name="prefix">The prefix of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="prefix"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SwitchForbiddenByPrefix(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch,System.String@)">
            <summary>
            Switches a forbidden line or area in the map on or off by using a prefix.
            </summary>
            <param name="prefix">The prefix of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="prefix"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Shutdown">
            <summary>
            Shuts the remote <see cref="T:Mobile.Communication.Common.Robot"/> down.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.Shutdown(System.String@)">
            <summary>
            Shuts the remote <see cref="T:Mobile.Communication.Common.Robot"/> down.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot is shutting down; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateRangeDevices">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/> with names only.
            </summary>
            <returns>The names of the <see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateRangeDevices(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.Inputs"/> with labels only.
            </summary>
            <param name="deviceNames">The names of all <see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDevices">
            <summary>
            Refreshes the <see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/> by populating the dictionary and grabing data of all devices.
            </summary>
            <returns><see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDevices(Mobile.Core.DataStructure.ReadOnlyDictionary{System.String,Mobile.Communication.Common.RangeDevice}@,System.String@)">
            <summary>
            Refreshes the <see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/> by populating the dictionary and grabing data of all devices.
            </summary>
            <param name="rangeDevices"><see cref="P:Mobile.Communication.Common.IRobot.RangeDevices"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDeviceCurrentReadings(System.String)">
            <summary>
            Refreshes the current readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <returns>The current readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDeviceCurrentReadings(System.String,Mobile.Core.DataStructure.ReadOnlyCollection{Mobile.Communication.Common.RangeDevice.Reading}@,System.String@)">
            <summary>
            Refreshes the current readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="readings">The current readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDeviceCumulativeReadings(System.String)">
            <summary>
            Refreshes the cumulative readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <returns>The cumulative readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshRangeDeviceCumulativeReadings(System.String,Mobile.Core.DataStructure.ReadOnlyCollection{Mobile.Communication.Common.RangeDevice.Reading}@,System.String@)">
            <summary>
            Refreshes the cumulative readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="readings">The cumulative readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateInputCollection">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.Inputs"/> with labels only.
            </summary>
            <returns>An array of input labels.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateInputCollection(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.Inputs"/> with labels only.
            </summary>
            <param name="labels">An array of input labels.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshInputCollection">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.InputCollection"/>.
            </summary>
            <returns>The available inputs.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshInputCollection(Mobile.Communication.Common.InputCollection@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.InputCollection"/>.
            </summary>
            <param name="inputs">The available inputs.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateOutputCollection">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.Outputs"/> with labels only.
            </summary>
            <returns>An array of output labels.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.PopulateOutputCollection(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.IRobot.Outputs"/> with labels only.
            </summary>
            <param name="labels">An array of output labels.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshOutputCollection">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.OutputCollection"/>.
            </summary>
            <returns>The available outputs.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshOutputCollection(Mobile.Communication.Common.OutputCollection@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.OutputCollection"/>.
            </summary>
            <param name="outputs">The available outputs.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of outputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GetInputState(System.String)">
            <summary>
            Gets the state of an input.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>The state of the input. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GetInputState(System.String,Mobile.Communication.Common.IO.Switch@,System.String@)">
            <summary>
            Gets the state of an input.
            </summary>
            <param name="name">The name of the input.</param>
            <param name="state">The state of the input. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GetOutputState(System.String)">
            <summary>
            Gets the state of an output.
            </summary>
            <param name="name">The name of the output.</param>
            <returns>The state of the output. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.GetOutputState(System.String,Mobile.Communication.Common.IO.Switch@,System.String@)">
            <summary>
            Gets the state of an output.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="state">The state of the output. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the output was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SetOutput(System.String,Mobile.Communication.Common.IO.Switch)">
            <summary>
            Sets an output.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="state">The state of the output. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.SetOutput(System.String,Mobile.Communication.Common.IO.Switch,System.String@)">
            <summary>
            Sets an output.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="state">The state of the output. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="clearedOnAcknowledgement">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement
            (through MobileEyes/MobilePlanner/LynxTouchscreen).</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="clearedOnAcknowledgement">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement
            (through MobileEyes/MobilePlanner/LynxTouchscreen).</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultClear(System.String)">
            <summary>
            Clears an application fault by its name.
            </summary>
            <param name="name">The name of the application fault.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred clearing the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.ApplicationFaultClear(System.String,System.String@)">
            <summary>
            Clears an application fault by its name.
            </summary>
            <param name="name">The name of the application fault.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been cleared successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshFaults">
            <summary>
            Refreshes the faults of the robot.
            </summary>
            <returns>All faults actually set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred getting the <see cref="T:Mobile.Communication.Common.Fault"/>s.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.IRobot.RefreshFaults(Mobile.Communication.Common.Fault[]@,System.String@)">
            <summary>
            Refreshes the faults of the robot.
            </summary>
            <param name="faults">All faults actually set on the robot.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the all faults have been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.StatusChanged">
            <summary>
            This event is raised if the status of the robot has changed.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.GoalReached">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has arrived at a goal.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.PatrolFinished">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has finished patrolling a route.
            Please note that this event will never be raised if the <see cref="T:Mobile.Communication.Common.Robot"/> is
            patrolling a route forever. As forever implies, it will never finish.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.ActionInterrupted">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has interrupted its current action.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.ActionFailed">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has failed its current action.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.IORestarted">
            <summary>
            An event raised once the IO have been restarted.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.IORestarting">
            <summary>
            An event raised once the IO begin restarting.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.IRobot.StatusOnEmChanged">
            <summary>
            An event raised when the status of the robot on the EM changed.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Routes">
            <summary>
            Gets a read-only collection of routes.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshRoutes"/>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshRoutes(System.String[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Macros">
            <summary>
            Gets a read-only collection of macros.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshMacros"/>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshMacros(System.String[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.SwitchableForbiddens">
            <summary>
            Gets a read-only collection of switchable forbidden lines and areas.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshSwitchableForbiddens"/>
            <seealso cref="M:Mobile.Communication.Common.IRobot.RefreshSwitchableForbiddens(Mobile.Communication.Common.SwitchableForbidden[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Status">
            <summary>
            Gets some status information about the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.MotorStatus">
            <summary>
            Gets the status of the motors.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.StatusOnEnterprisemanager">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Odometer">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Inputs">
            <summary>
            Gets all available inputs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Outputs">
            <summary>
            Gets all available outputs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.QueuingManager">
            <summary>
            Gets the QueuingManager to queue and manipulate jobs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.Faults">
            <summary>
            Gets a read-only collection of faults.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.EstimatedArrival">
            <summary>
            Gets an estimate of when the robot will arrive at the goal.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.IRobot.RangeDevices">
            <summary>
            Gets the read-only dictionary of range devices. The key is the name of the device.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Location">
            <summary>
            Mobile Robot Location (x, y, and orientation)
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Location.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Overloaded Constructor.
            </summary>
            <param name="x">X-Coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="orientation">Angle of the pose; Orientation.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Location.X">
            <summary>
            The X location of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Location.Y">
            <summary>
            The Y location of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Location.Orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Location.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.Equals(System.Object)">
            <summary>
            Overridden method.
            Checks for equality of this <see cref="T:Mobile.Communication.Common.Location"/>
            with a different <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check equality with.</param>
            <returns>True if <paramref name="obj"/> is of type <see cref="T:Mobile.Communication.Common.Location"/>
            and corresponding values of both objects are the same; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.Equals(Mobile.Communication.Common.Location)">
            <summary>
            Checks for equality of this <see cref="T:Mobile.Communication.Common.Location"/>
            with a different <see cref="T:Mobile.Communication.Common.Location"/>.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.Location"/> to check equality with.</param>
            <returns>True if corresponding values are the same; otherwise false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.ToString">
            <summary>
            The <see cref="T:System.String"/> representation of the <see cref="T:Mobile.Communication.Common.Location"/>.
            Returns "[X] [Y] [THETA]".
            </summary>
            <returns>"[X] [Y] [THETA]".</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.ToString(System.String)">
            <summary>
            Returns the formatted <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.Location"/>.
            Replaces "[x]", "[y]" and "[theta]" or "[th]" (case insensitive) in <paramref name="format"/> with their correspoding values.
            E.g. x=500 y=1000 orientation=90 and <paramref name="format"/> "[x], [y], [th]°", returns "500, 1000, 90°".
            </summary>
            <param name="format">A <see cref="T:System.String"/> formatting the return value. Keys "[x]", "[y]" and "[theta]" or "[th]"
            will be replaced with their corresponding values.</param>
            <returns>The formatted <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.Location"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.op_Equality(Mobile.Communication.Common.Location,System.Object)">
            <summary>
            Checks if one <see cref="T:Mobile.Communication.Common.Location"/> equals another object.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.Location"/> to check equality for.</param>
            <param name="second">The <see cref="T:System.Object"/> to compare with.</param>
            <returns>True if <paramref name="second"/> is of type <see cref="T:Mobile.Communication.Common.Location"/>
            and corresponding values of both objects are the same; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.op_Inequality(Mobile.Communication.Common.Location,System.Object)">
            <summary>
            Checks if one <see cref="T:Mobile.Communication.Common.Location"/> differs from another object.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.Location"/> to check inequality for.</param>
            <param name="second">The <see cref="T:System.Object"/> to compare with.</param>
            <returns>True if <paramref name="second"/> is not of type <see cref="T:Mobile.Communication.Common.Location"/>
            or corresponding values of both objects differ from each other; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Location.Parse(System.String)">
            <summary>
            Parses a location distributed over ARCL ('Location: X Y Orientation')
            </summary>
            <param name="locationString">The Location string.</param>
            <returns>The robot's location.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Argument">
            <summary>
            A class representing an argument of a map object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Argument.Importance">
            <summary>
            An enumeration representing the importance of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Argument.Importance.Normal">
            <summary>
            Normal importance.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Argument.Importance.Important">
            <summary>
            More important.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Argument.Importance.Detailed">
            <summary>
            Used for detailed operation.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Argument.#ctor(System.String,System.String,System.Type,Mobile.Communication.Common.Map.Argument.Importance)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.</param>
            <param name="description">The description of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.</param>
            <param name="type">The <see cref="P:Mobile.Communication.Common.Map.Argument.Type"/> of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.</param>
            <param name="importance">The <see cref="T:Mobile.Communication.Common.Map.Argument.Importance"/> of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Argument.Name">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Argument.Description">
            <summary>
            Gets the description of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Argument.Type">
            <summary>
            Gets the <see cref="P:Mobile.Communication.Common.Map.Argument.Type"/> of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Argument.Level">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Argument.Importance"/> of the <see cref="T:Mobile.Communication.Common.Map.Argument"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ErrorMessages.NoMapObjectFoundByName">
            <summary>
              Looks up a localized string similar to No Map Object associated with name &apos;{0}&apos; found in Map..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ErrorMessages.ToRefreshCollection">
            <summary>
              Looks up a localized string similar to to refresh collection..
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Map">
            <summary>
            A class representing a map.
            The map contains user items only.
            It is a collection of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Map.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Map"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Map.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Map"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.MapObject"/> associated with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> associated with the specified <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Map.TryGetObject``1(System.String,``0@)">
            <summary>
            Gets a <typeparamref name="BaseType"/> object with the specified <paramref name="name"/>.
            </summary>
            <typeparam name="BaseType">The base type to look for.
            All types deriving from <typeparamref name="BaseType"/> and <typeparamref name="BaseType"/> itself will be included into the search.
            If this is <see cref="T:Mobile.Communication.Common.Map.MapObject"/> all items will be included.</typeparam>
            <param name="name">The name of the object to look for.</param>
            <param name="mapObject">If this returns <see langword="true"/> contains the <see cref="T:Mobile.Communication.Common.Map.MapObject"/> with the specified <paramref name="name"/>
            or <see langword="null"/> if this returns <see langword="false"/>.</param>
            <returns><see langword="true"/> if a <see cref="T:Mobile.Communication.Common.Map.MapObject"/> with the specified <paramref name="name"/> was located; otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Map.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Map"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.Goals">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>s in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.StandbyGoals">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>s in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.ManagedDestinations">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>s in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.ManagedMotions">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>s in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Map.ManagedMotionOverrides">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>s in the map.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.MapObject">
            <summary>
            This class represents an object in the map.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.MapObject._serialization_version">
            <summary>
            The string value to deserialize the version of the serialized <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.MapObject._version_1_0_0_0">
            <summary>
            Version 1.0.0.0 (for serialization).
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.MapObject"/> specifying the name of the object.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.MapObject"/> specifying the name and description of the object.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.GetTypeDescription">
            <summary>
            Gets the description of the derived class.
            </summary>
            <returns>The description of the derived class.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.GetArguments">
            <summary>
            Gets the arguments of the derived class.
            </summary>
            <returns>The arguments of the derived class.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.MapObject"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.MapObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.MapObject.Name">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.MapObject.Description">
            <summary>
            Gets the description of the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.MapObject.TypeDescription">
            <summary>
            Gets the description of the type (derived class) of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.MapObject.Arguments">
            <summary>
            Gets the arguments of the type (derived class) of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.LocationMapObject">
            <summary>
            A class representing a map object that contains a location where it is placed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.LocationMapObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.LocationMapObject"/>
            providing the name obejct.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.LocationMapObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.LocationMapObject"/>
            providing the name and the description of the object.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.LocationMapObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.LocationMapObject"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.LocationMapObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.LocationMapObject"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.LocationMapObject.Location">
            <summary>
            Gets the location of the object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common.Map"/> namespace contains objects that are related to the map that is being used.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.ObjectCollection`1">
            <summary>
            A class representing a collection of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s stored in this collection.</typeparam>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
            <param name="mapObjects">The <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s of type <typeparamref name="T"/>
            to initialize this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> with.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ObjectCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of type <typeparamref name="T"/> associated with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> having the specified <paramref name="name"/> in this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="name"/> does not exist in this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.TryGetObject(System.String,`0@)">
            <summary>
            Attempts to get the <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of type <typeparamref name="T"/> associated with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.</param>
            <param name="mapObject">The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> having the specified <paramref name="name"/> in this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="name"/> was found in the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.Populate">
            <summary>
            Populates this collection with <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s of the specified type.
            The returned <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s contain a name only.
            The other information need to be updated separately.
            </summary>
            <returns>A new array containing the elements copied from this collection after it has been refreshed.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.SetCallback(System.Func{`0[]})">
            <summary>
            Sets a callback to refresh this collection.
            </summary>
            <param name="populate">The callback to populate this collection.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.ToArray">
            <summary>
            Copies the element of the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> to a new array.
            </summary>
            <returns>A new array containing a snapshot of the elements copied from this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.AddOrUpdate(`0,System.Func{`0,`0})">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Map.MapObject"/> to the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> if no other <see cref="T:Mobile.Communication.Common.Map.MapObject"/> with the same name exists,
             -or- updates a <see cref="T:Mobile.Communication.Common.Map.MapObject"/> in the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>
            by using the specified function if another <see cref="T:Mobile.Communication.Common.Map.MapObject"/> with the same name already exists.
            </summary>
            <param name="mapObject">The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of type <typeparamref name="T"/> to add.</param>
            <param name="updateFactory">The function used to generate a new <see cref="T:Mobile.Communication.Common.Map.MapObject"/> for an existing name based on the existing <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapObject"/> or <paramref name="updateFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.GetOrAdd(`0)">
            <summary>
            Gets or adds a <see cref="T:Mobile.Communication.Common.Map.MapObject"/>.
            </summary>
            <param name="mapObject">The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of type <typeparamref name="T"/> to add.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of type <typeparamref name="T"/> that has already been part
            of the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> or <paramref name="mapObject"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapObject"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.Clear">
            <summary>
            Clears the elements of this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> contains a <see cref="T:Mobile.Communication.Common.Map.MapObject"/> of the same name as <paramref name="item"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Map.MapObject"/> to locate in the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> by name.</param>
            <returns><see langword="true"/> if this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> contains a <see cref="T:Mobile.Communication.Common.Map.MapObject"/> named like <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> or its name is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/> to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.ObjectCollection`1.Count">
            <summary>
            Gets the number of <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s in this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Map.MapObject"/>s of this <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.ObjectCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.ObjectCollection`1"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.Goal">
            <summary>
            A class representing a goal in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.Goal.GoalDescription">
            <summary>
            The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.
            </summary>
            <returns>The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.Goal.GoalArguments">
            <summary>
            The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.
            </summary>
            <returns>The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>
            providing the name of the goal.
            </summary>
            <param name="name">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>
            providing the name and the description of the goal.
            </summary>
            <param name="name">The name of the goal.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.GetTypeDescription">
            <summary>
            Gets the description of <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.
            </summary>
            <returns>The description of the goal map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.GetArguments">
            <summary>
            Gets the arguments of <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.
            </summary>
            <returns>The arguments of the goal map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.Goal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Objects.Goal"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.ManagedDestination">
            <summary>
            A class representing a managed destination in the map.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedDestination.ManagedDestinationDescription">
            <summary>
            The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.
            </summary>
            <returns>The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedDestination.ManagedDestinationArguments">
            <summary>
            The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.
            </summary>
            <returns>The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>
            providing its name.
            </summary>
            <param name="name">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>
            providing its name and description.
            </summary>
            <param name="name">The name of the goal.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.GetTypeDescription">
            <summary>
            Gets the description of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.
            </summary>
            <returns>The description of the managed destination map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.GetArguments">
            <summary>
            Gets the arguments of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.
            </summary>
            <returns>The arguments of the managed destination map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedDestination.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedDestination.AlwaysBuffer">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/> sector will always buffer.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedDestination.InhibitThroughTraffic">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/> sector will inhibit drive through traffic.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedDestination.ReservedBuffer">
            <summary>
            Gets the name of the <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> that is exclusively used by this <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/> sector.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.ManagedMotion">
            <summary>
            A class representing a managed motion sector in the map.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.ManagedMotion.DriveStyle">
            <summary>
            An enumeration of the autonomous drive stlye in the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/> sector.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.ManagedMotion.DriveStyle.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.ManagedMotion.DriveStyle.Sequential">
            <summary>
            Sequential (one after another).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotion.ManagedMotionDescription">
            <summary>
            The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
            <returns>The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotion.ManagedMotionArguments">
            <summary>
            The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
            <returns>The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>
            providing its name.
            </summary>
            <param name="name">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>
            providing its name and description.
            </summary>
            <param name="name">The name of the goal.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.GetTypeDescription">
            <summary>
            Gets the description of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
            <returns>The description of the managed motion map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.GetArguments">
            <summary>
            Gets the arguments of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
            <returns>The arguments of the managed motion map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotion.AutonomousDriveStyle">
            <summary>
            Gets the autonomous drive style of the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotion.ReservedBuffer">
            <summary>
            Gets a read-only collection of names of standby goals that
            are reserved for this <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride">
            <summary>
            A class representing a managed motion override sector in the map.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.DriveStyle">
            <summary>
            An enumeration of the autonomous drive stlye in the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/> sector.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.DriveStyle.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.DriveStyle.InMotion">
            <summary>
            Treat robot as in motion.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.ManagedMotionOverrideDescription">
            <summary>
            The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.
            </summary>
            <returns>The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.ManagedMotionOverrideArguments">
            <summary>
            The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.
            </summary>
            <returns>The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>
            providing its name.
            </summary>
            <param name="name">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>
            providing its name and description.
            </summary>
            <param name="name">The name of the goal.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedDestination"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.GetTypeDescription">
            <summary>
            Gets the description of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.
            </summary>
            <returns>The description of the managed motion override map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.GetArguments">
            <summary>
            Gets the arguments of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.
            </summary>
            <returns>The arguments of the managed motion override map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride.AutonomousDriveStyle">
            <summary>
            Gets the autonomous drive style the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotionOverride"/> will set
            for the <see cref="T:Mobile.Communication.Common.Map.Objects.ManagedMotion"/> it is overriding.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common.Map.Objects"/> namespace contains objects that are part of the map that is being used
            such as goals and advanced areas.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.StandbyGoal">
            <summary>
            A class representing a standby goal.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Map.Objects.StandbyGoal.Purpose">
            <summary>
            An enumeration of the purpose of the <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.StandbyGoal.Purpose.Unknown">
            <summary>
            Unknown purpose.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.StandbyGoal.Purpose.Buffering">
            <summary>
            Purpose is to use <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> for buffering robots.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.StandbyGoal.Purpose.Parking">
            <summary>
            Purpose is to park robots.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Map.Objects.StandbyGoal.Purpose.PreferredParking">
            <summary>
            Purpose is to park robots but to choose the <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> before others.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.StandbyGoal.StandbyGoalDescription">
            <summary>
            The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
            <returns>The description of type <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.StandbyGoal.StandbyGoalArguments">
            <summary>
            The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
            <returns>The arguments of type <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>
            providing the name of the standby goal.
            </summary>
            <param name="name">The name of the standby goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>
            providing the name and the description of the standby goal.
            </summary>
            <param name="name">The name of the standby goal.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.GetTypeDescription">
            <summary>
            Gets the description of <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
            <returns>The description of the standby goal map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.GetArguments">
            <summary>
            Gets the arguments of <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
            <returns>The arguments of the standby goal map object.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.ParseArguments(System.String)">
            <summary>
            Updates the data of this instance of <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> by parsing <paramref name="values"/>.
            </summary>
            <param name="values">The string values to parse.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Map.Objects.StandbyGoal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.StandbyGoal.PrimaryPurpose">
            <summary>
            Gets the primary purpose this <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> is used for.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Map.Objects.StandbyGoal.AllowMultipleRobots">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Map.Objects.StandbyGoal"/> can handle multiple robots.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.MobileException">
            <summary>
            An Exception containing a code of the error occurred.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.#ctor(System.Enum)">
            <summary>
            The Constructor setting the <see cref="P:Mobile.Communication.Common.MobileException.ErrorCode"/>.
            </summary>
            <param name="code">The code of the error.</param>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.#ctor(System.Enum,System.String)">
            <summary>
            The Constructor setting <see cref="P:Mobile.Communication.Common.MobileException.ErrorCode"/> and a message.
            </summary>
            <param name="code">The code of the error.</param>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.#ctor(System.Enum,System.Exception)">
            <summary>
            The Constructor setting <see cref="P:Mobile.Communication.Common.MobileException.ErrorCode"/> and an inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="code">The code of the error.</param>
            <param name="inner">The <see cref="T:System.Exception"/> to set as an inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.#ctor(System.Enum,System.String,System.Exception)">
            <summary>
            The Constructor setting <see cref="P:Mobile.Communication.Common.MobileException.ErrorCode"/>, a message and an inner <see cref="T:System.Exception"/>.
            </summary>
            <param name="code">The code of the error.</param>
            <param name="message">The message describing the error.</param>
            <param name="inner">The <see cref="T:System.Exception"/> to set as an inner <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The Constructor used to deserialize the <see cref="T:Mobile.Communication.Common.MobileException"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Common.MobileException"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.MobileException"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with one of the following names:
            "IP-Address", "Port", "Dock-Prefix", "Crypted Password?", "Password" or "Version".</exception>
        </member>
        <member name="M:Mobile.Communication.Common.MobileException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.MobileException.ErrorCode">
            <summary>
            The code to identify the error.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common"/> namespace contains objects that are shared between client and server objects.
            All objects where the direction of communication don't matter are in here.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Odometer">
            <summary>
            A struct containing information about a <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.#ctor(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Odometer"/>.
            </summary>
            <param name="trans">The translational distance in mm.</param>
            <param name="rot">The rotational distance in deg.</param>
            <param name="time">The time needed to travel those distances.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Odometer.Translation">
            <summary>
            Gets the translational distance [mm].
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Odometer.Rotation">
            <summary>
            Gets the rotational distance [deg].
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Odometer.Time">
            <summary>
            Gets the time elapsed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.ToString">
            <summary>
            Returns the string representation of the <see cref="T:Mobile.Communication.Common.Odometer"/>.
            "[TRANSLATION] mm, [ROTATION] deg, [TIME] sec".
            </summary>
            <returns>"[TRANSLATION] mm, [ROTATION] deg, [TIME] sec".</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.GetHashCode">
            <summary>
            Gets the hash-code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> and this instance are
            the same type and represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.Equals(Mobile.Communication.Common.Odometer)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:Mobile.Communication.Common.Odometer"/> are equal.
            </summary>
            <param name="odometer">The other <see cref="T:Mobile.Communication.Common.Odometer"/> to compare to.</param>
            <returns><see langword="true"/> if <paramref name="odometer"/> and this instance represent the same value;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.op_Equality(Mobile.Communication.Common.Odometer,Mobile.Communication.Common.Odometer)">
            <summary>
            Indicates whether two instances of <see cref="T:Mobile.Communication.Common.Odometer"/> are equal.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns><see langword="true"/> if both instances represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Odometer.op_Inequality(Mobile.Communication.Common.Odometer,Mobile.Communication.Common.Odometer)">
            <summary>
            Indicates whether two instances of <see cref="T:Mobile.Communication.Common.Odometer"/> are unequal.
            </summary>
            <param name="first">The first instance.</param>
            <param name="second">The second instance.</param>
            <returns><see langword="true"/> if both instances don't represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobComparer">
            <summary>
            A class to compare <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobComparer.ByJobId">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.Queuing.JobComparer"/> object that compares <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by their id.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobComparer.ByFinished">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.Queuing.JobComparer"/> object that compares <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by the timestamp they've been finished.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.Compare(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Compares 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns>ValueMeaning:
            Less than zero => <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            Zero => <paramref name="x"/> is equal to <paramref name="y"/>.
            Greater than zero => <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.Equals(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Checks 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects for equality.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are the same; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.GetHashCode(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Gets the hash code specified by the comparer of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/> parameter.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobComparer.JobidComparer">
            <summary>
            A class to compare <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by their id.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobidComparer.Compare(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Compares 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by their id.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns>ValueMeaning:
            Less than zero => <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            Zero => <paramref name="x"/> is equal to <paramref name="y"/>.
            Greater than zero => <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobidComparer.Equals(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Checks 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects for equality of their ids.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> have the same ids; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobidComparer.GetHashCode(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Gets the hash code of the id of the specified <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object.
            </summary>
            <param name="obj">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/> parameter.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobComparer.JobTerminationComparer">
            <summary>
            A class to compare <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by the date they've timestamp finished.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobTerminationComparer.Compare(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Compares 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by the date they've timestamp finished.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns>ValueMeaning:
            Less than zero => <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            Zero => <paramref name="x"/> is equal to <paramref name="y"/>.
            Greater than zero => <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobTerminationComparer.Equals(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Checks 2 <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects for equality by the timestamp they've been finished.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> finished at the same time; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobComparer.JobTerminationComparer.GetHashCode(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Gets the hash code of the date and time <paramref name="obj"/> has been finished.
            </summary>
            <param name="obj">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/> parameter.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentComparer">
            <summary>
            A class to compare <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.SegmentComparer.ById">
            <summary>
            Gets a <see cref="T:Mobile.Communication.Common.Queuing.SegmentComparer"/> object that compares <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s by their id.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.Compare(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Compares 2 <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.
            </summary>
            <param name="x">The 1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="y">The 2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <returns>ValueMeaning:
            Less than zero => <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            Zero => <paramref name="x"/> is equal to <paramref name="y"/>.
            Greater than zero => <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.Equals(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Checks 2 <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s for equality.
            </summary>
            <param name="x">The 1st object.</param>
            <param name="y">The 2nd object.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are the same; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.GetHashCode(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Gets the hash code specified by the comparer of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/> parameter.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentComparer.SegmentidComparer">
            <summary>
            A class to compare <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s by their id.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.SegmentidComparer.Compare(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Compares 2 <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s by their id.
            </summary>
            <param name="x">The 1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="y">The 2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <returns>ValueMeaning:
            Less than zero => <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            Zero => <paramref name="x"/> is equal to <paramref name="y"/>.
            Greater than zero => <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.SegmentidComparer.Equals(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Checks 2 <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s for equality of their ids.
            </summary>
            <param name="x">The 1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="y">The 2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> have the same ids; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentComparer.SegmentidComparer.GetHashCode(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Gets the hash code of the id of the specified <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> object.
            </summary>
            <param name="obj">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/> parameter.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.DropoffJob">
            <summary>
            A class representing a Dropoff-only job.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.DropoffJob.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.DropoffJob"/> class.
            </summary>
            <param name="dropoffGoal">The goal to head for.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.DropoffJob.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.DropoffJob"/> class.
            </summary>
            <param name="dropoffGoal">The goal to head for.</param>
            <param name="priority">The priority of the dropoff job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.DropoffJob.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.DropoffJob"/> class.
            </summary>
            <param name="dropoffGoal">The goal to head for.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.DropoffJob.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.DropoffJob"/> class.
            </summary>
            <param name="dropoffGoal">The goal to head for.</param>
            <param name="priority">The priority of the dropoff job.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.DropoffJob.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.DropoffJob"/> class.
            </summary>
            <param name="dropoffGoal">The goal to head for.</param>
            <param name="priority">The priority of the dropoff job.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.DropoffJob.Dropoff">
            <summary>
            Gets the dropoff.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentStatus">
            <summary>
            An enumeration to determine in which state a job is.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Unknown">
            <summary>
            SegmentStatus is not known, something failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Pending">
            <summary>
            The job queued and waiting to be executed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.InProgress">
            <summary>
            The job is currently being executed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Completed">
            <summary>
            The job has already been executed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Interrupted">
            <summary>
            The job has been interrupted.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Cancelling">
            <summary>
            The job is going to be cancelled.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Cancelled">
            <summary>
            The job has been cancelled.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Failed">
            <summary>
            The job has failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.Docked">
            <summary>
            The robot is docked.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.BeforeModify">
            <summary>
            The job is about to be modified.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.InterruptedByModify">
            <summary>
            The job is interrupted due to modification.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentStatus.AfterModify">
            <summary>
            The job has been modified.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentSubStatus">
            <summary>
            The substatus for each job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Unknown">
            <summary>
            Unknown substate.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.None">
            <summary>
            No substatus for this status.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.UnAllocated">
            <summary>
            Route to target not yet planned.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Allocated">
            <summary>
            Route is planned.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Driving">
            <summary>
            Driving to goal.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.BeforeEvery">
            <summary>
            Before doing anything.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.BeforePickup">
            <summary>
            Before starting to go to pickup position.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.BeforeDropoff">
            <summary>
            Before starting to go to dropoff position.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Before">
            <summary>
            Executing Before task. (Before driving to a goal).
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.After">
            <summary>
            Executing After task. (After arriving at a goal.)
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.AfterEvery">
            <summary>
            After doing anything.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.AfterPickup">
            <summary>
            After pickup position is reached.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.AfterDropoff">
            <summary>
            After dropoff position is reached.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Buffering">
            <summary>
            When buffering.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Buffered">
            <summary>
            When buffered.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Parking">
            <summary>
            When parking.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Parked">
            <summary>
            When parked.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.DockParking">
            <summary>
            When dock parking.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.DockParked">
            <summary>
            When dock parked.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.ID_">
            <summary>
            The substatus contains link information.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.AssignedRobotOffLine">
            <summary>
            The assigned robot is currently not connected to the enterprisemanager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.NoMatchingRobotForLinkedJob">
            <summary>
            No robot matches all tasks needed to complete all segments in this linked job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.NoMatchingRobotForOtherSegment">
            <summary>
            No robot matches all tasks needed to complete all segments.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.NoMatchingRobot">
            <summary>
            No matching robot.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Interrupted">
            <summary>
            The segment is interrupted.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentSubStatus.Custom">
            <summary>
            A custom status is applied (like cancelled with providing a reason).
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobType">
            <summary>
            Defines the type of job to do for a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobType.Pickup">
            <summary>
            The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobType.Dropoff">
            <summary>
            The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a dropoff job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.CancelType">
            <summary>
            Valid types to cancel jobs from on an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.CancelType.ID">
            <summary>
            Cancel by id.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.CancelType.JobID">
            <summary>
            Cancel by jobid.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.CancelType.RobotName">
            <summary>
            Cancel by robotname.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.CancelType.Status">
            <summary>
            Cancel by status.
            Valid values are
            <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Pending"/>,
            <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.InProgress"/> and
            <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Interrupted"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.ModifcationType">
            <summary>
            Possibilities to modify an already queued <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.ModifcationType.Goal">
            <summary>
            Modify the goal of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.ModifcationType.Priority">
            <summary>
            Modify the priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.AlreadySet">
            <summary>
              Looks up a localized string similar to {0} already set..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.CannotCancelJobStatus">
            <summary>
              Looks up a localized string similar to Cannot cancel job of status: [{0}]..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.CannotDefineJobType">
            <summary>
              Looks up a localized string similar to Cannot define whether pickup or dropoff..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.CannotModifyEmptySegment">
            <summary>
              Looks up a localized string similar to Cannot modify Empty segment..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.FirstSegmentNotPickup">
            <summary>
              Looks up a localized string similar to First Segment needs to be a Pickup..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobAlreadyFinished">
            <summary>
              Looks up a localized string similar to The job is already finished..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobAlreadySwapped">
            <summary>
              Looks up a localized string similar to Job is already swapped with {0} instead of {1}..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobGoalNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The given goal is null, empty or consists of white-space characters only..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobIdContainsWhiteSpace">
            <summary>
              Looks up a localized string similar to The id of a job must not contain white-space characters..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobInvalidSwapStyle">
            <summary>
              Looks up a localized string similar to SwapStyle needs to be other than &apos;None&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.JobPriorityDefault">
            <summary>
              Looks up a localized string similar to Priority is currently set as &apos;default&apos;. This priority will be set by the Enterprise Manager when executing..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.NoDropoffJob">
            <summary>
              Looks up a localized string similar to This is no DropoffJob..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.PodSwappingGoalsNotMatching">
            <summary>
              Looks up a localized string similar to Goals don&apos;t match for Pod-Swapping..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.SecondSegmentNotDropoff">
            <summary>
              Looks up a localized string similar to Second Segment needs to be a Dropoff..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.SegmentAlreadyFinished">
            <summary>
              Looks up a localized string similar to The segment is already finished..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.SegmentUndefinedType">
            <summary>
              Looks up a localized string similar to Segment is neither pickup nor dropoff..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.ToCancelJob">
            <summary>
              Looks up a localized string similar to to cancel a job..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.ToCancelMultiSegment">
            <summary>
              Looks up a localized string similar to to cancel a segment of a multi job..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.ToModifyJob">
            <summary>
              Looks up a localized string similar to to modify a job..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.ToQueueJob">
            <summary>
              Looks up a localized string similar to to queue a job..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.UnableToExtractXfromY">
            <summary>
              Looks up a localized string similar to Unable to extract {0} from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.UnableToParseBecauseKeyDoesntMatch">
            <summary>
              Looks up a localized string similar to Unable to parse &apos;{0}&apos; because key &apos;{1}&apos; does not match any of the following keys: &apos;{2}&apos;, &apos;{3}&apos; or &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.UnableToParseBecauseOfKvp">
            <summary>
              Looks up a localized string similar to Unable to parse &apos;{0}&apos; because key-value-pair {1} does not consist of 2 arguments..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.UnableToParseXfromY">
            <summary>
              Looks up a localized string similar to Unable to parse {0} from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.ErrorMessages.UnfinishedJobAlreadyPresent">
            <summary>
              Looks up a localized string similar to Unfinished job with same jobid is already part of the collection..
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.ExtensionMethods">
            <summary>
            A static class containing all extension methods.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.ExtensionMethods.ToCancelString(Mobile.Communication.Common.Queuing.CancelType)">
            <summary>
            Returns the string representation of the <see cref="T:Mobile.Communication.Common.Queuing.CancelType"/>.
            </summary>
            <param name="source">The source.</param>
            <returns>The string representation of the <see cref="T:Mobile.Communication.Common.Queuing.CancelType"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.ExtensionMethods.ToModificationString(Mobile.Communication.Common.Queuing.ModifcationType)">
            <summary>
            Returns the string representation of the <see cref="T:Mobile.Communication.Common.Queuing.ModifcationType"/>.
            </summary>
            <param name="source">The source.</param>
            <returns>The string representation of the <see cref="T:Mobile.Communication.Common.Queuing.ModifcationType"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobCollection">
            <summary>
            A class representing a collection of jobs.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobCollection.Log">
            <summary>
            Determines whether to add messages to the log.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.#ctor(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.JobData})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="jobs">The jobs to add to the storage.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called after deserialization.
            Initializes the sync object if not done while deserializing.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.ComputeHash(System.String)">
            <summary>
            Computes the hash value for <paramref name="jobid"/> inside this collection.
            </summary>
            <param name="jobid">The jobid to get the hash for.</param>
            <returns>The hash value for <paramref name="jobid"/> inside this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Reset(System.Int32)">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="size">The number of elements to be able to store.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Expand">
            <summary>
            Expands the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            Able to store twice as many elements as before.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.GetIndicesById(System.String)">
            <summary>
            Gets the indices of <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects by <paramref name="id"/>.
            </summary>
            <param name="id">The id to search for.</param>
            <returns>The index of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.UnsafeAdd(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Adds <paramref name="job"/> to the collection
            w/out performing any checks.
            </summary>
            <param name="job">The job to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.UnsafeRemove(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Removes <paramref name="job"/> from the collection
            w/out performing any checks.
            </summary>
            <param name="job">The job to remove.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> that has been removed or <see langword="null"/> if no matching <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> is part of this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Add(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Adds the given job to this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/> if possible.
            Possible means either no job having the same jobid is part of this collection or those are already done.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object to add to this collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if there is an unfinished job having the same jobid as <paramref name="job"/>
            that is already part of this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.AddRange(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.JobData})">
            <summary>
            Adds a range of segments to the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="jobs">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>s to add to this collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobs"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Remove(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Removes the given job from this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object to remove from this collection.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object that has been removed from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="job"/> is not part of the collection.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Replace(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Replaces <paramref name="job"/> by <paramref name="replacement"/>.
            </summary>
            <param name="job">The job to replace.</param>
            <param name="replacement">The replacement for <paramref name="job"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> or
            <paramref name="replacement"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="job"/> is not part of the collection.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.ContainsID(System.String)">
            <summary>
            Determines whether a job with the given id is part of this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="id">The id to search for.</param>
            <returns><see langword="true"/> if a job having the specified id is part of this collection; otherwise; <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.ToArray">
            <summary>
            Gets all <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects stored in this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <returns>All <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> objects stored in this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.ToArray(System.String)">
            <summary>
            Gets an array of jobs having the spcified id.
            Returns all jobs if <paramref name="id"/> is <see langword="null"/>.
            </summary>
            <param name="id">The id to look for -or- <see langword="null"/> to return all jobs.</param>
            <returns>An array of jobs stored with the specified id.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,Mobile.Communication.Common.Queuing.JobData,System.Int32)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/>.
            Use this when removing or adding an element from/to the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="item">The item involved in the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.</param>
            <param name="index">The where the change occurred.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.OnCollectionChanged(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/>.
            Use this when replacing an element in the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="newItem">The new <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> that is replacing the old <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</param>
            <param name="oldItem">The old <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> that is replaced.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.Queuing.JobCollection.CollectionChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.SetCallback(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Sets the callback to add information to the log file.
            Applies this change to all jobs in the collection as well.
            </summary>
            <param name="callback">The method to call to add info to the log file.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Clear">
            <summary>
            Clears all elements from the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.Contains(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Determines whether a job is part of this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object to search for.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> spcified by <paramref name="item"/> is part of this collection;
            otherwise; <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.CopyTo(Mobile.Communication.Common.Queuing.JobData[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/> to an array, starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobCollection.Count">
            <summary>
            Gets the number of jobs stored in this <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobDataEventHandler">
            <summary>
            Represents a method that will handle an event fired by a <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobDataEventHandler`1">
            <summary>
            Represents a method that will handle an event fired by a <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobData">
            <summary>
            A Class representing a job on an Enterprise Manager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData.Empty">
            <summary>
            Represents a Job with no data.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData.Log">
            <summary>
            Determines whether to add messages to the log.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData.segments">
            <summary>
            The segments executed by this job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData.id">
            <summary>
            The job's id.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData.robotName">
            <summary>
            The name of the robot executing this job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobData._sync">
            <summary>
            Object to sync access to properties.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.#ctor">
            <summary>
            Default Constructor. Creates an <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/> job.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.#ctor(Mobile.Communication.Common.Queuing.JobSegments,System.String)">
            <summary>
            Initailizes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> class with several segments.
            </summary>
            <param name="segments">The segments the job will contain.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="segments"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="segments"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.#ctor(Mobile.Communication.Common.Queuing.JobSegments)">
            <summary>
            Initailizes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> class with several segments.
            </summary>
            <param name="segments">The segments the job will contain.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="segments"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="segments"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.AddSegments(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.Segment})">
            <summary>
            Add <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s to this job.
            </summary>
            <param name="collection">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.ToString">
            <summary>
            Returns the id of the job as a <see cref="T:System.String"/>.
            </summary>
            <returns>The id of the whole job.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.GetHashCode">
            <summary>
            Serves a hash function for <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check equality with.</param>
            <returns>true if objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.Equals(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Checks if the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> is equal to another <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to check equality with.</param>
            <returns>true if two <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>s have the same <see cref="P:Mobile.Communication.Common.Queuing.JobData.ID"/>s and EnterpriseManager.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            Removes the event listeners for queued and finished property changing
            </summary>
            <param name="disposing"><see langword="true"/> if <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> is disposing; <see langword="false"/> if garbage collected.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.IsNullOrEmpty(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Checks if the specified <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.
            </summary>
            <param name="jobData">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="jobData"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged">
            <summary>
            Raised if the one of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>'s properties is changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.OnPropertyChanged(Mobile.Communication.Common.Event.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/> event directly.
            </summary>
            <param name="argument">The argument to add to the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/> event.
            </summary>
            <param name="name">The name of the property. This is obtained automatically
            by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> by default.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/> event directly if <paramref name="propertyChangedCallback"/> is <see langword="null"/>.
            </summary>
            <param name="propertyChangedCallback">The callback to invoke <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.Queuing.JobData.PropertyChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.SetCallback(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Sets the callback to add information to the log file.
            </summary>
            <param name="callback">The method to call to add info to the log file.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobData.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the segments of this instance of <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            </summary>
            <returns>An enumerator that iterates through the segments of this instance of <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> at the specified position.
            </summary>
            <param name="index">The index of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> inside the collection.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.ID">
            <summary>
            Gets the job's id.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.Queued">
            <summary>
            Gets the time the job was queued on the Enterprise Manager.
            Returns <see langword="null"/> if the job is not yet queued.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.Finished">
            <summary>
            The time the job has been finished.
            Returns <see langword="null"/> if the job is not yet finished.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.RobotName">
            <summary>
            Gets the name of the robot.
            </summary>
            <value>
            The name of the robot.
            </value>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobData.Segments">
            <summary>
            Gets all segments executed by this job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.JobSegments">
            <summary>
            A class containing a collection of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s combined by one <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobSegments.Empty">
            <summary>
            A <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> of zero size.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.JobSegments.elements">
            <summary>
            The elements of the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.#ctor(System.Int32)">
            <summary>
            Initializes a new (default) instance of <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> class.
            </summary>
            <param name="size">The size of the collection</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.LinkSegments(Mobile.Communication.Common.Queuing.JobSegments)">
            <summary>
            Link segments. Set their previous and next properties.
            </summary>
            <param name="segments">The segments to link.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Create(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType})">
            <summary>
            Creates a new <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> that contains <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s created by the given parameters.
            1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 1st goal, 1st type and 1st priority.
            2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 2nd goal, 2nd type and 2nd priority.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The list of types (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The created <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Create(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates a new <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> that contains <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s created by the given parameters.
            1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 1st goal, 1st type and 1st priority.
            2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 2nd goal, 2nd type and 2nd priority.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The list of types (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The created <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Create(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> that contains <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s created by the given parameters.
            1st <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 1st goal, 1st type and 1st priority.
            2nd <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>contains 2nd goal, 2nd type and 2nd priority.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The list of types (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The created <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Create(System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.QueuingInfo})">
            <summary>
            Creates a new <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> that contains <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s created by <paramref name="infoList"/>.
            </summary>
            <param name="infoList">A list containing information about each Segment.</param>
            <returns>The created <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Create(System.Collections.Generic.ICollection{Mobile.Communication.Common.Queuing.Segment})">
            <summary>
            Creates a new <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> that contains the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s in <paramref name="segments"/>.
            </summary>
            <param name="segments">A list of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.</param>
            <returns>The created <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.ContainsId(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.Segment},System.String)">
            <summary>
            Determines whether <paramref name="collection"/> contains a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> with the given <paramref name="id"/>.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="id">The id to search for.</param>
            <returns><see langword="true"/> if <paramref name="collection"/> contains a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> with the given <paramref name="id"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobSegments.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> at the specified position.
            </summary>
            <param name="index">The index of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> inside the collection.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobSegments.Length">
            <summary>
            Gets the length of the collection.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobSegments.IsEmpty">
            <summary>
            Gets whether the collection is empty.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobSegments.First">
            <summary>
            Gets the first element of the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> is empty.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.JobSegments.Last">
            <summary>
            Gets the last element of the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.IndexOf(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Gets the index of the given <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in this collection.
            Returns -1 if <paramref name="segment"/> is not part of this collection.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to search for.</param>
            <returns>The index of the given <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in this collection.
             -or- -1 if <paramref name="segment"/> is not part of this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.GetHashCode">
            <summary>
            Serves a hash function for <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> is equal to another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check equality with.</param>
            <returns><see langword="true"/> if objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.JobSegments.Equals(Mobile.Communication.Common.Queuing.JobSegments)">
            <summary>
            Checks if the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> is equal to another <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.
            </summary>
            <param name="collection">The <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/> to check equality with.</param>
            <returns><see langword="true"/> if two <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>s contain the same elements; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Common.Queuing"/> namespace contains objects that are related to ARAM's job management.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.PickupDropoffJob">
            <summary>
            A class representing a pickup-dropoff-job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle">
            <summary>
            The swap style of the Job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle.None">
            <summary>
            The Job is not part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle.FirstPart">
            <summary>
            The Job is the 1st part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle.SecondPart">
            <summary>
            The Job is the 2nd part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(Mobile.Communication.Common.Queuing.JobSegments,System.String)">
            <summary>
            Initailizes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class with several segments.
            </summary>
            <param name="segments">The segments the job will contain.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="segments"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="segments"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The priority of the pickup.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The priority of the pickup.</param>
            <param name="dropoffPriority">The priority of the dropoff.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The string representation of the pickup's priority.</param>
            <param name="dropoffPriority">The string representation of the dropoff's priority.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The priority of the pickup.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The priority of the pickup.</param>
            <param name="dropoffPriority">The priority of the dropoff.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> class.
            </summary>
            <param name="pickupGoal">The goal of the pickup.</param>
            <param name="dropoffGoal">The goal of the dropoff.</param>
            <param name="pickupPriority">The string representation of the pickup's priority.</param>
            <param name="dropoffPriority">The string representation of the dropoff's priority.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupDropoffJob.Swap(Mobile.Communication.Common.Queuing.PickupDropoffJob,Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle)">
            <summary>
            Creates a Pod-Swapping-Job of this and the <paramref name="other"/> Job.
            </summary>
            <param name="other">The other part of the Pod-Swapping-Job.</param>
            <param name="swap">The swap-style of this Job (1st part or 2nd part).</param>
            <returns>A Pod-Swapping-Job.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupDropoffJob.Pickup">
            <summary>
            The pickup.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupDropoffJob.Dropoff">
            <summary>
            The dropoff.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupDropoffJob.IsSwapped">
            <summary>
            Determines if this Job is part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupDropoffJob.Swapped">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwapStyle"/> of this Job.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupDropoffJob.SwappedJob">
            <summary>
            Gets the Pod-Swapping-Job this Job is part of.
            -or- <see langword="null"/> if it isn't part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.PickupJob">
            <summary>
            A class representing a Pickup-only job.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupJob.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> class.
            </summary>
            <param name="pickupGoal">The goal to head for.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupJob.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> class.
            </summary>
            <param name="pickupGoal">The goal to head for.</param>
            <param name="priority">The priority of the pickup job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupJob.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> class.
            </summary>
            <param name="pickupGoal">The goal to head for.</param>
            <param name="id">The id of the pickup job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupJob.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> class.
            </summary>
            <param name="pickupGoal">The goal to head for.</param>
            <param name="priority">The priority of the pickup job.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.PickupJob.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> class.
            </summary>
            <param name="pickupGoal">The goal to head for.</param>
            <param name="priority">The priority of the pickup job.</param>
            <param name="id">The id of the job.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PickupJob.Pickup">
            <summary>
            Gets the pickup.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.PodSwapJob">
            <summary>
            A class representing a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PodSwapJob.First">
            <summary>
            The 1st part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.PodSwapJob.Second">
            <summary>
            The 2nd part of a Pod-Swapping-Job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.QueuingInfo">
            <summary>
            A class containing all the information to queue a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.#ctor(System.String,Mobile.Communication.Common.Queuing.JobType)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="type">Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> will be a pickup or dropoff.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.#ctor(System.String,Mobile.Communication.Common.Queuing.JobType,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="type">Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> will be a pickup or dropoff.</param>
            <param name="priority">the priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.ShallowCopy(System.Boolean)">
            <summary>
            Creates a shallow copy of this instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.
            </summary>
            <param name="cleanPropertyChanged"><see langword="true"/> to start with an empty <see cref="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged"/> event.
            <see langword="false"/> to copy the <see cref="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged"/> event callbacks as well.</param>
            <returns>A shallow copy of this instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.DeepCopy(System.Boolean)">
            <summary>
            Creates a deep copy of this instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.
            </summary>
            <param name="cleanPropertyChanged"><see langword="true"/> to start with an empty <see cref="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged"/> event.
            <see langword="false"/> to copy the <see cref="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged"/> event callbacks as well.</param>
            <returns>A deep copy of this instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged">
            <summary>
            This event is raised when a property's value is changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.QueuingInfo.PropertyChanged"/>.
            </summary>
            <param name="propertyName">The name of the property. This is obtained automatically
            by <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> by default.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingInfo.Goal">
            <summary>
            Gets or sets the goal to head for.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingInfo.PriorityString">
            <summary>
            The string representation of priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingInfo.Priority">
            <summary>
            Gets or sets the priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the priority is set to 'default'.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingInfo.IsDefaultPriority">
            <summary>
            Gets whether the priority is "default".
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingInfo.Type">
            <summary>
            Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.ResetPriority">
            <summary>
            Resets the priority to "default".
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> representation of this <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of this <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.Equals(Mobile.Communication.Common.Queuing.QueuingInfo)">
            <summary>
            Indicates whether the current object is equal to <paramref name="other"/>.
            </summary>
            <param name="other">A <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to <paramref name="obj"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>The hash code for the value of this instance.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> object from <paramref name="input"/>.
            This inverts <see cref="M:Mobile.Communication.Common.Queuing.QueuingInfo.ToString"/>.
            </summary>
            <param name="input">The string to parse.</param>
            <returns>A <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> object parsed from <paramref name="input"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingInfo.TryParse(System.String,Mobile.Communication.Common.Queuing.QueuingInfo@)">
            <summary>
            Tries to parse a <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> object from <paramref name="input"/>.
            This inverts <see cref="M:Mobile.Communication.Common.Queuing.QueuingInfo.ToString"/>.
            </summary>
            <param name="input">The string to parse.</param>
            <param name="info">A <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> object parsed from <paramref name="input"/>
            -or- <see langword="null"/> if parsing failed. In this case the return value is <see langword="false"/>.</param>
            <returns><see langword="true"/> if <see cref="T:Mobile.Communication.Common.Queuing.QueuingInfo"/> was successfully parsed; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.QueueJobCallback">
            <summary>
            Represents a callback method to call if a job needs to be queued.
            </summary>
            <param name="job">The job to queue.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.ModifySegmentCallback">
            <summary>
            Represents a callback method to call if a segment needs to be modified.
            </summary>
            <param name="id">The id of the segment.</param>
            <param name="type">The type of modification.</param>
            <param name="value">The value to set during modification.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.CancelSegmentCallback">
            <summary>
            Represents a callback method to call if a segment/job needs to be cancelled.
            </summary>
            <param name="type">The type to cancel.</param>
            <param name="value">The value to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.CancelMultiSegmentCallback">
            <summary>
            Represents a callback method to call if a multi segment needs to be cancelled.
            </summary>
            <param name="id">The id of the segment to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.RefreshSegmentStorageCallback">
            <summary>
            Represents a callback method to refresh the segment storage.
            </summary>
            <returns>The updated collection of segments.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.RefreshSegmentCallback">
            <summary>
            Represents a callback method to refresh the status of a single segment.
            </summary>
            <returns>The updated segment.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.RefreshJobCallback">
            <summary>
            Represents a callback method to refresh a job.
            </summary>
            <returns>The updated job.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.QueuingManagerBase">
            <summary>
            A base class for the QueuingManager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase._sync">
            <summary>
            An object to synchronize the QueuingManager.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.queueJob">
            <summary>
            The callback to queue a job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.modify">
            <summary>
            The callback to modify a segment.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.cancel">
            <summary>
            The callback to cancel a segment/job.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.refresh">
            <summary>
            The callback to refresh segment storage.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.refreshSegment">
            <summary>
            The callback to refresh the status of a single segment.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.QueuingManagerBase.refreshJob">
            <summary>
            The callback to refresh the status of a job.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.#ctor(Mobile.Communication.Common.Queuing.QueueJobCallback,Mobile.Communication.Common.Queuing.ModifySegmentCallback,Mobile.Communication.Common.Queuing.CancelSegmentCallback,Mobile.Communication.Common.Queuing.RefreshSegmentStorageCallback,Mobile.Communication.Common.Queuing.RefreshSegmentCallback,Mobile.Communication.Common.Queuing.RefreshJobCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.
            </summary>
            <param name="queueJob">The callback to queue a job.</param>
            <param name="modify">The callback to modify a job.</param>
            <param name="cancel">The callback to cancel a job.</param>
            <param name="refresh">The callback to refresh the storage of segments.</param>
            <param name="refreshSegment">The callback to refresh the status of a single segment.</param>
            <param name="refreshJob">The callback to refresh a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Remove(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Removes a job from the <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.
            Removes it from <see cref="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Jobs"/> and <see cref="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Segments"/>.
            </summary>
            <param name="job">The job to remove.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Trim">
            <summary>
            Trims the finished jobs in this collection to the specified number.
            This method MUST be called while the collection is LOCKED.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.QueueJob(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Queues a job on the remote object.
            </summary>
            <param name="job">The job that needs to be done.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <paramref name="job"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="job"/> is already queued.
             -or- First <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> isn't a pickup.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Modify(System.String,Mobile.Communication.Common.Queuing.ModifcationType,System.Object)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if modifying failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Modify(System.String,Mobile.Communication.Common.Queuing.ModifcationType,System.Object,System.String@)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Modify(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.ModifcationType,System.Object)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Modify(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.ModifcationType,System.Object,System.String@)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyGoal(System.String,System.String)">
            <summary>
            Modifies the goal of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="goal">The new goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyGoal(System.String,System.String,System.String@)">
            <summary>
            Modifies the goal of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="goal">The new goal.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyGoal(Mobile.Communication.Common.Queuing.Segment,System.String)">
            <summary>
            Modifies the goal of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="goal">The new goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyGoal(Mobile.Communication.Common.Queuing.Segment,System.String,System.String@)">
            <summary>
            Modifies the goal of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="goal">The new goal.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyPriority(System.String,System.Int32)">
            <summary>
            Modifies the priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> spicified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="priority">The new priority.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyPriority(System.String,System.Int32,System.String@)">
            <summary>
            Modifies the priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> spicified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="priority">The new priority.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyPriority(Mobile.Communication.Common.Queuing.Segment,System.Int32)">
            <summary>
            Modifies the priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="priority">The new priority.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ModifyPriority(Mobile.Communication.Common.Queuing.Segment,System.Int32,System.String@)">
            <summary>
            Modifies the priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="priority">The new priority.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object,System.String)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="type">The cancel type.</param>
            <param name="value">The cancel value.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the containing object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object,System.String,System.String@)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="type">The cancel type.</param>
            <param name="value">The cancel value.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="type">The cancel type.</param>
            <param name="value">The cancel value.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the containing object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object,System.String@)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="type">The cancel type.</param>
            <param name="value">The cancel value.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.Segment,System.String)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            Cancels by id (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.ID"/>).
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="segment"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.Segment,System.String,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            Cancels by id (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.ID"/>).
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            Cancels by id (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.ID"/>).
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to cancel.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="segment"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.Segment,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            Cancels by id (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.ID"/>).
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to cancel.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.JobData,System.String)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            Cancels by jobid (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.JobID"/>).
            </summary>
            <param name="job">The job to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.JobData,System.String,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            Cancels by jobid (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.JobID"/>).
            </summary>
            <param name="job">The job to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            Cancels by jobid (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.JobID"/>).
            </summary>
            <param name="job">The job to cancel.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Cancel(Mobile.Communication.Common.Queuing.JobData,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.
            Cancels by jobid (<see cref="F:Mobile.Communication.Common.Queuing.CancelType.JobID"/>).
            </summary>
            <param name="job">The job to cancel.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJob(System.String,System.String)">
            <summary>
            Cancels ALL jobs that contain the specified jobid.
            </summary>
            <param name="id">The ID of job (<see cref="P:Mobile.Communication.Common.Queuing.JobData.ID"/>).</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJob(System.String,System.String,System.String@)">
            <summary>
            Cancels ALL jobs that contain the specified jobid.
            </summary>
            <param name="id">The ID of job (<see cref="P:Mobile.Communication.Common.Queuing.JobData.ID"/>).</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJob(System.String)">
            <summary>
            Cancels ALL jobs that contain the specified jobid.
            </summary>
            <param name="id">The ID of job (<see cref="P:Mobile.Communication.Common.Queuing.JobData.ID"/>).</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJob(System.String,System.String@)">
            <summary>
            Cancels ALL jobs that contain the specified jobid.
            </summary>
            <param name="id">The ID of job (<see cref="P:Mobile.Communication.Common.Queuing.JobData.ID"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelSegment(System.String,System.String)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that contains the specfied pickup- or dropoff-<paramref name="id"/>.
            </summary>
            <param name="id">The pickup- or dropoff-ID (<see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/>) to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelSegment(System.String,System.String,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that contains the specfied pickup- or dropoff-<paramref name="id"/>.
            </summary>
            <param name="id">The pickup- or dropoff-ID (<see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/>) to cancel.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelSegment(System.String)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that contains the specfied pickup- or dropoff-<paramref name="id"/>.
            </summary>
            <param name="id">The pickup- or dropoff-ID (<see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/>) to cancel.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelSegment(System.String,System.String@)">
            <summary>
            Cancels the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that contains the specfied pickup- or dropoff-<paramref name="id"/>.
            </summary>
            <param name="id">The pickup- or dropoff-ID (<see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/>) to cancel.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsOnRobot(System.String,System.String)">
            <summary>
            Cancels all jobs performed by a specified robot.
            </summary>
            <param name="robotName">The name of the robot to cancel all jobs for.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsOnRobot(System.String,System.String,System.String@)">
            <summary>
            Cancels all jobs performed by a specified robot.
            </summary>
            <param name="robotName">The name of the robot to cancel all jobs for.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsOnRobot(System.String)">
            <summary>
            Cancels all jobs performed by a specified robot.
            </summary>
            <param name="robotName">The name of the robot to cancel all jobs for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsOnRobot(System.String,System.String@)">
            <summary>
            Cancels all jobs performed by a specified robot.
            </summary>
            <param name="robotName">The name of the robot to cancel all jobs for.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsWithStatus(Mobile.Communication.Common.Queuing.SegmentStatus,System.String)">
            <summary>
            Cancels all jobs that have the specified state.
            </summary>
            <param name="state">The status that should be cancelled.</param>
            <param name="reason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="state"/>
            is an illegal <see cref="T:Mobile.Communication.Common.Queuing.SegmentStatus"/> to cancel.
            Valid state are <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Pending"/>, <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.InProgress"/> or <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Interrupted"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsWithStatus(Mobile.Communication.Common.Queuing.SegmentStatus,System.String,System.String@)">
            <summary>
            Cancels all jobs that have the specified state.
            </summary>
            <param name="state">The status that should be cancelled.</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsWithStatus(Mobile.Communication.Common.Queuing.SegmentStatus)">
            <summary>
            Cancels all jobs that have the specified state.
            </summary>
            <param name="state">The status that should be cancelled.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.ArclBase"/> is in the process of disposing.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.ArclBase"/> is not connected.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="state"/>
            is an illegal <see cref="T:Mobile.Communication.Common.Queuing.SegmentStatus"/> to cancel.
            Valid state are <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Pending"/>, <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.InProgress"/> or <see cref="F:Mobile.Communication.Common.Queuing.SegmentStatus.Interrupted"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.CancelJobsWithStatus(Mobile.Communication.Common.Queuing.SegmentStatus,System.String@)">
            <summary>
            Cancels all jobs that have the specified state.
            </summary>
            <param name="state">The status that should be cancelled.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegments">
            <summary>
            Gets a collection containing all jobs queued on the remote object.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred getting <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegments(Mobile.Communication.Common.Queuing.SegmentCollection@,System.String@)">
            <summary>
            Gets an array of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> containing all jobs queued on the remote object.
            </summary>
            <param name="segments">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s queued on the remote object.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if all segments were received successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegment(System.String)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegment(System.String,Mobile.Communication.Common.Queuing.Segment@,System.String@)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <param name="segment">The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the segment was updated successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegment(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshSegment(Mobile.Communication.Common.Queuing.Segment,Mobile.Communication.Common.Queuing.Segment@,System.String@)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <param name="updated">The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the segment was updated successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshJob(System.String)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <returns>The updated jobs having the specified <paramref name="id"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshJob(System.String,Mobile.Communication.Common.Queuing.JobData[]@,System.String@)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <param name="jobs">The updated jobs having the specified <paramref name="id"/> queued on the remote object.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the segment was updated successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshJob(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <returns>The updated jobs having the same id as <paramref name="job"/> that are queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.
             -or- if there is no mehtod to call.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if containing object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.RefreshJob(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData[]@,System.String@)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <param name="updated">The updated jobs having the same id as <paramref name="job"/> that are queued on the remote object.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the segment was updated successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.
            Disposes the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/> and <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            Also disconnects the object from its remoting channel if any.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Add(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Adds a job to the QueuingManager's storage if all jobs having the same id are finished.
            </summary>
            <param name="job">The <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> object to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if there is an unfinished job having the same jobid as <paramref name="job"/>
            that is already part of this <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Replace(Mobile.Communication.Common.Queuing.JobData,Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Replaces <paramref name="job"/> by <paramref name="replacement"/>.
            </summary>
            <param name="job">The job to replace.</param>
            <param name="replacement">The replacement for <paramref name="job"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> or
            <paramref name="replacement"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="job"/> is not part of the collection.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Reset">
            <summary>
            Resets the QueuingManager.
            Clears the <see cref="T:Mobile.Communication.Common.Queuing.JobCollection"/>,
            Clears the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.ClearFinishedJobs">
            <summary>
            Removes all finished jobs from <see cref="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Jobs"/> and <see cref="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Segments"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.QueueJobCallback)">
            <summary>
            Sets the callback to queue a job.
            </summary>
            <param name="queueJob">The callback to queue a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.ModifySegmentCallback)">
            <summary>
            Sets the callback to modify a segment.
            </summary>
            <param name="modify">The callback to modify a segment.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.CancelSegmentCallback)">
            <summary>
            Sets the callback to cancel a segment/job.
            </summary>
            <param name="cancel">The callback to cancel a segment/job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.RefreshSegmentStorageCallback)">
            <summary>
            Sets the callback to refresh segment storage.
            </summary>
            <param name="refresh">The callback to refresh segment storage.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.RefreshSegmentCallback)">
            <summary>
            Sets the callback to refresh the status of a single segment.
            </summary>
            <param name="refreshSegment">The callback to refresh a single segment.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Communication.Common.Queuing.RefreshJobCallback)">
            <summary>
            Sets the callback to refresh a job.
            </summary>
            <param name="refreshJob">The callback to refresh a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise an event.
            </summary>
            <param name="raiseEvent">The callback to raise an event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.SetCallback(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Sets the callback to add information to the log file.
            Applies this change to the segment and job collection (and thus all jobs and segments) as well.
            </summary>
            <param name="callback">The method to call to add info to the log file..</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Jobs">
            <summary>
            Gets a collection of jobs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.Segments">
            <summary>
            Gets a collection of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.QueuingManagerBase.MaxFinishedJobs">
            <summary>
            Gets or sets the maximum number of finished jobs to keep in the collection.
            If value &lt; 0, no limit is set which means that the job list keeps growing.
            In this case a manual reset (call to <see cref="M:Mobile.Communication.Common.Queuing.QueuingManagerBase.Reset"/>) is required.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager">
            <summary>
            A class inheriting from <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/> representing a QueuingManager of an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager"/>
            without setting any callbacks.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.#ctor(Mobile.Communication.Common.Queuing.QueueJobCallback,Mobile.Communication.Common.Queuing.ModifySegmentCallback,Mobile.Communication.Common.Queuing.CancelSegmentCallback,Mobile.Communication.Common.Queuing.CancelMultiSegmentCallback,Mobile.Communication.Common.Queuing.RefreshSegmentStorageCallback,Mobile.Communication.Common.Queuing.RefreshSegmentCallback,Mobile.Communication.Common.Queuing.RefreshJobCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager"/>.
            </summary>
            <param name="queueJob">The callback to queue a job.</param>
            <param name="modify">The callback to modify a job.</param>
            <param name="cancel">The callback to cancel a job.</param>
            <param name="cancelMulti">The callback to cancel a segment of a multi segment job.</param>
            <param name="refresh">The callback to refresh the storage of segments.</param>
            <param name="refreshSegment">The callback to refresh the status of a single segment.</param>
            <param name="refreshJob">The callback to refresh a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,Mobile.Communication.Common.Queuing.PickupJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.Int32)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.Int32,Mobile.Communication.Common.Queuing.PickupJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.String,Mobile.Communication.Common.Queuing.PickupJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.Int32,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.Int32,System.String,Mobile.Communication.Common.Queuing.PickupJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickup(System.String,System.String,System.String,Mobile.Communication.Common.Queuing.PickupJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goal">The goal to reach.</param>
            <param name="priority">The priority of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.Int32,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.Int32,System.Int32,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <returns>The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goalPickup"/>
            or <paramref name="goalDropoff"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="goalPickup"/> or <paramref name="goalDropoff"/> is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueuePickupDropoff(System.String,System.String,System.String,System.String,System.String,Mobile.Communication.Common.Queuing.PickupDropoffJob@,System.String@)">
            <summary>
            Queues a <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/> on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goalPickup">The goal to reach for pickup.</param>
            <param name="goalDropoff">The goal to reach for dropoff.</param>
            <param name="priorityPickup">The priority of the pickup.</param>
            <param name="priorityDropoff">The priority of the dropoff.</param>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.</param>
            <param name="job">The generated <see cref="T:Mobile.Communication.Common.Queuing.PickupDropoffJob"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType})">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.
             -or- The first <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> isn't a pickup.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.String)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.String,Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.String})">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.String},Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.Int32},Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.String},System.String,Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the <paramref name="goals"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.
             -or- The length of the lists are different..</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.JobType},System.Collections.Generic.IList{System.Int32},System.String,Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="goals">The list of goals (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="types">The types of each goal (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="priorities">The list of priorities (1 for each <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>).</param>
            <param name="id">The id of the job.</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.QueuingInfo})">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="infoList">A list containing information about each Segment.</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the goals in <paramref name="infoList"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.QueuingInfo},Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="infoList">A list containing information about each Segment.</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.QueuingInfo},System.String)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="infoList">A list containing information about each Segment.</param>
            <param name="id">The id of the job.</param>
            <returns>The generated job.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the goals in <paramref name="infoList"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">The list is empty.
             -or- The list is longer than the max possible size this collection can reach.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred queuing the multi job.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.QueueMulti(System.Collections.Generic.IList{Mobile.Communication.Common.Queuing.QueuingInfo},System.String,Mobile.Communication.Common.Queuing.JobData@,System.String@)">
            <summary>
            Queues a job on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="infoList">A list containing information about each Segment.</param>
            <param name="id">The id of the job.</param>
            <param name="job">The generated <paramref name="job"/>.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.CancelMultiSegment(System.String,System.String)">
            <summary>
            Cancels a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in a multi job specified by <paramref name="id"/>. This <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> must not be the first one.
            </summary>
            <param name="id">The id of the segment to cancel.</param>
            <param name="reason">The reason to cancel the segment.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.CancelMultiSegment(System.String,System.String,System.String@)">
            <summary>
            Cancels a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in a multi job specified by <paramref name="id"/>. This <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> must not be the first one.
            </summary>
            <param name="id">The id of the segment to cancel</param>
            <param name="reason">The reason to cancel the job.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.CancelMultiSegment(System.String)">
            <summary>
            Cancels a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in a multi job specified by <paramref name="id"/>. This <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> must not be the first one.
            </summary>
            <param name="id">The id of the segment to cancel.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.CancelMultiSegment(System.String,System.String@)">
            <summary>
            Cancels a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> in a multi job specified by <paramref name="id"/>. This <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> must not be the first one.
            </summary>
            <param name="id">The id of the segment to cancel</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation succeeds; otherwise, <see langword="false"/>. An error message is set if this is <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerEnterpriseManager.SetCallback(Mobile.Communication.Common.Queuing.CancelMultiSegmentCallback)">
            <summary>
            Sets the callback to cancel a single segment.
            </summary>
            <param name="cancelMulti">The callback to cancel a single segment.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.QueuingManagerRobot">
            <summary>
            A class inheriting from <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerBase"/> representing a QueuingManager of a <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerRobot"/>
            without setting any callbacks.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.#ctor(Mobile.Communication.Common.Queuing.QueueJobCallback,Mobile.Communication.Common.Queuing.ModifySegmentCallback,Mobile.Communication.Common.Queuing.CancelSegmentCallback,Mobile.Communication.Common.Queuing.RefreshSegmentStorageCallback,Mobile.Communication.Common.Queuing.RefreshSegmentCallback,Mobile.Communication.Common.Queuing.RefreshJobCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerRobot"/>.
            </summary>
            <param name="queueJob">The callback to queue a job.</param>
            <param name="modify">The callback to modify a job.</param>
            <param name="cancel">The callback to cancel a job.</param>
            <param name="refresh">The callback to refresh the storage of segments.</param>
            <param name="refreshSegment">The callback to refresh the status of a single segment.</param>
            <param name="refreshJob">The callback to refresh a job.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Queuing.QueuingManagerRobot"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <returns>The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,Mobile.Communication.Common.Queuing.DropoffJob@,System.String@)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="job">The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.Int32)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <returns>The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.Int32,Mobile.Communication.Common.Queuing.DropoffJob@,System.String@)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="job">The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.String)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="id">The id of the job.</param>
            <returns>The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.String,Mobile.Communication.Common.Queuing.DropoffJob@,System.String@)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="id">The id of the <paramref name="job"/>.</param>
            <param name="job">The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.Int32,System.String)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="id">The id of the job.</param>
            <returns>The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.Int32,System.String,Mobile.Communication.Common.Queuing.DropoffJob@,System.String@)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="id">The id of the <paramref name="job"/>.</param>
            <param name="job">The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.String,System.String)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="id">The id of the job.</param>
            <returns>The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the specified goal is not valid
             -or- <paramref name="id"/> contains spaces.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.QueuingManagerRobot.QueueDropoff(System.String,System.String,System.String,Mobile.Communication.Common.Queuing.DropoffJob@,System.String@)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="id">The id of the <paramref name="job"/>.</param>
            <param name="job">The job as it has been queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="job"/> was queued successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentEventHandler">
            <summary>
            Represents a method that will handle an event fired by a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentEventHandler`1">
            <summary>
            Represents a method that will handle an event fired by a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.Segment">
            <summary>
            A class containing all information about a simple pickup or dropoff job.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.Segment.Status">
            <summary>
            A struct containing the status and substatus of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.#ctor(Mobile.Communication.Common.Queuing.SegmentStatus)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.
            </summary>
            <param name="status">The main status of the job</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.#ctor(Mobile.Communication.Common.Queuing.SegmentStatus,Mobile.Communication.Common.Queuing.SegmentSubStatus)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.
            </summary>
            <param name="status">The main status.</param>
            <param name="subStatus">The sub status.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.#ctor(Mobile.Communication.Common.Queuing.SegmentStatus,Mobile.Communication.Common.Queuing.SegmentSubStatus,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.
            </summary>
            <param name="status">The main status.</param>
            <param name="subStatus">The sub status.</param>
            <param name="customSubStatus">The custom sub status.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.ToString">
            <summary>
            Overrides the <see cref="M:System.ValueType.ToString"/> mehtod.
            </summary>
            <returns>The string representation of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>'s <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.GetHashCode">
            <summary>
            Overrides the <see cref="M:System.ValueType.GetHashCode"/> method.
            </summary>
            <returns>The hashcode for this <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.Equals(System.Object)">
            <summary>
            Overrides the <see cref="M:System.ValueType.Equals(System.Object)"/> method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality with.</param>
            <returns>True if <paramref name="obj"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.Equals(Mobile.Communication.Common.Queuing.Segment.Status)">
            <summary>
            Checks if this <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/> equals another.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/> to check for equality with.</param>
            <returns>True if <paramref name="other"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>; otherwise, false.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Status.MainStatus">
            <summary>
            The main status of this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Status.SubStatus">
            <summary>
            The sub status of this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Status.CustomSubStatus">
            <summary>
            Gets the custom sub status.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.op_Equality(Mobile.Communication.Common.Queuing.Segment.Status,Mobile.Communication.Common.Queuing.Segment.Status)">
            <summary>
            Check for equality of two <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>es have the same values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.op_Inequality(Mobile.Communication.Common.Queuing.Segment.Status,Mobile.Communication.Common.Queuing.Segment.Status)">
            <summary>
            Check for inequality of two <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>es have different values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Status.Parse(System.String)">
            <summary>
            Parses a string that contains status information.
            String needs to look like "[MainStatus] [SubStatus]".
            </summary>
            <param name="s">The string representation of a <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</param>
            <returns>A new instance of <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/>.</returns>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment._PickupQualifier">
            <summary>
            A string to check if id qualifies as a pickup <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>. ('pickup')
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment._DropoffQualifier">
            <summary>
            A string to check if id qualifies as a dropoff <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>. ('dropoff')
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.Empty">
            <summary>
            Represents an empty <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment._DefaultPrio">
            <summary>
            A string specifying the default priority of a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.Log">
            <summary>
            Determines whether to add messages to the log.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.id">
            <summary>
            The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.goal">
            <summary>
            The goal to head for.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.priority">
            <summary>
            The string representation of priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.queued">
            <summary>
            The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been queued.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.finished">
            <summary>
            The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been finished.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.state">
            <summary>
            The <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/> of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.type">
            <summary>
            Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.failCount">
            <summary>
            #times the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> failed.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.next">
            <summary>
            The next <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.previous">
            <summary>
            The previous <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.Segment.jobData">
            <summary>
            The job this segment beglongs to.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.#ctor">
            <summary>
            Initializes a new (default) instance of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> class.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.#ctor(System.String,Mobile.Communication.Common.Queuing.JobType)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> class using the default prioirity.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="type">Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.#ctor(System.String,Mobile.Communication.Common.Queuing.JobType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> class
            setting the goal to head for and the priority of the job.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="type">Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.#ctor(System.String,Mobile.Communication.Common.Queuing.JobType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> class
            setting the goal to head for and the priority of the job.
            </summary>
            <param name="goal">The goal to head for.</param>
            <param name="priority">The priority of the job.</param>
            <param name="type">Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="goal"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.#ctor(Mobile.Communication.Common.Queuing.QueuingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> class using the data of <paramref name="info"/>.
            </summary>
            <param name="info">Information about the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to queue.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if goal in <paramref name="info"/>
            is null or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Equals(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Determines whether the specified <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>
            is equal to the current <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to check for equality with.</param>
            <returns><see langword="true"/> if <paramref name="other"/> is equal to the current <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>
            is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to check for equality with.</param>
            <returns><see langword="true"/> if <paramref name="other"/> is equal to the current <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Communication.Common.Queuing.Segment"/></returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.ToString">
            <summary>
            Overrides the <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/> for the job or
            the goal to head for if the <see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/> has not been set yet.
            </summary>
            <returns>The <see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/> for the job or
            the goal to head for if the <see cref="P:Mobile.Communication.Common.Queuing.Segment.ID"/> has not been set yet.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.ToString(System.String)">
            <summary>
            Returns the formatted <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            Replaces "[id]", "[jobid]", "[priority]", "[status]", "[goal]", "[robot]", "[queued]", "[finished]" and "[failures]"
            (case insensitive) with their corresponding values.
            </summary>
            <param name="format">A <see cref="T:System.String"/> formatting the return value.
            Keys "[id]", "[jobid]", "[priority]", "[status]", "[goal]", "[robot]", "[queued]", "[finished]" and "[failures]"
            will be replaced with their corresponding values.</param>
            <returns>The formatted <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.IsEmpty(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Determines whether <paramref name="segment"/> is <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="segment"/> is the <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.IsNullOrEmpty(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Checks if the specified <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="segment"/> is <see langword="null"/> or s<see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.GetIdNumber(System.String)">
            <summary>
            Gets the id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]).
            </summary>
            <param name="id">The id to check.</param>
            <returns>The id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="id"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="id"/> is not of the given format.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.GetIdNumber(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Gets the id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]).
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to check.</param>
            <returns>The id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]).</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.GetJobTypeFromId(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Queuing.JobType"/> from the given <paramref name="id"/>.
            </summary>
            <param name="id">The id.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.JobType"/> from the given <paramref name="id"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.GetIdNumber">
            <summary>
            Gets the id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]) of this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <returns>The id-number (XYZ in PICKUP[XYZ], DROPOFF[XYZ]).</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.ToInfoString">
            <summary>
            Gets a string similar to QueueUpdate: ... messages.
            </summary>
            <returns>A string similar to QueueUpdate: ... messages.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged">
            <summary>
            This event is fired each time a property changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.OnPropertyChanged(Mobile.Communication.Common.Event.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> event directly.
            </summary>
            <param name="argument">The argument to add to the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> event.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.Segment.StateChanged">
            <summary>
            This event is fired each time <see cref="P:Mobile.Communication.Common.Queuing.Segment.State"/> changes.
            This events argument provide more information than <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.OnStateChanged(Mobile.Communication.Common.Event.PropertyChangedEventArgs{Mobile.Communication.Common.Queuing.Segment.Status})">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/> event directly.
            </summary>
            <param name="argument">The argument to add to the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.OnStateChanged(Mobile.Communication.Common.Queuing.Segment.Status,Mobile.Communication.Common.Queuing.Segment.Status,System.String)">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/> event.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="oldValue">The old state.</param>
            <param name="newValue">The new state.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> and <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> or <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> or <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.Queuing.Segment.PropertyChanged"/> or <see cref="E:Mobile.Communication.Common.Queuing.Segment.StateChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.Segment.SetCallback(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Sets the callback to add information to the log file.
            </summary>
            <param name="callback">The method to call to add info to the log file.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.ID">
            <summary>
            The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Goal">
            <summary>
            Gets the goal to head for.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.PriorityString">
            <summary>
            The string representation of priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Priority">
            <summary>
            Gets the priority of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the priority is set to 'default'.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Queued">
            <summary>
            The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been queued.
            Returns <see langword="null"/> if the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is not yet queued.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Finished">
            <summary>
            The time the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been finished.
            Returns <see langword="null"/> if the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is not yet finished.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.State">
            <summary>
            The <see cref="T:Mobile.Communication.Common.Queuing.Segment.Status"/> of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Type">
            <summary>
            Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup or dropoff.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.FailCount">
            <summary>
            Gets #times the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> failed.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Next">
            <summary>
            The next <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Previous">
            <summary>
            The previous <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.Job">
            <summary>
            The job this segment beglongs to.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.IsPickup">
            <summary>
            Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a pickup.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.IsDropoff">
            <summary>
            Specifies whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is a dropoff.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.HasNext">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has successor.
            (<see cref="P:Mobile.Communication.Common.Queuing.Segment.Next"/> is not <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.Segment.HasPrevious">
            <summary>
            Determines whether this <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has predecessor.
            (<see cref="P:Mobile.Communication.Common.Queuing.Segment.Previous"/> is not <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>).
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Queuing.SegmentCollection">
            <summary>
            A class representing a collection of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.Queuing.SegmentCollection.Log">
            <summary>
            Determines whether to add messages to the log.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.#ctor(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.Segment})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="segments">The segments to add to the storage.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called after deserialization.
            Initializes the sync object if not done while deserializing.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.ComputeHash(System.String)">
            <summary>
            Computes the hash value for <paramref name="id"/> inside this collection.
            </summary>
            <param name="id">The id to get the hash for.</param>
            <returns>The hash value for <paramref name="id"/> inside this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Reset(System.Int32)">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="size">The number of elements to be able to store.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Expand">
            <summary>
            Expands the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            Able to store twice as many elements as before.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.GetIndexById(System.String)">
            <summary>
            Gets the index of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> by <paramref name="id"/>.
            </summary>
            <param name="id">The id to search for.</param>
            <returns>The index of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.UnsafeAdd(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Adds <paramref name="segment"/> to the collection
            w/out performing any checks.
            </summary>
            <param name="segment">The segment to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.UnsafeRemove(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Removes <paramref name="segment"/> from the collection
            w/out performing any checks.
            </summary>
            <param name="segment">The segment to remove.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> that has been removed or <see langword="null"/> if no matching <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is part of this collection.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Add(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Adds the given segment to this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to add to this collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="segment"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="segment"/> is already part of the collection.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.AddRange(System.Collections.Generic.IEnumerable{Mobile.Communication.Common.Queuing.Segment})">
            <summary>
            Adds a range of segments to the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="segments">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s to add to this collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="segments"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Remove(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Removes the given segment from this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to remove from this collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="segment"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.Segment.Empty"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="segment"/> is not part of the collection.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.SegmentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> having the spcified id.
            </summary>
            <param name="id">The id to look for.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> having the spcified id.
             -or- <see langword="null"/> if there is none.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>. </exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.ContainsID(System.String)">
            <summary>
            Determines whether a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> with the given id is part of this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="id">The id to search for.</param>
            <returns><see langword="true"/> if a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> having the specified id is part of this collection; otherwise; <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.TryGetSegment(System.String,Mobile.Communication.Common.Queuing.Segment@)">
            <summary>
            Tries to get the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> having the specified id.
            </summary>
            <param name="id">The id to search for.</param>
            <param name="segment">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> corresponding to the given id.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> has been found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.ToArray">
            <summary>
            Gets all <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s stored in this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <returns>All <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s stored in this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.SegmentCollection.Pickups">
            <summary>
            Gets all pickup <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s stored in this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.SegmentCollection.Dropoffs">
            <summary>
            Gets all dropoff <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s stored in this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/>.
            Use this when removing or adding an element from/to the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="change">The change made to the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.</param>
            <param name="item">The item involved in the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.Queuing.SegmentCollection.CollectionChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.SetCallback(Mobile.Logger.TextFileLogger.LogLineDelegate)">
            <summary>
            Sets the callback to add information to the log file.
            Applies this change to all segments in the collection as well.
            </summary>
            <param name="callback">The method to call to add info to the log file.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Clear">
            <summary>
            Clears the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.Contains(Mobile.Communication.Common.Queuing.Segment)">
            <summary>
            Determines whether a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is part of this <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="item">The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to search for.</param>
            <returns><see langword="true"/> if a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> is part of this collection; otherwise; <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.CopyTo(Mobile.Communication.Common.Queuing.Segment[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/> to an array, starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Communication.Common.Queuing.SegmentCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:Mobile.Communication.Common.Queuing.JobSegments"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Queuing.SegmentCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target <see cref="T:Mobile.Communication.Common.Queuing.SegmentCollection"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">A value has already been associated with the following name: "Name".</exception>
        </member>
        <member name="T:Mobile.Communication.Common.RangeDevice">
            <summary>
            A class representing a range device.
            </summary>
            <summary>
            A class representing a range device.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="name">The name of the range device.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RangeDevice.Reading"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read data from.</param>
            <param name="context">The source of this deserialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.ToString">
            <summary>
            Returns <see cref="P:Mobile.Communication.Common.RangeDevice.Name"/> of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <returns>The <see cref="P:Mobile.Communication.Common.RangeDevice.Name"/> of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.RefreshCurrentReadings">
            <summary>
            Refreshes <see cref="P:Mobile.Communication.Common.RangeDevice.CurrentReadings"/>.
            </summary>
            <returns>The current readings of the range device.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.RefreshCumulativeReadings">
            <summary>
            Refreshes <see cref="P:Mobile.Communication.Common.RangeDevice.CumulativeReadings"/>.
            </summary>
            <returns>The current readings of the range device.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDevice.Name">
            <summary>
            Gets the name of the range device.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDevice.CurrentReadings">
            <summary>
            Gets a collection of the current readings of the range device.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDevice.CumulativeReadings">
            <summary>
            Gets a collection of the cumulative readings of the range device.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RangeDevice.Reading">
            <summary>
            A class representing a reading of a <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.Reading.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RangeDevice.Reading"/>.
            </summary>
            <param name="x">The X-Coordinate of the reading.</param>
            <param name="y">The Y-Coordinate of the reading.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.Reading.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RangeDevice.Reading"/>.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read data from.</param>
            <param name="context">The source of this deserialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RangeDevice.Reading.ToString">
            <summary>
            Returns the X and Y coordinates as a string.
            </summary>
            <returns>The X and Y coordinates as a string.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDevice.Reading.X">
            <summary>
            Gets the X-Coordinate of the reading.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RangeDevice.Reading.Y">
            <summary>
            Gets the Y-Coordinate of the reading.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotEventHandler">
            <summary>
            Represents a method that will handle an event fired from a Robot
            which has no specified type of arguments.
            </summary>
            <param name="robot">The <see cref="T:Mobile.Communication.Common.Robot"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.RobotEventHandler`1">
            <summary>
            Represents a method that will handle an event fired from a Robot
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="robot">The <see cref="T:Mobile.Communication.Common.Robot"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Common.Robot">
            <summary>
            A class to simplify working with a Robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Robot"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Communication.Common.Robot"/> class.
            </summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Add(Mobile.Communication.Common.RangeDevice)">
            <summary>
            Sets all callbacks and adds the <see cref="T:Mobile.Communication.Common.RangeDevice"/> to <see cref="F:Mobile.Communication.Common.Robot.rangeDeviceDict"/>.
            </summary>
            <param name="device">The <see cref="T:Mobile.Communication.Common.RangeDevice"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Add(Mobile.Communication.Common.SwitchableForbidden)">
            <summary>
            Sets all callbacks and adds the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to <see cref="F:Mobile.Communication.Common.Robot.switchableForbiddenList"/>.
            </summary>
            <param name="forbidden">The <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Add(Mobile.Communication.Common.Input)">
            <summary>
            Sets all callbacks and adds the <see cref="T:Mobile.Communication.Common.Input"/> to <see cref="P:Mobile.Communication.Common.Robot.Inputs"/>.
            </summary>
            <param name="input">The <see cref="T:Mobile.Communication.Common.Input"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Add(Mobile.Communication.Common.Output)">
            <summary>
            Sets all callbacks and adds the <see cref="T:Mobile.Communication.Common.Output"/> to <see cref="P:Mobile.Communication.Common.Robot.Outputs"/>.
            </summary>
            <param name="output">The <see cref="T:Mobile.Communication.Common.Output"/> to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRoutes">
            <summary>
            Refreshes the list of routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
            </summary>
            <returns>The routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing routes.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRoutes(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
            </summary>
            <param name="routes">The routes the <see cref="T:Mobile.Communication.Common.Robot"/> can patrol on.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.Routes"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshMacros">
            <summary>
            Refreshes the list of macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
            </summary>
            <returns>The macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing macros.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshMacros(System.String[]@,System.String@)">
            <summary>
            Refreshes the list of macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
            </summary>
            <param name="macros">The macros the <see cref="T:Mobile.Communication.Common.Robot"/> can execute.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.Macros"/> were refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshSwitchableForbiddens">
            <summary>
            Refreshes the collection of switchable forbidden lines and areas.
            </summary>
            <returns>The collection of switchable forbidden lines and areas.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing macros.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
            <seealso cref="P:Mobile.Communication.Common.Robot.SwitchableForbiddens"/>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshSwitchableForbiddens(Mobile.Communication.Common.SwitchableForbidden[]@,System.String@)">
            <summary>
            Refreshes the collection of switchable forbidden lines and areas.
            </summary>
            <param name="switchableForbiddens">The collection of switchable forbidden lines and areas.
             -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
            <seealso cref="P:Mobile.Communication.Common.Robot.SwitchableForbiddens"/>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshStatus">
            <summary>
            Refreshes the status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshStatus(Mobile.Communication.Common.RobotStatus@,System.String@)">
            <summary>
            Refreshes the status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="status">The status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="status"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshDockingStatus">
            <summary>
            Refreshes the docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshDockingStatus(Mobile.Communication.Common.RobotStatus.RobotDockingState@,System.String@)">
            <summary>
            Refreshes the docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="dockingStatus">The docking status of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <paramref name="dockingStatus"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshWaitState">
            <summary>
            Refreshes the wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshWaitState(Mobile.Communication.Common.RobotStatus.WaitingState@,System.String@)">
            <summary>
            Refreshes the wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="waitState">The wait state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the wait state was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshPauseState">
            <summary>
            Refreshes the pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred refreshing the <see cref="T:Mobile.Communication.Common.Robot"/>s docking status.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshPauseState(Mobile.Communication.Common.RobotStatus.PausingState@,System.String@)">
            <summary>
            Refreshes the pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="pauseState">The pause state of the <see cref="T:Mobile.Communication.Common.Robot"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the pause state was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshStatusOnEnterpriseManager">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshStatusOnEnterpriseManager(Mobile.Communication.Common.RobotStatusOnEnterpriseManager@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
            <param name="statusOnEM">The <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshMotorStatus">
            <summary>
            Refreshes the status of the motors.
            </summary>
            <returns>The status of the motors.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshMotorStatus(Mobile.Communication.Common.MotorState@,System.String@)">
            <summary>
            Refreshes the status of the motors.
            </summary>
            <param name="motorStatus">The status of the motors.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.MotorStatus"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshOdometer">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshOdometer(Mobile.Communication.Common.Odometer@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <param name="odometer">The <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.Odometer"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshEstimatedArrival">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshEstimatedArrival(Mobile.Communication.Common.ArrivalEstimate@,System.String@)">
            <summary>
            Refreshes the <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.
            </summary>
            <param name="estimate">The <see cref="T:Mobile.Communication.Common.Robot"/>'s estimated arrival.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.EstimatedArrival"/> was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.EnableMotors">
            <summary>
            Enables the motors of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.EnableMotors(System.String@)">
            <summary>
            Enables the motors of the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the motors were enabled successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ResetOdometer">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ResetOdometer(System.String@)">
            <summary>
            Resets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="P:Mobile.Communication.Common.Robot.Odometer"/> was reset successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeToPoint(Mobile.Communication.Common.Location)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="location">The point to localize the <see cref="T:Mobile.Communication.Common.Robot"/> to.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeToPoint(Mobile.Communication.Common.Location,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="location">The point to localize the <see cref="T:Mobile.Communication.Common.Robot"/> to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized to the given point successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeToPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The Heading of the 2D-point.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeToPoint(System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> to a given point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The Heading of the 2D-point.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized to the given point successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeAtGoal(System.String)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> at the specified goal.
            </summary>
            <param name="goal">The name of the goal.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.LocalizeAtGoal(System.String,System.String@)">
            <summary>
            Localizes the <see cref="T:Mobile.Communication.Common.Robot"/> at the specified goal.
            </summary>
            <param name="goal">The name of the goal.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Robot"/> has been localized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToPoint(Mobile.Communication.Common.Location)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="location">The point to the <see cref="T:Mobile.Communication.Common.Robot"/> is sent to.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToPoint(Mobile.Communication.Common.Location,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="location">The point to the <see cref="T:Mobile.Communication.Common.Robot"/> is sent to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to a <paramref name="location"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The heading of the robot at the point.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToPoint(System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to a specified point.
            </summary>
            <param name="x">The X-Coordinate of the point.</param>
            <param name="y">The Y-Coordinate of the point.</param>
            <param name="theta">The heading of the robot at the point.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to point <paramref name="x"/>, <paramref name="y"/>, <paramref name="theta"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToGoal(System.String)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to the specified goal.
            </summary>
            <param name="goal">The name of the goal to go to.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing going to a goal.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GoToGoal(System.String,System.String@)">
            <summary>
            Sends <see cref="T:Mobile.Communication.Common.Robot"/> to the specified goal.
            </summary>
            <param name="goal">The name of the goal to go to.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if going to a <paramref name="goal"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PatrolRoute(System.String,System.Boolean)">
            <summary>
            Sends the robot on a route.
            </summary>
            <param name="route">the name of the route to patrol.</param>
            <param name="forever">Determines whether to patrol <paramref name="route"/> forever (<see langword="true"/>)
            or only once (<see langword="false"/>).</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing patroling a route.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PatrolRoute(System.String,System.Boolean,System.String@)">
            <summary>
            Sends the robot on a route.
            </summary>
            <param name="route">the name of the route to patrol.</param>
            <param name="forever">Determines whether to patrol <paramref name="route"/> forever (<see langword="true"/>)
            or only once (<see langword="false"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if patroling a <paramref name="route"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ExecuteMacro(System.String)">
            <summary>
            Executes a given macro.
            </summary>
            <param name="macro">The macro to exectue.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ExecuteMacro(System.String,System.String@)">
            <summary>
            Executes a given macro.
            </summary>
            <param name="macro">The macro to exectue.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if executing a <paramref name="macro"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Dock">
            <summary>
            Sends the robot to dock.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- docking failed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Dock(System.String@)">
            <summary>
            Sends the robot to dock.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot has been send to dock successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.UnDock">
            <summary>
            Sends the robot to un-dock.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- un-docking failed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.UnDock(System.String@)">
            <summary>
            Sends the robot to un-dock.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot has been send to un-dock successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Stop">
            <summary>
            Stops the current activity.
            </summary>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing stopping the <see cref="T:Mobile.Communication.Common.Robot"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Stop(System.String@)">
            <summary>
            Stops the current activity.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if stopping the <see cref="T:Mobile.Communication.Common.Robot"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Stay">
            <summary>
            Makes the robot stay for one additional minute.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Stay(System.String@)">
            <summary>
            Makes the robot stay for one additional minute.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot is staying for one additional minute;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Go">
            <summary>
            Sends the go command to the robot.
            This can either:
            clear faults -or-
            terminate wait tasks (like waitActive or stay).
            PLEASE NOTE THAT - UNLIKE ALL OTHER METHODS - THIS METHOD DOES NOT WAIT FOR A RESPONSE FROM THE ROBOT!!!
            THIS METHOD DIRECTLY RETURNS AFTER SENDING THE COMMAND.
            This is because there are situations where go does not get a return message (e.g. when robot is idle).
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Go(System.String@)">
            <summary>
            Sends the go command to the robot.
            This can either:
            clear faults -or-
            terminate wait tasks (like waitActive or stay).
            PLEASE NOTE THAT - UNLIKE ALL OTHER METHODS - THIS METHOD DOES NOT WAIT FOR A RESPONSE FROM THE ROBOT!!!
            THIS METHOD DIRECTLY RETURNS AFTER SENDING THE COMMAND.
            This is because there are situations where go does not get a return message (e.g. when robot is idle).
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the command has been transmitted successfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Say(System.String)">
            <summary>
            Makes the robot say the <paramref name="text"/>.
            </summary>
            <param name="text">The text to say.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred initializing saying <paramref name="text"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Say(System.String,System.String@)">
            <summary>
            Makes the robot say the <paramref name="text"/>.
            </summary>
            <param name="text">The text to say.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if saying <paramref name="text"/> was initialized successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.TerminateWaitTask(System.Boolean)">
            <summary>
            Terminates the wait task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the wait task.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.TerminateWaitTask(System.Boolean,System.String@)">
            <summary>
            Terminates the wait task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the wait task.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the wait task is terminated succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.TerminatePauseTask(System.Boolean)">
            <summary>
            Terminates the pause task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the pause task.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.TerminatePauseTask(System.Boolean,System.String@)">
            <summary>
            Terminates the pause task.
            </summary>
            <param name="success">Determines whether to succeed (<see langword="true"/>) or fail (<see langword="false"/>) the pause task.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the pause task is terminated succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SwitchForbidden(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Switches a forbidden line or area in the map on or off.
            </summary>
            <param name="name">The name of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="name"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SwitchForbidden(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch,System.String@)">
            <summary>
            Switches a forbidden line or area in the map on or off.
            </summary>
            <param name="name">The name of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="name"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SwitchForbiddenByPrefix(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Switches a forbidden line or area in the map on or off by using a prefix.
            </summary>
            <param name="prefix">The prefix of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="sw"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SwitchForbiddenByPrefix(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch,System.String@)">
            <summary>
            Switches a forbidden line or area in the map on or off by using a prefix.
            </summary>
            <param name="prefix">The prefix of the forbidden line or area.</param>
            <param name="sw">Determines whether to activate or deactivate <paramref name="sw"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed succcessfully; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Shutdown">
            <summary>
            Shuts the remote <see cref="T:Mobile.Communication.Common.Robot"/> down.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Shutdown(System.String@)">
            <summary>
            Shuts the remote <see cref="T:Mobile.Communication.Common.Robot"/> down.
            </summary>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the robot is shutting down; otherwise, <see langword="false"/>.
            If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateInputCollection">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.Inputs"/> with labels only.
            </summary>
            <returns>An array of input labels.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateInputCollection(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.Inputs"/> with labels only.
            </summary>
            <param name="labels">An array of input labels.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshInputCollection">
            <summary>
            Refreshes the list of inputs.
            </summary>
            <returns>The available inputs.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the input list.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshInputCollection(Mobile.Communication.Common.InputCollection@,System.String@)">
            <summary>
            Refreshes the list of inputs.
            </summary>
            <param name="inputs">The available inputs.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateOutputCollection">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.Outputs"/> with labels only.
            </summary>
            <returns>An array of output labels.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateOutputCollection(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.Outputs"/> with labels only.
            </summary>
            <param name="labels">An array of output labels.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of inputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshOutputCollection">
            <summary>
            Refreshes the list of outputs.
            </summary>
            <returns>The available outputs.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the output list.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshOutputCollection(Mobile.Communication.Common.OutputCollection@,System.String@)">
            <summary>
            Refreshes the list of outputs.
            </summary>
            <param name="outputs">The available outputs.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the list of outputs was refreshed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GetInputState(System.String)">
            <summary>
            Gets the state of an input.
            </summary>
            <param name="name">The name of the input.</param>
            <returns>The state of an input.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the input.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GetInputState(System.String,Mobile.Communication.Common.IO.Switch@,System.String@)">
            <summary>
            Gets the state of an input.
            </summary>
            <param name="name">The name of the input.</param>
            <param name="state">The state of the input.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GetOutputState(System.String)">
            <summary>
            Gets the state of an output.
            </summary>
            <param name="name">The name of the output.</param>
            <returns><see langword="true"/> if the output is set; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the output.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GetOutputState(System.String,Mobile.Communication.Common.IO.Switch@,System.String@)">
            <summary>
            Gets the state of an output.
            </summary>
            <param name="name">The name of the output.</param>
            <param name="state">The state of the output.
            <see langword="true"/> if the output is set; otherwise, <see langword="false"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the output was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SetOutput(System.String,Mobile.Communication.Common.IO.Switch)">
            <summary>
            Sets the state of an <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="state">The state of the <see cref="T:Mobile.Communication.Common.Output"/>. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposing.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="state"/> is <see cref="F:Mobile.Communication.Common.IO.Switch.Unknown"/>.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred updating the output.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.SetOutput(System.String,Mobile.Communication.Common.IO.Switch,System.String@)">
            <summary>
            Sets the state of an <see cref="T:Mobile.Communication.Common.Output"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.Output"/>.</param>
            <param name="state">The state of the <see cref="T:Mobile.Communication.Common.Output"/>. (<see cref="F:Mobile.Communication.Common.IO.Switch.On"/> or <see cref="F:Mobile.Communication.Common.IO.Switch.Off"/>).</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the state of the input was received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(Mobile.Communication.Common.Fault)">
            <summary>
            Sets an application fault.
            </summary>
            <param name="fault">The fault to set.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fault"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if name of <paramref name="fault"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="clearedOnAcknowledgement">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement
            (through MobileEyes/MobilePlanner/LynxTouchscreen).</param>
            <returns>The <see cref="T:Mobile.Communication.Common.Fault"/> as it has been set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> contains invalid characters.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred setting the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultSet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Mobile.Communication.Common.Fault@,System.String@)">
            <summary>
            Sets an application fault on the robot.
            </summary>
            <param name="name">The name of the fault.</param>
            <param name="shortDescription">A short description of the fault.</param>
            <param name="longDescription">A detailed description of the fault.</param>
            <param name="drivingFault">Determines whether this is a driving fault. If so, it will prevent the robot from moving.</param>
            <param name="criticalFault">Determines whether this is a critical fault. If so, it will will continue to show up 
            (in MobileEyes/MobilePlanner/Touchscreen) even if acknowledged.</param>
            <param name="clearedOnGo">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on "go" (Touchscreen, task, input, ARCL, ...).</param>
            <param name="clearedOnAcknowledgement">Determines whether this <see cref="T:Mobile.Communication.Common.Fault"/> is cleared on acknowledgement
            (through MobileEyes/MobilePlanner/LynxTouchscreen).</param>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> that has been set  -or- <see langword="null"/> if an error occurred.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been set successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultClear(System.String)">
            <summary>
            Clears an application fault by its name.
            </summary>
            <param name="name">The name of the application fault.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred clearing the <see cref="T:Mobile.Communication.Common.Fault"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ApplicationFaultClear(System.String,System.String@)">
            <summary>
            Clears an application fault by its name.
            </summary>
            <param name="name">The name of the application fault.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Communication.Common.Fault"/> has been cleared successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshFaults">
            <summary>
            Refreshes the faults of the robot.
            </summary>
            <returns>All faults actually set on the robot.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/>
            has already been disposed or is in the process of being disposed.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred getting the <see cref="T:Mobile.Communication.Common.Fault"/>s.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout specified by
            <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/> exceeds before a response has been received.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshFaults(Mobile.Communication.Common.Fault[]@,System.String@)">
            <summary>
            Refreshes the faults of the robot.
            </summary>
            <param name="faults">All faults actually set on the robot.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the all faults have been received successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateRangeDevices">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/> with names only.
            </summary>
            <returns>The names of the <see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.PopulateRangeDevices(System.String[]@,System.String@)">
            <summary>
            Populates the <see cref="P:Mobile.Communication.Common.Robot.Inputs"/> with labels only.
            </summary>
            <param name="deviceNames">The names of all <see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDevices">
            <summary>
            Refreshes the <see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/> by populating the dictionary and grabing data of all devices.
            </summary>
            <returns><see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDevices(Mobile.Core.DataStructure.ReadOnlyDictionary{System.String,Mobile.Communication.Common.RangeDevice}@,System.String@)">
            <summary>
            Refreshes the <see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/> by populating the dictionary and grabing data of all devices.
            </summary>
            <param name="rangeDevices"><see cref="P:Mobile.Communication.Common.Robot.RangeDevices"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDeviceCurrentReadings(System.String)">
            <summary>
            Refreshes the current readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <returns>The current readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDeviceCurrentReadings(System.String,Mobile.Core.DataStructure.ReadOnlyCollection{Mobile.Communication.Common.RangeDevice.Reading}@,System.String@)">
            <summary>
            Refreshes the current readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="readings">The current readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDeviceCumulativeReadings(System.String)">
            <summary>
            Refreshes the cumulative readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <returns>The cumulative readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshRangeDeviceCumulativeReadings(System.String,Mobile.Core.DataStructure.ReadOnlyCollection{Mobile.Communication.Common.RangeDevice.Reading}@,System.String@)">
            <summary>
            Refreshes the cumulative readings of a specified <see cref="T:Mobile.Communication.Common.RangeDevice"/>.
            </summary>
            <param name="deviceName">The name of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="readings">The cumulative readings of the <see cref="T:Mobile.Communication.Common.RangeDevice"/>.</param>
            <param name="error">A message describing the error. -or- <see cref="F:System.String.Empty"/> if no error occurred.</param>
            <returns><see langword="true"/> if the operation completed successfully;
            otherwise, <see langword="false"/>. If this is <see langword="false"/>, <paramref name="error"/> contains the error-message.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.QueueJob(Mobile.Communication.Common.Queuing.JobData)">
            <summary>
            Queues a dropoff-only job on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <param name="job">The job to queue.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is
            not connected to the server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.
             -or- an error occurred queuing a dropoff.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the server.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="job"/> is <see langword="null"/> or <see cref="F:Mobile.Communication.Common.Queuing.JobData.Empty"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Modify(System.String,Mobile.Communication.Common.Queuing.ModifcationType,System.Object)">
            <summary>
            Modifies a <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> specified by <paramref name="id"/>.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="type">The type of modification to apply to the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</param>
            <param name="value">The new value.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="type"/> is not valid.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if modifying failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Cancel(Mobile.Communication.Common.Queuing.CancelType,System.Object,System.String)">
            <summary>
            Cancels <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s or Jobs matching the given criteria.
            </summary>
            <param name="cancelType">The cancel type.</param>
            <param name="cancelValue">The cancel value.</param>
            <param name="cancelReason">The reason to cancel the job.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if <see cref="T:Mobile.Communication.Common.Robot"/> is in the process of disposing.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cancelValue"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="cancelType"/> is not valid.</exception>
            <exception cref="T:System.InvalidOperationException"> Thrown if the <see cref="T:Mobile.Communication.Common.Robot"/> is not connected.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the EnterpriseManager server.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if cancelling failed.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshSegments">
            <summary>
            Gets a collection of <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s containing all segments queued on the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
            <returns>The <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s queued on this <see cref="T:Mobile.Communication.Common.Robot"/>.</returns>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred getting <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>s.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/> server.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshSegment(System.String)">
            <summary>
            Updates all properties of a single <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.Segment"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.Segment"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.RefreshJob(System.String)">
            <summary>
            Updates a job queued on the remote object.
            </summary>
            <param name="id">The id of the <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> to update.</param>
            <returns>The updated <see cref="T:Mobile.Communication.Common.Queuing.JobData"/> queued on the remote object.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the remote object is not connected.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is in the process of disposing.</exception>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occurs while transmitting command.
             -or- if an error occurred updating <see cref="T:Mobile.Communication.Common.Queuing.JobData"/>.</exception>
            <exception cref="T:System.TimeoutException">Thrown if the timeout provided by <see cref="P:Mobile.Communication.Common.ArclBase.ResponseTimeout"/>
            has expired before a response has been received from the remote object.</exception>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.StatusChanged">
            <summary>
            This event is raised if the status of the robot has changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnStatusChanged(Mobile.Communication.Common.RobotStatus,Mobile.Communication.Common.RobotStatus)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.StatusChanged"/>.
            </summary>
            <param name="oldStatus">The old status of the robot.</param>
            <param name="newStatus">The new status of the robot.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.GoalReached">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has arrived at a goal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnGoalReached(System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.GoalReached"/>.
            </summary>
            <param name="goal">The goal at which the <see cref="T:Mobile.Communication.Common.Robot"/> has arrived.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.PatrolFinished">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has finished patrolling a route.
            Please note that this event will never be raised if the <see cref="T:Mobile.Communication.Common.Robot"/> is
            patrolling a route forever. As forever implies, it will never finish.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnPatrolFinished(System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.PatrolFinished"/>.
            </summary>
            <param name="route">The route which the <see cref="T:Mobile.Communication.Common.Robot"/> completed.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.ActionInterrupted">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has interrupted its current action.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnActionInterrupted(System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.ActionInterrupted"/>.
            </summary>
            <param name="action">The action the <see cref="T:Mobile.Communication.Common.Robot"/> has been interrupted.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.ActionFailed">
            <summary>
            This event is raised if the <see cref="T:Mobile.Communication.Common.Robot"/> has failed its current action.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnActionFailed(System.String)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.ActionFailed"/>.
            </summary>
            <param name="action">The action the <see cref="T:Mobile.Communication.Common.Robot"/> has failed.</param>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.IORestarting">
            <summary>
            An event raised once the IO begin restarting.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnIORestarting">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.IORestarting"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.IORestarted">
            <summary>
            An event raised once the IO have been restarted.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnIORestarted">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.IORestarted"/>.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Common.Robot.StatusOnEmChanged">
            <summary>
            An event raised when the status of the robot on the EM changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.OnStatusOnEmChanged(Mobile.Communication.Common.RobotStatusOnEnterpriseManager,Mobile.Communication.Common.RobotStatusOnEnterpriseManager)">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.Robot.StatusOnEmChanged"/>.
            </summary>
            <param name="oldStatusOnEm">The old status on EM.</param>
            <param name="newStatusOnEm">The new status on EM.</param>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Routes">
            <summary>
            Gets a read-only collection of routes.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshRoutes"/>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshRoutes(System.String[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Macros">
            <summary>
            Gets a read-only collection of macros.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshMacros"/>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshMacros(System.String[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.SwitchableForbiddens">
            <summary>
            Gets a read-only collection of switchable forbidden lines and areas.
            </summary>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshSwitchableForbiddens"/>
            <seealso cref="M:Mobile.Communication.Common.Robot.RefreshSwitchableForbiddens(Mobile.Communication.Common.SwitchableForbidden[]@,System.String@)"/>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.RangeDevices">
            <summary>
            Gets the read-only dictionary of range devices. The key is the name of the device.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Status">
            <summary>
            Gets some information about the <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.MotorStatus">
            <summary>
            Gets the status of the motors.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.StatusOnEnterprisemanager">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Robot"/>'s status on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Odometer">
            <summary>
            Gets the <see cref="T:Mobile.Communication.Common.Robot"/>'s odometer values.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Inputs">
            <summary>
            Gets all available inputs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Outputs">
            <summary>
            Gets all available outputs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.QueuingManager">
            <summary>
            Gets the QueuingManager to queue and manipulate jobs.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.Faults">
            <summary>
            Gets a read-only collection of faults.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Robot.EstimatedArrival">
            <summary>
            Gets an estimate of when the robot will arrive at the goal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ToString">
            <summary>
            Overridden from <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            Returns a Robot qualifier followed by the <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.ArclBase"/>.
            </summary>
            <returns>A Robot qualifier followed by the <see cref="T:System.String"/> representation of <see cref="T:Mobile.Communication.Common.ArclBase"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.Reset(Mobile.Communication.Common.ArclBase.ResetReason)">
            <summary>
            Resets all Member variables the <see cref="T:Mobile.Communication.Common.Robot"/> needs to communicate.
            Also relases all <see cref="T:System.Threading.Thread"/>s waiting for responses.
            </summary>
            <param name="reason">The reason of the reset.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.InterpretResponse(System.String)">
            <summary>
            Interprets a single response.
            </summary>
            <param name="line">The line/response to interpret.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.UpdateStatus(System.String)">
            <summary>
            Updates the status of the robot based on the specified string.
            </summary>
            <param name="valueArgs">The string to update the status.</param>
        </member>
        <member name="M:Mobile.Communication.Common.Robot.ParseFault(System.String)">
            <summary>
            Parses a fault.
            </summary>
            <param name="input">The string describing the fault.</param>
            <returns>The fault.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.RobotDataOnEm">
            <summary>
            A class representing the data of one robot accessable through an EnterpriseManager.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotDataOnEm"/>.
            </summary>
            <param name="robotName">The name of the robot.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.AddFault(Mobile.Communication.Common.Fault)">
            <summary>
            Adds a <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="fault">The fault to add.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.ClearFault(Mobile.Communication.Common.Fault)">
            <summary>
            Clears a <see cref="T:Mobile.Communication.Common.Fault"/>.
            </summary>
            <param name="fault">The <see cref="T:Mobile.Communication.Common.Fault"/> to clear.</param>
            <returns><see langword="true"/> if <paramref name="fault"/> has been cleared successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.ApplyStatus(Mobile.Communication.Common.StatusOnEnterpriseManager)">
            <summary>
            Sets the <see cref="P:Mobile.Communication.Common.RobotDataOnEm.Status"/>.
            </summary>
            <param name="status">The status to apply.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.ApplyTarget(Mobile.Communication.Common.Target)">
            <summary>
            Sets the <see cref="P:Mobile.Communication.Common.RobotDataOnEm.Target"/>.
            </summary>
            <param name="target">The target to apply.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.UpdateStatus">
            <summary>
            Updates the status of this robot.
            </summary>
            <returns>The current status of this robot.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.UpdateTarget">
            <summary>
            Updates the target of this robot.
            </summary>
            <returns>The current status of this robot.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.UpdateFaults">
            <summary>
            Updates the faults of this robot.
            </summary>
            <returns>An array containing all currently active faults on this robot.</returns>
        </member>
        <member name="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged">
            <summary>
            An event raised if the status of the robot on the EM changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.OnStatusChanged(Mobile.Communication.Common.Event.ValueEventArgs{Mobile.Communication.Common.StatusOnEnterpriseManager})">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="E:Mobile.Communication.Common.RobotDataOnEm.TargetChanged">
            <summary>
            An event raised if the status of the robot on the EM changes.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.RaiseTargetChanged(Mobile.Communication.Common.Event.ValueEventArgs{Mobile.Communication.Common.Target})">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.RobotDataOnEm.TargetChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.OnTargetChanged(Mobile.Communication.Common.Event.ValueEventArgs{Mobile.Communication.Common.Target})">
            <summary>
            Raises <see cref="E:Mobile.Communication.Common.RobotDataOnEm.TargetChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.RobotDataOnEm.StatusChanged"/> directly.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.SetCallback(System.Func{System.String,Mobile.Communication.Common.StatusOnEnterpriseManager})">
            <summary>
            Sets the callback to update the robot's status.
            </summary>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.SetCallback(System.Func{System.String,Mobile.Communication.Common.Target})">
            <summary>
            Sets the callback to update the robot's target.
            </summary>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:Mobile.Communication.Common.RobotDataOnEm.SetCallback(System.Func{System.String,Mobile.Communication.Common.Fault[]})">
            <summary>
            Sets the callback to update the faults on this robot.
            </summary>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="P:Mobile.Communication.Common.RobotDataOnEm.Name">
            <summary>
            The name of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotDataOnEm.Faults">
            <summary>
            Gets a collection of active <see cref="T:Mobile.Communication.Common.Fault"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotDataOnEm.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotDataOnEm.Target">
            <summary>
            Gets the robot's target.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatus">
            <summary>
            A class that contains some information about the status of a robot.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatus.RobotDockingState">
            <summary>
            A struct representing the docking state of a robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.SetChargeState(System.String)">
            <summary>
            Parses and sets the ChargeState.
            </summary>
            <param name="state">The string representation of the <see cref="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.ChargeState"/>.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if <paramref name="state"/> could not be parsed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="state"/> is null.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.SetDockState(System.String)">
            <summary>
            Parses and sets the DockState.
            </summary>
            <param name="state">The string representation of the <see cref="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.DockingState"/>.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if <paramref name="state"/> could not be parsed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="state"/> is null.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.SetForcedState(System.String)">
            <summary>
            Parses and sets the ChargeState.
            </summary>
            <param name="state">The string representation of the <see cref="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.DockingState"/>.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if <paramref name="state"/> could not be parsed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="state"/> is null.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> to an instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.
            <paramref name="state"/> needs to have the following format:
            "[INDICATOR]: [VALUE] [INDICATOR]: [VALUE] [INDICATOR]: [VALUE]".
            Indicators are : "DockingState", "ForcedState" and "ChargeState".
            </summary>
            <param name="state">The <see cref="T:System.String"/> to parse.</param>
            <returns>The instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> created from <paramref name="state"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.Equals(Mobile.Communication.Common.RobotStatus.RobotDockingState)">
            <summary>
            Indicates whether the current instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>
            is equal to another instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.
            </summary>
            <param name="other">The other <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> to compare to.</param>
            <returns><see langword="true"/> if <paramref name="other"/> represents the same value;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.Equals(System.Object)">
            <summary>
            Indicates whether the current instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>
            and a specified object are equal.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is of type <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>
            and represents the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.GetHashCode">
            <summary>
            Gets the hash code of the current instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.
            </summary>
            <returns>The hash code of the current instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> representation
            of this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> representation
            of this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.op_Equality(Mobile.Communication.Common.RobotStatus.RobotDockingState,Mobile.Communication.Common.RobotStatus.RobotDockingState)">
            <summary>
            Checks if two <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>s are equal to each other.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> to compare the second one to.</param>
            <param name="second">The second <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> to compare the first one with.</param>
            <returns>True if all values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.RobotDockingState.op_Inequality(Mobile.Communication.Common.RobotStatus.RobotDockingState,Mobile.Communication.Common.RobotStatus.RobotDockingState)">
            <summary>
            Checks if two <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/>s differ from each other.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> to compare the second one to.</param>
            <param name="second">The second <see cref="T:Mobile.Communication.Common.RobotStatus.RobotDockingState"/> to compare the first one with.</param>
            <returns>True if not all values are equal; otherwise, false.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.DockingState">
            <summary>
            Gets the Dock State.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.ForcedState">
            <summary>
            Gets the Forced State.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.RobotDockingState.ChargeState">
            <summary>
            Gets the Charge State.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatus.PausingState">
            <summary>
            A struct representing the PauseState of a robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.Parse(System.String)">
            <summary>
            Parses the string <paramref name="s"/> to an instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to parse.</param>
            <returns>A new instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is not in the correct format.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representation for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.GetHashCode">
            <summary>
            Gets the hash-code for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.
            </summary>
            <returns>The hash-code for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.Equals(System.Object)">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> equals <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality.</param>
            <returns><see langword="true"/> if this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> equals <paramref name="obj"/>;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.Equals(Mobile.Communication.Common.RobotStatus.PausingState)">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> equals <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> to check for equality.</param>
            <returns><see langword="true"/> if this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> equals <paramref name="other"/>;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.op_Equality(Mobile.Communication.Common.RobotStatus.PausingState,Mobile.Communication.Common.RobotStatus.PausingState)">
            <summary>
            Determines whether two instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> are equal.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</param>
            <returns><see langword="true"/> if both instances of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> equal eachother;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.PausingState.op_Inequality(Mobile.Communication.Common.RobotStatus.PausingState,Mobile.Communication.Common.RobotStatus.PausingState)">
            <summary>
            Determines whether two instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> are not equal.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/>.</param>
            <returns><see langword="true"/> if both instances of <see cref="T:Mobile.Communication.Common.RobotStatus.PausingState"/> differ from eachother;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.PausingState.State">
            <summary>
            Gets the state of the pause task.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.PausingState.Status">
            <summary>
            Gets the status the robot is pausing with.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatus.WaitingState">
            <summary>
            A struct representing the WaitState of a robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.Parse(System.String)">
            <summary>
            Parses the string <paramref name="s"/> to an instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to parse.</param>
            <returns>A new instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> parsed from <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is not in the correct format.</exception>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> representation for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.GetHashCode">
            <summary>
            Gets the hash-code for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.
            </summary>
            <returns>The hash-code for this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.Equals(System.Object)">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> equals <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality.</param>
            <returns><see langword="true"/> if this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> equals <paramref name="obj"/>;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.Equals(Mobile.Communication.Common.RobotStatus.WaitingState)">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> equals <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> to check for equality.</param>
            <returns><see langword="true"/> if this instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> equals <paramref name="other"/>;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.op_Equality(Mobile.Communication.Common.RobotStatus.WaitingState,Mobile.Communication.Common.RobotStatus.WaitingState)">
            <summary>
            Determines whether two instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> are equal.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</param>
            <returns><see langword="true"/> if both instances of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> equal eachother;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.WaitingState.op_Inequality(Mobile.Communication.Common.RobotStatus.WaitingState,Mobile.Communication.Common.RobotStatus.WaitingState)">
            <summary>
            Determines whether two instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> are not equal.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/>.</param>
            <returns><see langword="true"/> if both instances of <see cref="T:Mobile.Communication.Common.RobotStatus.WaitingState"/> differ from eachother;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.WaitingState.State">
            <summary>
            Gets the state of the wait task.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.WaitingState.RemainingTime">
            <summary>
            Gets the remaining time the robot is waiting.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.WaitingState.Status">
            <summary>
            Gets the status the robot is waiting with.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.Equals(Mobile.Communication.Common.RobotStatus)">
            <summary>
            Checks if a <see cref="T:Mobile.Communication.Common.RobotStatus"/> is equal to this one.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.RobotStatus"/> to compare this one to.</param>
            <returns>True if all values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.Equals(System.Object)">
            <summary>
            Overridden method <see cref="M:System.Object.Equals(System.Object)"/>.
            Checks if an <see cref="T:System.Object"/> is equal to this <see cref="T:Mobile.Communication.Common.RobotStatus"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare this <see cref="T:Mobile.Communication.Common.RobotStatus"/> to.</param>
            <returns>True if <paramref name="obj"/> is of of type <see cref="T:Mobile.Communication.Common.RobotStatus"/>
            and all values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.GetHashCode">
            <summary>
            Overridden method <see cref="M:System.Object.GetHashCode"/>.
            Gets the hash code of this <see cref="T:Mobile.Communication.Common.RobotStatus"/>.
            </summary>
            <returns>The hash code of this <see cref="T:Mobile.Communication.Common.RobotStatus"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.ToString">
            <summary>
            Returns <see cref="P:Mobile.Communication.Common.RobotStatus.ExtendedStatusForHumans"/>.
            </summary>
            <returns><see cref="P:Mobile.Communication.Common.RobotStatus.ExtendedStatusForHumans"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.op_Equality(Mobile.Communication.Common.RobotStatus,Mobile.Communication.Common.RobotStatus)">
            <summary>
            Checks if two <see cref="T:Mobile.Communication.Common.RobotStatus"/>es are equal to each other.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.RobotStatus"/> to compare the second one to.</param>
            <param name="second">The second <see cref="T:Mobile.Communication.Common.RobotStatus"/> to compare the first one with.</param>
            <returns>True if all values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatus.op_Inequality(Mobile.Communication.Common.RobotStatus,Mobile.Communication.Common.RobotStatus)">
            <summary>
            Checks if two <see cref="T:Mobile.Communication.Common.RobotStatus"/>es differ from each other.
            </summary>
            <param name="first">The <see cref="T:Mobile.Communication.Common.RobotStatus"/> to compare the second one to.</param>
            <param name="second">The second <see cref="T:Mobile.Communication.Common.RobotStatus"/> to compare the first one with.</param>
            <returns>True if not all values are equal; otherwise, false.</returns>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.Status">
            <summary>
            Gets the status of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.ExtendedStatusForHumans">
            <summary>
            Gets the extended status readable for humans.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.PauseState">
            <summary>
            Gets the pause state of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.WaitState">
            <summary>
            Gets the wait state of the robot.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.Location">
            <summary>
            Gets the location. (RobotLocation: X, Y, Orientation)
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.BatteryVoltage">
            <summary>
            Gets the voltage of the battery.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.StateOfCharge">
            <summary>
            Gets the state of charge of the battery.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.LocalizationScore">
            <summary>
            Gets the Localization Score (percentage).
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.Temperature">
            <summary>
            Gets the temperature.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatus.DockingState">
            <summary>
            Gets the docking state of the robot.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.SoftSignal">
            <summary>
            A struct representing a soft signal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.SoftSignal.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.SoftSignal"/>.
            </summary>
            <param name="name">The name of the SoftSignal block.</param>
            <param name="value">The value of the SoftSignal block.</param>
        </member>
        <member name="P:Mobile.Communication.Common.SoftSignal.Name">
            <summary>
            Gets the name of the SoftSignal block.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.SoftSignal.Value">
            <summary>
            Gets the value of the SoftSignal block.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.SoftSignal.ValueToArray(System.Collections.BitArray)">
            <summary>
            Fills <paramref name="signals"/> with the reverse bitwise encoding of <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/>.
            It is done in reverse as the first signal is the LSB.
            </summary>
            <param name="signals">The <see cref="T:System.Collections.BitArray"/> to fill in the reversed bitwise encoded <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.SoftSignal.ValueToArray">
            <summary>
            Returns a <see cref="T:System.Collections.BitArray"/> representation of <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/> as SoftSignals.
            The return value contains the reverse bitwise encoding of <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/>.
            It is done in reverse as the first signal is the LSB.
            </summary>
            <returns>The <see cref="T:System.Collections.BitArray"/> representation of <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/> as SoftSignals.
            It contains the reverse bitwise encoding of <see cref="P:Mobile.Communication.Common.SoftSignal.Value"/>.
            This is done in reverse as the first signal is the LSB.
            </returns>
        </member>
        <member name="T:Mobile.Communication.Common.StatusOnEnterpriseManager">
            <summary>
            A struct representing the status of the <see cref="T:Mobile.Communication.Common.Robot"/>
            on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.#ctor(Mobile.Communication.Common.RobotStatusOnEM,Mobile.Communication.Common.RobotSubStatusOnEM,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.
            </summary>
            <param name="main">The main status.</param>
            <param name="sub">The sub status</param>
            <param name="custom">The custom sub status.</param>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.#ctor(Mobile.Communication.Common.RobotStatusOnEM,Mobile.Communication.Common.RobotSubStatusOnEM)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.
            </summary>
            <param name="main">The main status.</param>
            <param name="sub">The sub status</param>
        </member>
        <member name="P:Mobile.Communication.Common.StatusOnEnterpriseManager.MainStatus">
            <summary>
            Gets the main status.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.StatusOnEnterpriseManager.SubStatus">
            <summary>
            Gets the sub status.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.StatusOnEnterpriseManager.CustomSubStatus">
            <summary>
            Gets the custom sub status.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.ToString">
            <summary>
            The string representation of the current status.
            "[MainStatus] [SubStatus]".
            </summary>
            <returns>The string representation of a <see cref="T:Mobile.Communication.Common.Robot"/>s status
            on an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.GetHashCode">
            <summary>
            Overrides the <see cref="M:System.ValueType.GetHashCode"/> method.
            </summary>
            <returns>The hashcode for this <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.Equals(System.Object)">
            <summary>
            Overrides the <see cref="M:System.ValueType.Equals(System.Object)"/> method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality with.</param>
            <returns>True if <paramref name="obj"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.Equals(Mobile.Communication.Common.StatusOnEnterpriseManager)">
            <summary>
            Checks if this <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/> equals another.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/> to check for equality with.</param>
            <returns>True if <paramref name="other"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.op_Equality(Mobile.Communication.Common.StatusOnEnterpriseManager,Mobile.Communication.Common.StatusOnEnterpriseManager)">
            <summary>
            Check for equality of two <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>es have the same values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.op_Inequality(Mobile.Communication.Common.StatusOnEnterpriseManager,Mobile.Communication.Common.StatusOnEnterpriseManager)">
            <summary>
            Check for inequality of two <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>es have different values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.StatusOnEnterpriseManager.Parse(System.String)">
            <summary>
            Parses a string that contains status information.
            String needs to look like "[MainStatus] [SubStatus]".
            </summary>
            <param name="s">The string representation of a <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</param>
            <returns>A new instance of <see cref="T:Mobile.Communication.Common.StatusOnEnterpriseManager"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager">
            <summary>
            A struct representing the status of a <see cref="T:Mobile.Communication.Common.Robot"/>
            on an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.#ctor(System.String,Mobile.Communication.Common.StatusOnEnterpriseManager)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.
            </summary>
            <param name="robotName">The name of the robot.</param>
            <param name="status">The status of the robot on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</param>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.Status">
            <summary>
            Gets the status of the robot on the EM.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.RobotName">
            <summary>
            Gets the name of the robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.ToString">
            <summary>
            Overrides the <see cref="M:System.ValueType.ToString"/> mehtod.
            </summary>
            <returns>The string representation of a <see cref="T:Mobile.Communication.Common.Robot"/>s status
            on the <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.GetHashCode">
            <summary>
            Overrides the <see cref="M:System.ValueType.GetHashCode"/> method.
            </summary>
            <returns>The hashcode for this <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.Equals(System.Object)">
            <summary>
            Overrides the <see cref="M:System.ValueType.Equals(System.Object)"/> method.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality with.</param>
            <returns>True if <paramref name="obj"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.Equals(Mobile.Communication.Common.RobotStatusOnEnterpriseManager)">
            <summary>
            Checks if this <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/> equals another.
            </summary>
            <param name="other">The <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/> to check for equality with.</param>
            <returns>True if <paramref name="other"/> has the same values as this
            <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.op_Equality(Mobile.Communication.Common.RobotStatusOnEnterpriseManager,Mobile.Communication.Common.RobotStatusOnEnterpriseManager)">
            <summary>
            Check for equality of two <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>es have the same values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.op_Inequality(Mobile.Communication.Common.RobotStatusOnEnterpriseManager,Mobile.Communication.Common.RobotStatusOnEnterpriseManager)">
            <summary>
            Check for inequality of two <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>es.
            </summary>
            <param name="first">The first <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</param>
            <param name="second">The first <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</param>
            <returns>True if both <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>es have different values; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotStatusOnEnterpriseManager.Parse(System.String)">
            <summary>
            Parses a string that contains status information.
            String needs to look like "[RobotName]: [Status]".
            </summary>
            <param name="s">The string representation of a <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</param>
            <returns>A new instance of <see cref="T:Mobile.Communication.Common.RobotStatusOnEnterpriseManager"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.SwitchableForbidden">
            <summary>
            This class represents a switchable forbidden line or area.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.SwitchableForbidden.Switch">
            <summary>
            The status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.SwitchableForbidden.Switch.Unknown">
            <summary>
            The status is not known.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.SwitchableForbidden.Switch.On">
            <summary>
            The <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> is active.
            This means that the robot will not trespass this line or area.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Common.SwitchableForbidden.Switch.Off">
            <summary>
            The <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> is inactive.
            This means that the robt can trespass this line or area.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.SwitchableForbidden.SwitchableForbiddenCallback">
            <summary>
            A callback to manipulate a <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
            <param name="nameOrPrefix">The name or prefix of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <param name="sw">The <see cref="T:Mobile.Communication.Common.SwitchableForbidden.Switch"/> to apply.</param>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbidden.#ctor(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch,Mobile.Communication.Common.SwitchableForbidden.SwitchableForbiddenCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <param name="status">The initial status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <param name="callback">The callback to modify the status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbidden.#ctor(System.String,Mobile.Communication.Common.SwitchableForbidden.Switch)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
            <param name="status">The initial status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.</param>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbidden.SetSwitchableForbiddenCallback(Mobile.Communication.Common.SwitchableForbidden.SwitchableForbiddenCallback)">
            <summary>
            Sets the callback to switch the state from this <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            <para />!!! Don't call this method on objects you that have not been created by the user !!!
            </summary>
            <param name="callback">The callback to call if <see cref="P:Mobile.Communication.Common.SwitchableForbidden.Status"/> is set.</param>
        </member>
        <member name="E:Mobile.Communication.Common.SwitchableForbidden.StatusChanged">
            <summary>
            The event signalling that the status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/> changed.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.SwitchableForbidden.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Communication.Common.SwitchableForbidden.StatusChanged"/> event.
            Raises <see cref="E:Mobile.Communication.Common.SwitchableForbidden.StatusChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Communication.Common.SwitchableForbidden.StatusChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Communication.Common.SwitchableForbidden.StatusChanged"/> directly.</param>
        </member>
        <member name="P:Mobile.Communication.Common.SwitchableForbidden.Name">
            <summary>
            The name of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.SwitchableForbidden.Status">
            <summary>
            The current status of the <see cref="T:Mobile.Communication.Common.SwitchableForbidden"/>.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Common.Target">
            <summary>
            This class represents a target of a robot.
            It contains the targeted goal as well as the remaining distance.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Target.#ctor">
            <summary>
            Initializes a new insteance of <see cref="T:Mobile.Communication.Common.Target"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Target.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.Target"/>.
            </summary>
            <param name="goal">The name of the targeted goal.</param>
            <param name="distance">The remaining distance towards the goal (in mm).</param>
        </member>
        <member name="P:Mobile.Communication.Common.Target.Goal">
            <summary>
            Gets the targeted goal.
            This will be an empty <see cref="T:System.String"/> if the robot already reached the goal.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Common.Target.RemainingDistance">
            <summary>
            Gets the distance reamining to the goal (in mm).
            This will be -1 if the robot already reached the goal.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.Target.ToString">
            <summary>
            Returns the string representation of this instance of <see cref="T:Mobile.Communication.Common.Target"/>.
            </summary>
            <returns>"[GOAL]" [TARGET]</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Target.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Target.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is of type <see cref="T:Mobile.Communication.Common.Target"/> and represents the same value; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.Target.Equals(Mobile.Communication.Common.Target)">
            <summary>
            Indicates whether the current object is equal to <paramref name="other"/>.
            </summary>
            <param name="other">A <see cref="T:Mobile.Communication.Common.Target"/> object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Common.RobotTarget">
            <summary>
            This class represents a target of a robot.
            It contains the targeted goal as well as the remaining distance and the robot's name.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotTarget"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Common.RobotTarget"/>.
            </summary>
            <param name="robotName">The name of the robot.</param>
            <param name="goal">The name of the targeted goal.</param>
            <param name="distance">The remaining distance towards the goal (in mm).</param>
        </member>
        <member name="P:Mobile.Communication.Common.RobotTarget.RobotName">
            <summary>
            Gets the name of the robot.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.ToString">
            <summary>
            Returns the string representation of this instance of <see cref="T:Mobile.Communication.Common.RobotTarget"/>.
            </summary>
            <returns>[ROBOTNAME]: [TARGET]</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is of type <see cref="T:Mobile.Communication.Common.RobotTarget"/> and represents the same value; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Communication.Common.RobotTarget.Equals(Mobile.Communication.Common.RobotTarget)">
            <summary>
            Indicates whether the current object is equal to <paramref name="other"/>.
            </summary>
            <param name="other">A <see cref="T:Mobile.Communication.Common.RobotTarget"/> object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to <paramref name="other"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Communication.Server.EnterpriseManagerServer">
            <summary>
            A class representing a server that can receive data from an <see cref="T:Mobile.Communication.Common.EnterpriseManager"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.#ctor(System.String,System.Collections.Generic.IList{System.Net.IPAddress},System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Server.EnterpriseManagerServer"/> class.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="addresses">The addresses to listen to.
            If this is <see langword="null"/> the server listens to all <see cref="T:System.Net.IPAddress"/>es.</param>
            <param name="port">The port the server listens to.</param>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This Constructor is used to deserialize the <see cref="T:Mobile.Communication.Server.EnterpriseManagerServer"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Server.EnterpriseManagerServer"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.InterpretResponse(System.String)">
            <summary>
            Interprets responses comming in.
            </summary>
            <param name="line">The <paramref name="line"/> that needs to be interpreted.</param>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.SendCommandToClient(System.String)">
            <summary>
            Sends the <paramref name="command"/> to the client.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.</exception>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.SendCommand(System.String)">
            <summary>
            Sends a command to the robot client.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.IsAlive">
            <summary>
            Gets or sets whether the server is alive.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.StartServer">
            <summary>
            Start listening for incomming connections.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.StopServer">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.ListenTo(System.Collections.Generic.IList{System.Net.IPAddress},System.Int32)">
            <summary>
            Starts listening for incoming connection requests on a specified local ip-address and port number.
            </summary>
            <param name="addresses">The local <see cref="T:System.Net.IPAddress"/>es to listen to.</param>
            <param name="port">The port to listen to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the server is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is already disposed
            or is in the process of disposing right now.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="addresses"/> is null
            or does not contain any elements.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.ListenTo(System.Int32)">
            <summary>
            Starts listening for incoming connection requests on a specified port on all local ip-addresses.
            </summary>
            <param name="port">The port to listen to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the server is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is already disposed
            or is in the process of disposing right now.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="E:Mobile.Communication.Server.EnterpriseManagerServer.ConnectionAccepted">
            <summary>
            An event raised if a client connection has been accepted.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.OnConnectionAccepted">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Server.EnterpriseManagerServer.ConnectionAccepted"/> event.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Server.EnterpriseManagerServer.ConnectionLost">
            <summary>
            An event raised if a client connection has been lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.EnterpriseManagerServer.OnConnectionLost">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Server.EnterpriseManagerServer.ConnectionLost"/> event.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.Listening">
            <summary>
            Gets whether the server is listening to connection requests.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.Connected">
            <summary>
            Gets whether at least one client is connected to the server.
            This implies that the server is listening for clients.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.LogDirectory">
            <summary>
            Gets or sets the folder the logfiles for each connection
            are created in.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.LogFileBaseName">
            <summary>
            Gets or sets the base name of the logfiles for each connection.
            ('LogFileBaseName1.txt', 'LogFileBaseName2.txt', ...)
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.Addresses">
            <summary>
            Gets or sets the local IP-Addresses the server listens to.
            If this is <see langword="null"/> the server listens to all <see cref="T:System.Net.IPAddress"/>es.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.EnterpriseManagerServer.Port">
            <summary>
            Gets or sets the port the server listens to.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.ErrorCodes">
            <summary>
            The codes to errors that may occurr while working with mobile server objects.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.ErrorCodes.ServerBase">
            <summary>
            ErrorCodes used by <see cref="T:Mobile.Communication.Server.ErrorCodes.ServerBase"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Server.ErrorCodes.ServerBase.Starting_Server_Error">
            <summary>
            An error occurred while starting the <see cref="T:Mobile.Networking.TelnetServer"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Server.ErrorCodes.ServerBase.Stopping_Server_Error">
            <summary>
            An error occurred while stopping the <see cref="T:Mobile.Networking.TelnetServer"/>.
            </summary>
        </member>
        <member name="F:Mobile.Communication.Server.ErrorCodes.ServerBase.NoClientConnected">
            <summary>
            There is no client connected to the server.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.ErrorMessages.NoClientConnected">
            <summary>
              Looks up a localized string similar to There is no client connected to the server..
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.ErrorMessages.ServerAlreadyRunning">
            <summary>
              Looks up a localized string similar to The server is already running..
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.IArclServerBase">
            <summary>
            An interface for an ARCL client object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.IEnterpriseManagerServer">
            <summary>
            An interface for an EnterpriseManager server object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.IRobotServer">
            <summary>
            An interface for an ARCL server object.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.ServerBaseEventHandler">
            <summary>
            Represents a method that will handle an event fired by <see cref="T:Mobile.Communication.Server.IServerBase"/>
            which has no specified type of arguments.
            </summary>
            <param name="server">The <see cref="T:Mobile.Communication.Server.IServerBase"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Server.ServerBaseEventHandler`1">
            <summary>
            Represents a method that will handle an event fired by <see cref="T:Mobile.Communication.Server.IServerBase"/>
            which does have a specified type of arguments.
            </summary>
            <typeparam name="TArguments">The <see cref="T:System.Type"/> of the event data generated
            by the firing event.</typeparam>
            <param name="server">The <see cref="T:Mobile.Communication.Server.IServerBase"/> firing the event.</param>
            <param name="args">The argument that contains the data the event is fired with.</param>
        </member>
        <member name="T:Mobile.Communication.Server.IServerBase">
            <summary>
            An interface for all server objects.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.IServerBase.StartServer">
            <summary>
            Start listening for incomming connections.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.IServerBase.StopServer">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.IServerBase.ListenTo(System.Collections.Generic.IList{System.Net.IPAddress},System.Int32)">
            <summary>
            Sets the IP-Addresses and port to listen to and starts the server.
            </summary>
            <param name="addresses">The <see cref="T:System.Net.IPAddress"/>es to listen to.</param>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="M:Mobile.Communication.Server.IServerBase.ListenTo(System.Int32)">
            <summary>
            Sets the port to listen on and starts the server.
            </summary>
            <param name="port">The port to listen on.</param>
        </member>
        <member name="E:Mobile.Communication.Server.IServerBase.ConnectionAccepted">
            <summary>
            An event raised if a client connection has been accepted.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Server.IServerBase.ConnectionLost">
            <summary>
            An event raised if a client connection has been lost.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.Listening">
            <summary>
            Gets whether the server is listening to connection requests.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.Connected">
            <summary>
            Gets whether at least one client is connected to the server.
            This implies that the server is listening for clients.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.LogDirectory">
            <summary>
            Gets or sets the folder the logfiles for each connection
            are created in.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.LogFileBaseName">
            <summary>
            Gets or sets the base name of the logfiles for each connection.
            ('LogFileBaseName1.txt', 'LogFileBaseName2.txt', ...)
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.Addresses">
            <summary>
            Gets or sets the local IP-Addresses the server listens to.
            If this is <see langword="null"/> the server listens to all <see cref="T:System.Net.IPAddress"/>es.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.IServerBase.Port">
            <summary>
            Gets or sets the port the server listens to.
            </summary>
        </member>
        <member name="T:Mobile.Communication.Server.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Communication.Server"/> namespace contains objects that can be used to communicate with an ARCL client.
            Use these objects if you set the remote object up to use an outgoing ARCL connection.
            </summary>
            <seealso cref="N:Mobile.Communication.Client"/>
        </member>
        <member name="T:Mobile.Communication.Server.RobotServer">
            <summary>
            A class representing a server that can receive data from a <see cref="T:Mobile.Communication.Common.Robot"/>.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.#ctor(System.String,System.Collections.Generic.IList{System.Net.IPAddress},System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Communication.Server.RobotServer"/> class
            setting ip-addresses and port to listen to.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="addresses">The addresses to listen to.
            If this is <see langword="null"/> the server listens to all <see cref="T:System.Net.IPAddress"/>es.</param>
            <param name="port">The port to listen to.</param>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This Constructor is used to deserialize the <see cref="T:Mobile.Communication.Server.RobotServer"/>.
            </summary>
            <param name="info">Stores all data needed to deserialize the <see cref="T:Mobile.Communication.Server.RobotServer"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.InterpretResponse(System.String)">
            <summary>
            Interprets responses comming in.
            </summary>
            <param name="line">The <paramref name="line"/> that needs to be interpreted.</param>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.SendCommandToClient(System.String)">
            <summary>
            Sends the <paramref name="command"/> to the client.
            </summary>
            <param name="command">The command to send.</param>
            <exception cref="T:Mobile.Communication.Common.MobileException">Thrown if an error occured while encoding or transmitting data.</exception>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.SendCommand(System.String)">
            <summary>
            Sends a command to the robot client.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.IsAlive">
            <summary>
            Gets or sets whether the server is alive.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.StartServer">
            <summary>
            Start listening for incomming connections.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.StopServer">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.ListenTo(System.Collections.Generic.IList{System.Net.IPAddress},System.Int32)">
            <summary>
            Starts listening for incoming connection requests on a specified local ip-address and port number.
            </summary>
            <param name="addresses">The local <see cref="T:System.Net.IPAddress"/>es to listen to.</param>
            <param name="port">The port to listen to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the server is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is already disposed
            or is in the process of disposing right now.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="addresses"/> is null
            or does not contain any elements.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.ListenTo(System.Int32)">
            <summary>
            Starts listening for incoming connection requests on a specified port on all local ip-addresses.
            </summary>
            <param name="port">The port to listen to.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the server is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is already disposed
            or is in the process of disposing right now.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between
            <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.</exception>
        </member>
        <member name="E:Mobile.Communication.Server.RobotServer.ConnectionAccepted">
            <summary>
            An event raised if a client connection has been accepted.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.OnConnectionAccepted">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Server.RobotServer.ConnectionAccepted"/> event.
            </summary>
        </member>
        <member name="E:Mobile.Communication.Server.RobotServer.ConnectionLost">
            <summary>
            An event raised if a client connection has been lost.
            </summary>
        </member>
        <member name="M:Mobile.Communication.Server.RobotServer.OnConnectionLost">
            <summary>
            Raises the <see cref="E:Mobile.Communication.Server.RobotServer.ConnectionLost"/> event.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.Listening">
            <summary>
            Gets whether the server is listening to connection requests.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.Connected">
            <summary>
            Gets whether at least one client is connected to the server.
            This implies that the server is listening for clients.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.LogDirectory">
            <summary>
            Gets or sets the folder the logfiles for each connection
            are created in.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.LogFileBaseName">
            <summary>
            Gets or sets the base name of the logfiles for each connection.
            ('LogFileBaseName1.txt', 'LogFileBaseName2.txt', ...)
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.Addresses">
            <summary>
            Gets or sets the local IP-Addresses the server listens to.
            If this is <see langword="null"/> the server listens to all <see cref="T:System.Net.IPAddress"/>es.
            </summary>
        </member>
        <member name="P:Mobile.Communication.Server.RobotServer.Port">
            <summary>
            Gets or sets the port the server listens to.
            </summary>
        </member>
    </members>
</doc>
