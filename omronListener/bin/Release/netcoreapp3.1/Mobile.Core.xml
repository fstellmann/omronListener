<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mobile.Core</name>
    </assembly>
    <members>
        <member name="T:Mobile.Core.Attributes.LocalizedCategoryAttribute">
            <summary>
            Specifies the localizable name of the category in which to group the property or event when displayed in a System.Windows.Forms.PropertyGrid control set to Categorized mode.
            </summary>
        </member>
        <member name="M:Mobile.Core.Attributes.LocalizedCategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.Attributes.LocalizedCategoryAttribute"/> using the specified resource type to lookup <paramref name="key"/> as a category.
            </summary>
            <param name="resourceType">The type of the resource to use as a lookup.</param>
            <param name="key">The key to look up in <paramref name="resourceType"/>.</param>
            <example>
            This sample shows how to use the <see cref="T:Mobile.Core.Attributes.LocalizedCategoryAttribute"/>.
            <code>
            public class MyClass {
            
            	[LocalizedDisplayName(typeof(UI_Elements), "TestProperty_DisplayName")]
            	[LocalizedCategory(typeof(UI_Elements), "TestProperty_Category")]
            	[LocalizedDescription(typeof(UI_Elements), "TestProperty_Description")]
            	public object TestProperty {
            		get;
            		set;
            	}
            
            }
            </code>
            In this case UI_Elements is the resource that is being used.
            This file has to contain string elements named TestProperty_DisplayName, TestProperty_Category and TestProperty_Description.
            </example>
        </member>
        <member name="T:Mobile.Core.Attributes.LocalizedDescriptionAttribute">
            <summary>
            Specifies a localizable description for a property or event.
            </summary>
        </member>
        <member name="M:Mobile.Core.Attributes.LocalizedDescriptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.Attributes.LocalizedDescriptionAttribute"/> using the specified resource type to lookup <paramref name="key"/> as a description.
            </summary>
            <param name="resourceType">The type of the resource to use as a lookup.</param>
            <param name="key">The key to look up in <paramref name="resourceType"/>.</param>
            <example>
            This sample shows how to use the <see cref="T:Mobile.Core.Attributes.LocalizedDescriptionAttribute"/>.
            <code>
            public class MyClass {
            
            	[LocalizedDisplayName(typeof(UI_Elements), "TestProperty_DisplayName")]
            	[LocalizedCategory(typeof(UI_Elements), "TestProperty_Category")]
            	[LocalizedDescription(typeof(UI_Elements), "TestProperty_Description")]
            	public object TestProperty {
            		get;
            		set;
            	}
            
            }
            </code>
            In this case UI_Elements is the resource that is being used.
            This file has to contain string elements named TestProperty_DisplayName, TestProperty_Category and TestProperty_Description.
            </example>
        </member>
        <member name="T:Mobile.Core.Attributes.LocalizedDisplayNameAttribute">
            <summary>
            Specifies the localized display name for a property, event, or public void method which takes no arguments.
            </summary>
        </member>
        <member name="M:Mobile.Core.Attributes.LocalizedDisplayNameAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.Attributes.LocalizedDisplayNameAttribute"/> using the specified resource type to lookup <paramref name="key"/> as a display name.
            </summary>
            <param name="resourceType">The type of the resource to use as a lookup.</param>
            <param name="key">The key to look up in <paramref name="resourceType"/>.</param>
            <example>
            This sample shows how to use the <see cref="T:Mobile.Core.Attributes.LocalizedDisplayNameAttribute"/>.
            <code>
            public class MyClass {
            
            	[LocalizedDisplayName(typeof(UI_Elements), "TestProperty_DisplayName")]
            	[LocalizedCategory(typeof(UI_Elements), "TestProperty_Category")]
            	[LocalizedDescription(typeof(UI_Elements), "TestProperty_Description")]
            	public object TestProperty {
            		get;
            		set;
            	}
            
            }
            </code>
            In this case UI_Elements is the resource that is being used.
            This file has to contain string elements named TestProperty_DisplayName, TestProperty_Category and TestProperty_Description.
            </example>
        </member>
        <member name="T:Mobile.Core.Converter.IPAddressConverter">
            <summary>
            A class implementing a <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.Net.IPAddress"/>es.
            </summary>
        </member>
        <member name="M:Mobile.Core.Converter.IPAddressConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to an <see cref="T:System.Net.IPAddress"/>, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Converter.IPAddressConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Converter.IPAddressConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to an <see cref="T:System.Net.IPAddress"/>,
            using the specified <paramref name="context"/> and <paramref name="culture"/> information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Net.IPAddress"/> that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Mobile.Core.Converter.IPAddressConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given <paramref name="value"/> object to the specified type,
            using the specified <paramref name="context"/> and <paramref name="culture"/> information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>.</returns>
        </member>
        <member name="T:Mobile.Core.Converter.IPEndPointConverter">
            <summary>
            A class implementing a <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.Net.IPEndPoint"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Core.Converter.IPEndPointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to an <see cref="T:System.Net.IPEndPoint"/>, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Converter.IPEndPointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Converter.IPEndPointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to an <see cref="T:System.Net.IPEndPoint"/>,
            using the specified <paramref name="context"/> and <paramref name="culture"/> information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Net.IPAddress"/> that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Mobile.Core.Converter.IPEndPointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given <paramref name="value"/> object to the specified type,
            using the specified <paramref name="context"/> and <paramref name="culture"/> information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted <paramref name="value"/>.</returns>
        </member>
        <member name="T:Mobile.Core.Converter.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Core.Converter"/> namespace contains <see cref="T:System.ComponentModel.TypeConverter"/> implementations used throughout mobile projects.
            </summary>
        </member>
        <member name="T:Mobile.Core.Cryptography">
            <summary>
            A static class for Encryption and Decryption (of strings)
            </summary>
        </member>
        <member name="M:Mobile.Core.Cryptography.Encrypt(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encrpyts a string by using a password.
            </summary>
            <param name="plainText">The string to encrypt.</param>
            <param name="passPhrase">The password to encrypt with.</param>
            <param name="keySize">The keysize of the encryption algorithm (in bytes).</param>
            <param name="derivationIterations">The number of iterations for the password bytes generation function.</param>
            <param name="blockSize">The block size to use for the encryption algorithm.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Mobile.Core.Cryptography.Decrypt(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Decrypts a string by using a password.
            </summary>
            <param name="cipherText">The encrypted string.</param>
            <param name="passPhrase">The password to decrypt with.</param>
            <param name="keySize">The keysize of the encryption algorithm (in bytes).</param>
            <param name="derivationIterations">The number of iterations for the password bytes generation function.</param>
            <param name="blockSize">The block size to use for the decryption algorithm.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="T:Mobile.Core.DataStructure.IFilter`1">
            <summary>
            An interface for a filter, typically used for filtering lists.
            </summary>
            <typeparam name="T">The type of the objects to accept.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.IFilter`1.Accept(`0)">
            <summary>
            Determine whether the specified object is accepted by the filter.
            </summary>
            <param name="item">The item to test.</param>
            <returns>
            true if the object is accepted; otherwise, false.
            </returns>
        </member>
        <member name="T:Mobile.Core.DataStructure.Map`2">
            <summary>
            A class representing a mapping for objects.
            </summary>
            <typeparam name="TFirst">The first type to map.</typeparam>
            <typeparam name="TSecond">The second type to map.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            setting the initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
            <param name="comparerFirst">An equality comparer for the first object type stored in this map.</param>
            <param name="comparerSecond">An equality comparer for the second object type stored in this map.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            setting the initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.</param>
            <param name="comparerFirst">An equality comparer for the first object type stored in this map.</param>
            <param name="comparerSecond">An equality comparer for the second object type stored in this map.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.Reset(System.Int32)">
            <summary>
            Resets the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
            <param name="size">The number of elements to be able to store.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.Expand">
            <summary>
            Expands the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            Able to store twice as many elements as before.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.ComputeHash1(`0)">
            <summary>
            Computes the hash index for <paramref name="item"/>.
            </summary>
            <param name="item">The item to compute the hash index for <paramref name="item"/>.</param>
            <returns>The hash index of <paramref name="item"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.ComputeHash2(`1)">
            <summary>
            Computes the hash index for <paramref name="item"/>.
            </summary>
            <param name="item">The item to compute the hash index for <paramref name="item"/>.</param>
            <returns>The hash index of <paramref name="item"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.Add(Mobile.Core.DataStructure.MapEntry{`0,`1})">
            <summary>
            Adds an entry to the storage.
            No sanity checks are performed!
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.GetIndexByFirst(`0)">
            <summary>
            Gets the index of the element of <paramref name="first"/>.
            </summary>
            <param name="first">The element to search for.</param>
            <returns>The index of the element of <paramref name="first"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.GetIndexBySecond(`1)">
            <summary>
            Gets the index of the element of <paramref name="second"/>.
            </summary>
            <param name="second">The element to search for.</param>
            <returns>The index of the element of <paramref name="second"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="second"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at <paramref name="index"/>.
            </summary>
            <param name="index">The index.</param>
            <returns><see langword="true"/> if the element was removed successfully.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.Map`2.Item(`0)">
            <summary>
            Gets the element mapped to <paramref name="key"/>.
            The element is identified by the first part of the mapping.
            </summary>
            <param name="key">The key of the mapped value.</param>
            <returns>The element mapped to <paramref name="key"/>
             -or- <see langword="null"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.Map`2.Item(`1)">
            <summary>
            Gets the element mapped to <paramref name="key"/>.
            The element is identified by the second part of the mapping.
            </summary>
            <param name="key">The key of the mapped value.</param>
            <returns>The element mapped to <paramref name="key"/>
             -or- <see langword="null"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.GetByFirst(`0)">
            <summary>
            Gets the element mapped to <paramref name="key"/>.
            The element is identified by the first part of the mapping.
            </summary>
            <param name="key">The key of the mapped value.</param>
            <returns>The element mapped to <paramref name="key"/>
             -or- <see langword="null"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.GetBySecond(`1)">
            <summary>
            Gets the element mapped to <paramref name="key"/>.
            The element is identified by the second part of the mapping.
            </summary>
            <param name="key">The key of the mapped value.</param>
            <returns>The element mapped to <paramref name="key"/>
             -or- <see langword="null"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.ContainsFirst(`0)">
            <summary>
            Determines whether an element is part of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            identifying the element by the first part of the mapping.
            </summary>
            <param name="key">The key of the element.</param>
            <returns><see langword="true"/> if the element is part of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.ContainsSecond(`1)">
            <summary>
            Determines whether an element is part of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            identifying the element by the second part of the mapping.
            </summary>
            <param name="key">The key of the element.</param>
            <returns><see langword="true"/> if the element is part of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.Add(`0,`1)">
            <summary>
            Adds a new mapping of <paramref name="first"/> and <paramref name="second"/>
            to the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
            <param name="first">The first of the elements mapped to each other.</param>
            <param name="second">The second of the elements mapped to each other.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/>
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="first"/> or <paramref name="second"/>
            is already mapped (part of this instance of <see cref="T:Mobile.Core.DataStructure.Map`2"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.RemoveByFirst(`0)">
            <summary>
            Removes an element from the <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            identifying the element to remove by the first part of the mapping.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.RemoveBySecond(`1)">
            <summary>
            Removes an element from the <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            identifying the element to remove by the second part of the mapping.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.
            This method also returns <see langword="false"/> if <paramref name="key"/> was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.Map`2.Capacity">
            <summary>
            Gets the capacity of this <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.Clear">
            <summary>
            Clears the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.CopyTo(Mobile.Core.DataStructure.MapEntry{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.Map`2"/>
             to <paramref name="array"/>, starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination
            of the elements copied from <see cref="T:Mobile.Core.DataStructure.Map`2"/>. The <see cref="T:System.Array"/>
            must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in <see cref="T:Mobile.Core.DataStructure.Map`2"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.Map`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.Map`2.GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the
            <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="T:Mobile.Core.DataStructure.MapEntry`2">
            <summary>
            A struct representing an entry in a <see cref="T:Mobile.Core.DataStructure.Map`2"/>.
            </summary>
            <typeparam name="TFirst">The first type of objects.</typeparam>
            <typeparam name="TSecond">The second type of objects.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.
            </summary>
            <param name="first">The first element.</param>
            <param name="second">The second element.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.Equals(Mobile.Core.DataStructure.MapEntry{`0,`1})">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>
            equals <paramref name="other"/>.
            </summary>
            <param name="other">The other instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/> to check for equality with.</param>
            <returns><see langword="true"/> if <paramref name="other"/> equals the curent instance of
            <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.Equals(System.Object)">
            <summary>
            Determines whether this instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>
            equals another <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to check for equality with.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> equals the curent instance of
            <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.GetHashCode">
            <summary>
            Gets the hash-code of the current instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.
            </summary>
            <returns>The hash-code of the current instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.MapEntry`2.First">
            <summary>
            Gets the first of the elements mapped to each other.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.MapEntry`2.Second">
            <summary>
            Gets the second of the elements mapped to each other.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.op_Equality(Mobile.Core.DataStructure.MapEntry{`0,`1},Mobile.Core.DataStructure.MapEntry{`0,`1})">
            <summary>
            Determines whether two instances of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/> are equal to each other.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.</param>
            <returns><see langword="true"/> if <paramref name="first"/> equals <paramref name="second"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.MapEntry`2.op_Inequality(Mobile.Core.DataStructure.MapEntry{`0,`1},Mobile.Core.DataStructure.MapEntry{`0,`1})">
            <summary>
            Determines whether two instances of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/> differ from each other.
            </summary>
            <param name="first">The first instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.</param>
            <param name="second">The second instance of <see cref="T:Mobile.Core.DataStructure.MapEntry`2"/>.</param>
            <returns><see langword="true"/> if <paramref name="first"/> differs from <paramref name="second"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Mobile.Core.DataStructure.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Core.DataStructure"/> namespace contains datastructures (mostly thread-safe) used throughout the Mobile projects.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.ReadOnlyCollection`1">
            <summary>
            A generic read-only wrapper for collections.
            Implicitly implements <see cref="T:System.Collections.Generic.IList`1"/> (with <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.IEnumerable"/>) and <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            Modifying methods are implemented explicitly and will throw <see cref="T:System.NotSupportedException"/>s as this collection is read-only.
            Also implements <see cref="T:System.Collections.IList"/> (with <see cref="T:System.Collections.ICollection"/> and <see cref="T:System.Collections.IEnumerable"/>) explicitly.
            </summary>
            <typeparam name="T">The type of elements stored in this collection.</typeparam>
            <example>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            <code>
            public void iterate(ReadOnlyCollection&lt;T&gt; collection) {
            
            	// Checks whether the collection is synchronized
            	if (((System.Collections.ICollection) collection).IsSynchronized) {
            		
            		// Locks the collection
            		lock (((System.Collections.ICollection) collection).SyncRoot) {
            		
            			// Iterate
            			foreach (T item in collection) {
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		foreach (T item in collection) {
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> using the indexer.
            <code>
            public void iterate(ReadOnlyCollection&lt;T&gt; collection) {
            
            	// Checks whether the collection is synchronized
            	if (((System.Collections.ICollection) collection).IsSynchronized) {
            		
            		// Locks the collection
            		lock (((System.Collections.ICollection) collection).SyncRoot) {
            		
            			// Iterate
            			for (int i = 0; i &lt; collection.Count; i++) {
            				T item = collection[i];
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		for (int i = 0; i &lt; collection.Count; i++) {
            			T item = collection[i];
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            </summary>
            <param name="collection">The collection to initialize this collection with.</param>
            <param name="copyElements">Determines whether the elements are copied to a local storage (<see langword="true"/>) or
            if the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> acts as a read-only wrapper for <paramref name="collection"/> (<see langword="false"/>).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of the specific <paramref name="item"/> in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.</param>
            <returns>The index of <paramref name="item"/> if found in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>; otherwise, -1.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the element to get.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if trying to set an element.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index
            in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.</exception>
            <example>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> using the indexer.
            <code>
            public void Iterate(ReadOnlyCollection{T} collection) {
            
            	// Checks whether the collection is synchronized
            	if (((System.Collections.ICollection) collection).IsSynchronized) {
            		
            		// Locks the collection
            		lock (((System.Collections.ICollection) collection).SyncRoot) {
            		
            			// Iterate
            			for (int i = 0; i &lt; collection.Count; i++) {
            				T item = collection[i];
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		for (int i = 0; i &lt; collection.Count; i++) {
            			T item = collection[i];
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> to an array,
            starting at a particular array index.
            </summary>
            <param name="array">The array that is the destination of the elements.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/> is read-only.
            <see langword="true"/> in this case.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.</returns>
            <example>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyCollection`1"/>.
            <code>
            public void Iterate(ReadOnlyCollection{T} collection) {
            
            	// Checks whether the collection is synchronized
            	if (((System.Collections.ICollection) collection).IsSynchronized) {
            		
            		// Locks the collection
            		lock (((System.Collections.ICollection) collection).SyncRoot) {
            		
            			// Iterate
            			foreach (T item in collection) {
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		foreach (T item in collection) {
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="E:Mobile.Core.DataStructure.ReadOnlyCollection`1.CollectionChanged">
            <summary>
            An event that is raised when the unterlying collection changed.
            This will only work if the underlying collection is observable.
            To check whether this event is raised can be checked by the <see cref="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.IsObservable"/> property.
            </summary>
            <seealso cref="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.IsObservable"/>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyCollection`1.IsObservable">
            <summary>
            Determines whether this collection can be observed.
            If this is <see langword="true"/>, the <see cref="E:Mobile.Core.DataStructure.ReadOnlyCollection`1.CollectionChanged"/> event will be raised.
            </summary>
            <seealso cref="E:Mobile.Core.DataStructure.ReadOnlyCollection`1.CollectionChanged"/>
        </member>
        <member name="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2">
            <summary>
            A generic read-only wrapper for dictionaries.
            Implicitly implements <see cref="T:System.Collections.Generic.IDictionary`2"/>
            (with <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> and <see cref="T:System.Collections.IEnumerable"/>)
            and <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            Modifying methods are implemented explicitly and will throw <see cref="T:System.NotSupportedException"/>s as this collection is read-only.
            Also implements <see cref="T:System.Collections.IDictionary"/> (with <see cref="T:System.Collections.ICollection"/> and <see cref="T:System.Collections.IEnumerable"/>) explicitly.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <example>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            <code>
            public void iterate(ReadOnlyDictionary&lt;TKey, TValue&gt; dictionary) {
            
            	// Checks whether the dictionary is synchronized
            	if (((System.Collections.ICollection) dictionary).IsSynchronized) {
            		
            		// Locks the dictionary
            		lock (((System.Collections.ICollection) dictionary).SyncRoot) {
            		
            			// Iterate
            			foreach (KeyValuePair&lt;TKey, TValue&gt; item in dictionary) {
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		foreach (KeyValuePair&lt;TKey, TValue&gt; item in dictionary) {
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            Alternativley
            </example>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            </summary>
            <param name="collection">The dictionary to initialize this collection with.</param>
            <param name="copyElements">Determines whether the elements are copied to a local storage (<see langword="true"/>) or
            if the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/> acts as a read-only wrapper for <paramref name="collection"/> (<see langword="false"/>).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyDictionary`2.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
            <paramref name="key"/> does not exist in the collection.</exception>
            <exception cref="T:System.NotSupportedException">Trying to set a value.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/> contains an element
            with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified
            key, if the <paramref name="key"/> is found; otherwise, the default value for the type of the
            value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/> contains an
            element with the specified <paramref name="key"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.</returns>
            <example>
            This sample shows how to safely iterate through a <see cref="T:Mobile.Core.DataStructure.ReadOnlyDictionary`2"/>.
            <code>
            public void iterate(ReadOnlyDictionary&lt;TKey, TValue&gt; collection) {
            
            	// Checks whether the collection is synchronized
            	if (((System.Collections.ICollection) collection).IsSynchronized) {
            		
            		// Locks the collection
            		lock (((System.Collections.ICollection) collection).SyncRoot) {
            		
            			// Iterate
            			foreach (KeyValuePair&lt;TKey, TValue&gt; item in collection) {
            				// Do anything
            			}
            			
            		}
            		
            	} else {
            	
            		// Iterate
            		foreach (KeyValuePair&lt;TKey, TValue&gt; item in collection) {
            			// Do anything
            		}
            		
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="E:Mobile.Core.DataStructure.ReadOnlyDictionary`2.CollectionChanged">
            <summary>
            An event that is raised when the unterlying collection changed.
            This will only work if the underlying collection is observable.
            To check whether this event is raised can be checked by the <see cref="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.IsObservable"/> property.
            </summary>
            <seealso cref="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.IsObservable"/>
        </member>
        <member name="P:Mobile.Core.DataStructure.ReadOnlyDictionary`2.IsObservable">
            <summary>
            Determines whether this collection can be observed.
            If this is <see langword="true"/>, the <see cref="E:Mobile.Core.DataStructure.ReadOnlyDictionary`2.CollectionChanged"/> event will be raised.
            </summary>
            <seealso cref="E:Mobile.Core.DataStructure.ReadOnlyDictionary`2.CollectionChanged"/>
        </member>
        <member name="T:Mobile.Core.DataStructure.SortedList`1">
            <summary>
            Represents a strongly typed sorted list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="T">Specifies the type of elements in the list.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that is empty and has the default initial capacity.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> can initially store.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that is empty and has the default initial capacity.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that is empty and has the specified initial capacity.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Compare(`0,`0)">
            <summary>
            Compares two objects.
            Uses <see cref="F:Mobile.Core.DataStructure.SortedList`1.comparer"/> if is not <see langword="null"/>; otherwise, casts <paramref name="first"/> to <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="first">The first element to compare.</param>
            <param name="second">The second element to compare.</param>
            <returns>Value Condition:
            Less than zero -> x is less than y.
            Zero -> x equals y.
            Greater than zero -> x is greater than y.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns>The index at which <paramref name="item"/> has been inserted.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            The collection itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/>,
            if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length
            of <paramref name="array"/>.  -or- The number of elements in the source <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:Mobile.Core.DataStructure.SortedList`1.Capacity"/> is set to a value that is less
            than <see cref="P:Mobile.Core.DataStructure.SortedList`1.Count"/>.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>. This method also
            returns <see langword="false"/> if item was not found in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Exists(System.Predicate{`0})">
            <summary>
             Determines whether the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> contains elements
             that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> contains one or more elements
            that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SortedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire
            <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts <paramref name="value"/> at a given <paramref name="index"/> in this <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> as this list is sorted.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SortedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SortedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.IsFixedSize">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> has a fixed size.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.IsReadOnly">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/> is /thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SortedList`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Mobile.Core.DataStructure.SortedList`1"/>.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedDictionary`2">
            <summary>
            Represents a thread-safe collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>
            and uses the default equality comparer for the key type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            when comparing keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>
            for the type of the key.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that is empty, has the specified initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
            <param name="capacity">The initial number of elements that the
            <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>
            and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            when comparing keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>
            for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class that is empty, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The initial number of elements that the
            <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            when comparing keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>
            for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            class with serialized data.
            </summary>
            <param name="info">Stores all data needed to deserialize <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be <see langword="null"/> for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same <paramref name="key"/>
            already exists in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            if the key does not already exist, or updates a key/value pair in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            by using the specified function if the <paramref name="key"/> already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the <paramref name="key"/>. This will be either be <paramref name="addValue"/> (if the key was absent)
            or the result of <paramref name="updateValueFactory"/> (if the key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="updateValueFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            if the <paramref name="key"/> does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>The value for the <paramref name="key"/>.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new <paramref name="value"/> if the key was not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            if the <paramref name="key"/> does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a new value if <paramref name="key"/> will be added.</param>
            <returns>The value for the <paramref name="key"/>.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new <paramref name="valueFactory"/> if the key was not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="valueFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains an element
            with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.
            This method returns false if key is not found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified
            key, if the <paramref name="key"/> is found; otherwise, the default value for the type of the
            value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains an
            element with the specified <paramref name="key"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains the specified value.
            </summary>
            <param name="value">The calue to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains an element
            with the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
            <paramref name="key"/> does not exist in the collection.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.ToArray">
            <summary>
            Copies the content of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.ValuesToArray">
            <summary>
            Copies the values of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains a specific<see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="item">The key to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains a specific <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> to an array, starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys for the dictionary.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurence of the specified object from the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
            <returns>The Enumerator.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns
            the data needed to serialize the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> instance.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object associated with
            the current <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> instance is invalid.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains an element with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> contains an element with the <paramref name="key"/>;
            otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> has a fixed size.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
             Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
             to a <see cref="T:System.Array"/>, starting at a particular <paramref name="index"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the
            <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> is greater than the available space from <paramref name="index"/>
            to the end of the destination <paramref name="array"/>.-or-The type of the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>
            cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedDictionary`2.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedDictionary`2.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1">
            <summary>
            Represents a thread-safe first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            The value can be null for reference types.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enqueue(`0,Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            The value can be null for reference types.</param>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <exception cref="T:System.ArgumentException"><paramref name="filter"/> does not accept <paramref name="item"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Peek(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> without removing it.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns>The object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty
            or does not contain any elements accepted by <paramref name="filter"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the unfiltered <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Dequeue(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns>The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> through <paramref name="element"/>.
            Returns <see langword="true"/> if the first element has been retrieved or <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.
            </summary>
            <param name="element">The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>
             -or- <see langword="null"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</param>
            <returns><see langword="true"/> if the first element has been retrieved; <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.TryDequeue(Mobile.Core.DataStructure.IFilter{`0},`0@)">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> through <paramref name="element"/>.
            Returns <see langword="true"/> if the first element has been retrieved or <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <param name="element">The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>
             -or- <see langword="null"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</param>
            <returns><see langword="true"/> if the first element has been retrieved; <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Remove(`0,Mobile.Core.DataStructure.IFilter{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Removes the first occurrence of <paramref name="item"/>
            from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> filtered by <paramref name="filter"/>.
            Uses <paramref name="comparer"/> to compare <paramref name="item"/> to the elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> filtered by <paramref name="filter"/>.</param>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elements are accepted.</param>
            <param name="comparer">The comparer to check whether an element in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>
            matches <paramref name="item"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by <paramref name="match"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.RemoveAll(Mobile.Core.DataStructure.IFilter{`0},System.Predicate{`0})">
            <summary>
            Removes all the elements that are accepted by <paramref name="filter"/> and match the conditions defined by <paramref name="match"/>.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Clear">
            <summary>
            Removes all objects (unfiltered) from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Clear(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Removes all objects from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Contains(`0,Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.ToArray">
            <summary>
            Copies the all (unfiltered) elements of <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.ToArray(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Copies the elements of <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> filtered by <paramref name="filter"/> to a new array.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns>A new array containing elements copied from the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CopyTo(`0[],System.Int32,Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Copies the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> elements to an existing one-dimensional
            <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
             -or-The number of elements in the source <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is greater than the available space
            from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Count">
            <summary>
            Gets the number of elements in the (unfiltered) <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Count(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Gets the number of elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> accepted by the implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/>.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns>The number of elements contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.IsEmpty">
            <summary>
            Gets whether the (unfiltered) <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty (contains no elements).
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.IsEmpty(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Gets whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty (contains no elements).
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is empty; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.GetEnumerator(Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> using an implementation
            of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> to filter the elements.
            </summary>
            <param name="filter">An implementation of <see cref="T:Mobile.Core.DataStructure.IFilter`1"/> used to filter the elements
            of the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>. If this value is <see langword="null"/> all elemnts are accepted.</param>
            <returns>An <see cref="T:System.Collections.Generic.Queue`1.Enumerator"/> for the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.Queue`1.Enumerator"/> for the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.#ctor(System.Collections.Generic.IEnumerator{`0},Mobile.Core.DataStructure.IFilter{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="start">The element to start at.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedFilterableQueue`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedList`1">
            <summary>
            Represents a thread-safe strongly typed list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="T">Specifies the type of elements in the list.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire
            <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be <see langword="null"/> for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SynchronizedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SynchronizedList`1.Count"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SynchronizedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            The collection itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/>,
            if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length
            of <paramref name="array"/>.  -or- The number of elements in the source <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:Mobile.Core.DataStructure.SynchronizedList`1.Capacity"/> is set to a value that is less
            than <see cref="P:Mobile.Core.DataStructure.SynchronizedList`1.Count"/>.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>. This method also
            returns <see langword="false"/> if item was not found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.Exists(System.Predicate{`0})">
            <summary>
             Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> contains elements
             that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> contains one or more elements
            that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.IsReadOnly">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> is read-only.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.IsFixedSize">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> has a fixed size.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedList`1.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedList`1"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedList`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedList`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedQueue`1">
            <summary>
            Represents a thread-safe first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            The value can be null for reference types.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.TryDequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            Returns <see langword="true"/> if the first element has been retrieved or <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty.
            </summary>
            <param name="element">The object that is removed from the beginning of the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>
             -or- <see langword="null"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty.</param>
            <returns><see langword="true"/> if the first element has been retrieved; <see langword="false"/> if <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.ToArray">
            <summary>
            Copies the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> elements to an existing one-dimensional
            <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
             -or-The number of elements in the source <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is greater than the available space
            from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>,
            if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</value>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedQueue`1.IsEmpty">
            <summary>
            Gets if the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is empty (contains no elements).
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.Queue`1.Enumerator"/> for the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedQueue`1.IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedQueue`1.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedQueue`1"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedQueue`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedQueue`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2">
            <summary>
            Represents a thread-safe collection of keys and values sorted by keys.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the default
            equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>
            and uses the default equality comparer for the key type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            class that is empty, has the default initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use
            when comparing keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.IComparer`1"/>
            for the type of the key.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>
            and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use
            when comparing keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.IComparer`1"/>
            for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <paramref name="key"/> and <paramref name="value"/> to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be <see langword="null"/> for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same <paramref name="key"/>
            already exists in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            if the key does not already exist, or updates a key/value pair in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            by using the specified function if the <paramref name="key"/> already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <returns>The new value for the <paramref name="key"/>. This will be either be <paramref name="addValue"/> (if the key was absent)
            or the result of <paramref name="updateValueFactory"/> (if the key was present).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="updateValueFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            if the <paramref name="key"/> does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>The value for the <paramref name="key"/>.
            This will be either the existing value for the key if the key is already in the dictionary,
            or the new <paramref name="value"/> if the key was not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains an element
            with the specified <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.
            This method returns false if key is not found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value"> When this method returns, contains the value associated with the specified
            key, if the <paramref name="key"/> is found; otherwise, the default value for the type of the
            value parameter. This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains an
            element with the specified <paramref name="key"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains the specified value.
            </summary>
            <param name="value">The calue to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains an element
            with the specified <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
            <paramref name="key"/> does not exist in the collection.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.ToArray">
            <summary>
            Copies the content of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.ValuesToArray">
            <summary>
            Copies the values of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains a specific<see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="item">The key to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> contains a specific <paramref name="item"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> to an array, starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> is greater than
            the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> that is used to determine equality of keys for the dictionary.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
            <returns>The Enumerator.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> has a fixed size.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
             Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
             to a <see cref="T:System.Array"/>, starting at a particular <paramref name="index"/>.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements.
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the
            <see cref="T:Mobile.Core.DataStructure.SynchronizedDictionary`2"/> is greater than the available space from <paramref name="index"/>
            to the end of the destination <paramref name="array"/>.-or-The type of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>
            cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedDictionary`2.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.SynchronizedSortedList`1">
            <summary>
            Represents a thread-safe strongly typed sorted list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="T">Specifies the type of elements in the list.</typeparam>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that is empty and has the default initial capacity.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that is empty and has the specified initial capacity.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            To compare elements it uses the <see cref="T:System.IComparable`1"/> implementation of each item.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that is empty and has the default initial capacity.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> can initially store.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> class
            that contains elements copied from the specified collection and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
             -or- <see langword="null"/> to use the <see cref="T:System.IComparable`1"/> implementation of each item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.GetHashCode">
            <summary>
            Serves a hash function for this <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns><see langword="true"/> if the specified System.Object is equal to the current <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            The collection itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/>,
            if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length
            of <paramref name="array"/>.  -or- The number of elements in the source <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>
            is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Capacity"/> is set to a value that is less
            than <see cref="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Count"/>.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if item is successfully removed; otherwise, <see langword="false"/>. This method also
            returns <see langword="false"/> if item was not found in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Exists(System.Predicate{`0})">
            <summary>
             Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> contains elements
             that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.</param>
            <returns><see langword="true"/> if the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> contains one or more elements
            that match the conditions defined by the specified <see cref="T:System.Predicate`1"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            The value can be <see langword="null"/> for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire
            <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts <paramref name="value"/> at a given <paramref name="index"/> in this <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value to insert.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> as this list is sorted.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. 
            -or- <paramref name="index"/> is greater than <see cref="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.Count"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.IsFixedSize">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> has a fixed size.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.IsReadOnly">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.IsSynchronized">
            <summary>
            Determines whether the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> is synchronized/thread-safe.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.SynchronizedSortedList`1.SyncRoot">
            <summary>
            Gets the object to synchronize the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/>.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged">
            <summary>
            An event raised when the <see cref="T:Mobile.Core.DataStructure.SynchronizedSortedList`1"/> changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged"/>.
            </summary>
            <param name="arg">The argument that contains data about the event.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.SynchronizedSortedList`1.SetCallback(Mobile.Core.InvocationCallback)">
            <summary>
            Sets the callback to raise the <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged"/> event.
            Raises <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged"/> event directly if <paramref name="callback"/> is <see langword="null"/>.
            </summary>
            <param name="callback">The callback to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged"/>
             -or- <see langword="null"/> to invoke <see cref="E:Mobile.Core.DataStructure.SynchronizedSortedList`1.CollectionChanged"/> directly.</param>
        </member>
        <member name="T:Mobile.Core.DataStructure.ThreadPool">
            <summary>
            A class providing a queue of methods that will be executed sequentially.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs">
            <summary>
            A class representing changes of the amount of threads working for this pool.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction">
            <summary>
            An enum representing the action that happened.
            </summary>
        </member>
        <member name="F:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction.STARTED">
            <summary>
            A new thread started.
            <see cref="P:System.Threading.Thread.CurrentThread"/> is the thread that started.
            </summary>
        </member>
        <member name="F:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction.ENDED">
            <summary>
            A thread ended.
            <see cref="P:System.Threading.Thread.CurrentThread"/> is the thread that ended.
            </summary>
        </member>
        <member name="F:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction.ERRORED">
            <summary>
            A thread ended with an error.
            <see cref="P:System.Threading.Thread.CurrentThread"/> is the thread that ended due to an error.
            </summary>
        </member>
        <member name="F:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction.CLOSING">
            <summary>
            Closing the thread pool.
            <see cref="P:System.Threading.Thread.CurrentThread"/> can be any thread.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.#ctor(Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.ThreadAction)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs"/>.
            </summary>
            <param name="action">The action that just happened.</param>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.ThreadPoolEventArgs.Action">
            <summary>
            Gets the action of the thread.
            </summary>
        </member>
        <member name="T:Mobile.Core.DataStructure.ThreadPool.ThreadPoolActionEventArgs">
            <summary>
            A class representing the thread pool becoming active.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.ThreadPoolActionEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool.ThreadPoolActionEventArgs"/>.
            </summary>
            <param name="obj">The object this callback has been queued for.</param>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.ThreadPoolActionEventArgs.QueuedFor">
            <summary>
            The object for which this callback has been queued.
            Might be <see langword="null"/> if not queued for any specific object.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.#ctor(System.Int32,System.Int32,System.String,Mobile.Core.ExceptionCallback)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.
            Sets the name of <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>,
            the min and max number of <see cref="T:System.Threading.Thread"/>s that will serve the queue and
            an <see cref="T:Mobile.Core.ExceptionCallback"/> to call if an Exception has been thrown inside the executing method.
            </summary>
            <param name="threadName">The name of <see cref="T:System.Threading.Thread"/>s in this <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.</param>
            <param name="maxThreads">The maximum number of threads to serve the queue.</param>
            <param name="minThreads">The minumum number of threads.</param>
            <param name="callback">This method will be called if an <see cref="T:System.Exception"/>
            has been thrown while executing one of the queued methods.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxThreads"/> is less than 1.
             -or- if <paramref name="minThreads"/> is larger than <paramref name="maxThreads"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool"/> not specifying any <see cref="T:Mobile.Core.ExceptionCallback"/>.
            Sets the name of <see cref="T:System.Threading.Thread"/>s in the <see cref="T:Mobile.Core.DataStructure.ThreadPool"/> and
            uses between <paramref name="minThreads"/> and <paramref name="maxThreads"/> <see cref="T:System.Threading.Thread"/>s that will serve the queue.
            </summary>
            <param name="threadName">The name of <see cref="T:System.Threading.Thread"/>s in this <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.</param>
            <param name="maxThreads">The maximum number of threads to serve the queue.</param>
            <param name="minThreads">The minumum number of threads.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxThreads"/> is less than 1.
             -or- if <paramref name="minThreads"/> is larger than <paramref name="maxThreads"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>
            using between <paramref name="minThreads"/> and <paramref name="maxThreads"/> <see cref="T:System.Threading.Thread"/>s to serve the queue and no <see cref="T:Mobile.Core.ExceptionCallback"/>.
            </summary>
            <param name="maxThreads">The maximum number of threads to serve the queue.</param>
            <param name="minThreads">The minumum number of threads.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxThreads"/> is less than 1.
             -or- if <paramref name="minThreads"/> is larger than <paramref name="maxThreads"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>
            using a maximum of <paramref name="maxThreads"/> <see cref="T:System.Threading.Thread"/>s to serve the queue and no <see cref="T:Mobile.Core.ExceptionCallback"/>.
            </summary>
            <param name="maxThreads">The maximum number of threads to serve the queue.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="maxThreads"/> is less than 1.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.CurrentDomain_StopExecution(System.Object,System.EventArgs)">
            <summary>
            Handles the AppDomain.ProcessExit event.
            Closes <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The data.</param>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.QueueWorkItem(System.Object,System.Threading.WaitCallback,System.Object)">
            <summary>
            Adds a new callback to the queue.
            </summary>
            <param name="queuedFor">The object this callback is queued for or <see langword="null"/> to add it to the default queue.</param>
            <param name="callback">The method to execute.</param>
            <param name="argument">The argument provided to the <paramref name="callback"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="callback"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.Close">
            <summary>
            Closes the <see cref="T:Mobile.Core.DataStructure.ThreadPool"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DataStructure.ThreadPool.SetExceptionCallback(Mobile.Core.ExceptionCallback)">
            <summary>
            Sets the <see cref="T:Mobile.Core.ExceptionCallback"/> for the invoking <see cref="T:System.Threading.Thread"/>.
            </summary>
            <param name="excb">The method to call if a <see cref="T:System.Exception"/> is thrown.</param>
        </member>
        <member name="E:Mobile.Core.DataStructure.ThreadPool.ThreadsChanged">
            <summary>
            An event that signals whether a thread starts or ends its execution.
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.ThreadPool.ExecutingItem">
            <summary>
            An event that is raised before a callback is being called
            </summary>
        </member>
        <member name="E:Mobile.Core.DataStructure.ThreadPool.ExecutedItem">
            <summary>
            An event that is raised after a callback has been called
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.MinThreads">
            <summary>
            Gets or sets the minimum number of <see cref="T:System.Threading.Thread"/>s working on the queue.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.MaxThreads">
            <summary>
            Gets or sets the maximum number of <see cref="T:System.Threading.Thread"/>s working on the queue.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.CurrentThreads">
            <summary>
            Gets the current number of <see cref="T:System.Threading.Thread"/>s working on the queue.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.IdleTime">
            <summary>
            Gets or sets the time (in ms) a thread has to be idle before destroying it.
            </summary>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.SleepTime">
            <summary>
            Gets or sets the time (in ms) a thread will sleep (free the CPU) if there was no operation to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero.</exception>
        </member>
        <member name="P:Mobile.Core.DataStructure.ThreadPool.Name">
            <summary>
            Returns the name of the thread pool / threads in this pool.
            </summary>
        </member>
        <member name="T:Mobile.Core.DisposableMarshalByRefObject">
            <summary>
            A base class for remoting objects with infinite lifetime.
            </summary>
        </member>
        <member name="M:Mobile.Core.DisposableMarshalByRefObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mobile.Core.DisposableMarshalByRefObject"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DisposableMarshalByRefObject.Finalize">
            <summary>
            The finalizer of <see cref="T:Mobile.Core.DisposableMarshalByRefObject"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.DisposableMarshalByRefObject.InitializeLifetimeService">
            <summary>
            Ensures that the <see cref="T:Mobile.Core.DisposableMarshalByRefObject"/> will be kept alive until it is disposed.
            </summary>
            <returns><see langword="null"/></returns>
        </member>
        <member name="M:Mobile.Core.DisposableMarshalByRefObject.System#IDisposable#Dispose">
            <summary>
            Disposes the object.
            Disconnects it from its remoting channel.
            </summary>
        </member>
        <member name="M:Mobile.Core.DisposableMarshalByRefObject.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing"><see langword="true"/> if the object is disposed; <see langword="false"/> if it is garbage-collected.</param>
        </member>
        <member name="P:Mobile.Core.DisposableMarshalByRefObject.IsBeingDisposed">
            <summary>
            Gets whether the object is in the process of being disposed.
            </summary>
        </member>
        <member name="P:Mobile.Core.DisposableMarshalByRefObject.IsDisposed">
            <summary>
            Gets whether the object is disposed.
            </summary>
        </member>
        <member name="T:Mobile.Core.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.ArrayIndexToLarge">
            <summary>
              Looks up a localized string similar to {0} is equal to or greater than the length of array..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.AtLeastX">
            <summary>
              Looks up a localized string similar to {0} needs to be at least {1}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.CannotFindXinY">
            <summary>
              Looks up a localized string similar to Cannot find {0} in {1}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.FilterableQueueEmpty">
            <summary>
              Looks up a localized string similar to The queue is empty or does not contain any elements accepted by {0}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.FormatIPEndPoint">
            <summary>
              Looks up a localized string similar to Please use the following format [IP]:[Port]..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.InsertNotAvailableDueToSortedList">
            <summary>
              Looks up a localized string similar to Cannot insert at a given index as this list is sorted by a comparer or the IComparable implementation of the list&apos;s elements..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.ItemAlreadyInCollection">
            <summary>
              Looks up a localized string similar to Item &apos;{0}&apos; is already part of the collection..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.LessThan">
            <summary>
              Looks up a localized string similar to {0} is less than {1}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.MinNumberLargerThanMax">
            <summary>
              Looks up a localized string similar to Minimum number of threads is larger than maximum number of threads..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.NotAcceptedBy">
            <summary>
              Looks up a localized string similar to {0} was not accepted by {1}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This collection is read-only!.
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.SetNotAvailableDueToSortedList">
            <summary>
              Looks up a localized string similar to Cannot replace at a given index as this list is sorted by a comparer or the IComparable implementation of the list&apos;s elements. To Replace an element please use a combination RemoveAt() and Add() method..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.TooLessSpaceForElements">
            <summary>
              Looks up a localized string similar to The number of elements to copy is greater than the available space from {0} to the end of {1}..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.TypeXNotImplementingY">
            <summary>
              Looks up a localized string similar to Type {0} does not impelement {1}. In this case a {2} is needed..
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.ValueOf">
            <summary>
              Looks up a localized string similar to Value of {0}.
            </summary>
        </member>
        <member name="P:Mobile.Core.ErrorMessages.XNotOfTypeY">
            <summary>
              Looks up a localized string similar to {0} is not of type {1}..
            </summary>
        </member>
        <member name="T:Mobile.Core.ExtensionMethods">
            <summary>
            A static class containing all extension methods.
            </summary>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Extension method of <see cref="T:System.String"/>.
            Checks if <paramref name="value"/> can be found in <paramref name="source"/>
            by comparing strings by given <see cref="T:System.StringComparison"/> <paramref name="cmp"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="value">The value to look for.</param>
            <param name="cmp">The type of comparison</param>
            <returns>True, if <paramref name="source"/> contains <paramref name="value"/>; otherwise, false.</returns>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Extension method of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Determines whether an element is in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            matching conditions specified by <paramref name="comparer"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search through.</param>
            <param name="item">The element to locate in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Can be <see langword="null"/> for reference types.</param>
            <param name="comparer">The way to check if two objects are equal.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            matching the conditions specified by <paramref name="comparer"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.ContainsWhiteSpace(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Determines whether <paramref name="source"/> contains white-space characters.
            </summary>
            <param name="source">The charachter enumeration to check.</param>
            <returns><see langword="true"/> if <paramref name="source"/> contains white-space characters; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Extension method of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Gets the first matching element in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search through.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> to match.</param>
            <returns>The first element that matches from the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             -or- if no element matched, an object initialized by default is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Extension method of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            Gets all matching elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search through.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> to match.</param>
            <returns>All matching elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.Sort``1(System.Collections.Generic.IList{``0},System.Collections.IComparer)">
            <summary>
            Extension method of <see cref="T:System.Collections.Generic.IList`1"/>.
            Sorts the elements in <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements in the list-</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IList`1"/> to sort. Has to implement <see cref="T:System.Collections.IList"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> to compate elements in <paramref name="source"/> while sorting.</param>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <typeparam name="T">The type of elements stored in the collection.</typeparam>
            <param name="source">The source.</param>
            <returns>The last element of the <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:Mobile.Core.ExtensionMethods.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <typeparam name="T">The type of elements stored in the collection.</typeparam>
            <param name="source">The source.</param>
            <returns>The first element of the <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="T:Mobile.Core.Helper.EnumHelper">
            <summary>
            A class containing methods to help dealing with enums.
            </summary>
        </member>
        <member name="M:Mobile.Core.Helper.EnumHelper.GetNames(System.Type)">
            <summary>
            Gets the names of all constants separated by comma.
            </summary>
            <param name="type">An enumeration type.</param>
            <returns>A string of the names of the constants in <paramref name="type"/> separated by comma.</returns>
        </member>
        <member name="M:Mobile.Core.Helper.EnumHelper.GetNamesAsRegexPattern``1(System.Boolean,``0[])">
            <summary>
            Creates a regex pattern that combines all values of an enumeration in one string.
            All values are combined as 'or' if <paramref name="logicalOr"/> is <see langword="true"/>.
            If <paramref name="logicalOr"/> is <see langword="false"/>, values are combined as 'and'.
            Values specified in <paramref name="exclude"/> will be excluded from the return value.
            </summary>
            <typeparam name="T">The type of the enumeration</typeparam>
            <param name="logicalOr">Specifies whether values are combines as logical 'or' (<see langword="true"/>) or 'and' (<see langword="false"/>).</param>
            <param name="exclude">Values to exclude from the return value.</param>
            <returns>A regex pattern that combines all values of the enumeration in one string.</returns>
        </member>
        <member name="M:Mobile.Core.Helper.EnumHelper.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type <typeparamref name="TEnum"/> whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is either an empty string or only contains white space.
             -or- <paramref name="value"/> is a name, but not one of the named constants defined for the enumeration.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is outside the range of the underlying type of <typeparamref name="TEnum"/>.</exception>
        </member>
        <member name="M:Mobile.Core.Helper.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <typeparam name="TEnum">An enumeration type.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
            <returns>An object of type <typeparamref name="TEnum"/> whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is either an empty string or only contains white space.
             -or- <paramref name="value"/> is a name, but not one of the named constants defined for the enumeration.</exception>
            <exception cref="T:System.OverflowException"><paramref name="value"/> is outside the range of the underlying type of <typeparamref name="TEnum"/>.</exception>
        </member>
        <member name="T:Mobile.Core.Helper.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Core.Helper"/> namespace contains helper classes for different purposes.
            </summary>
        </member>
        <member name="T:Mobile.Core.Helper.SerializationHelper">
            <summary>
            Helper class to deal with serialization of template lists.
            </summary>
        </member>
        <member name="M:Mobile.Core.Helper.SerializationHelper.Serialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Serializes a list of objects.
            </summary>
            <typeparam name="T">The type of elements stored in <paramref name="list"/>.</typeparam>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <param name="key">The key to store those elements.</param>
            <param name="list">The list of elements to serialize.</param>
        </member>
        <member name="M:Mobile.Core.Helper.SerializationHelper.Serialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Serializes a collection of objects.
            </summary>
            <typeparam name="T">The type of elements stored in <paramref name="collection"/>.</typeparam>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <param name="key">The key to store those elements.</param>
            <param name="collection">The collection of elements to serialize.</param>
        </member>
        <member name="M:Mobile.Core.Helper.SerializationHelper.Serialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of objects.
            </summary>
            <typeparam name="T">The type of elements stored in <paramref name="collection"/>.</typeparam>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <param name="key">The key to store those elements.</param>
            <param name="collection">The collection of elements to serialize.</param>
        </member>
        <member name="M:Mobile.Core.Helper.SerializationHelper.Deserialize``1(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.String)">
            <summary>
            Returns an array containing all serialized elements.
            </summary>
            <typeparam name="T">The type of elements stored in collection.</typeparam>
            <param name="info">Stores all data needed to deserialize the elements.</param>
            <param name="context">The destination for this serialization.</param>
            <param name="key">The key to use as a serialization key.</param>
            <returns>An array containing all serialized elements.</returns>
        </member>
        <member name="T:Mobile.Core.Helper.StringHelper">
            <summary>
            A class compiling functions to help working with <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:Mobile.Core.Helper.StringHelper.ExtractStringBetweenChars(System.String,System.Char,System.Boolean)">
            <summary>
            Extracts the <see cref="T:System.String"/> between two characters specified by <paramref name="sep"/> from <paramref name="input"/>.
            </summary>
            <param name="input">The input <see cref="T:System.String"/>.</param>
            <param name="sep">The character to check; default is quotes (").</param>
            <param name="isEoiValid">Determines whether the end of the interval is a valid termination criteria.
            This means that no 2nd instance of <paramref name="sep"/> is not a must have.</param>
            <returns>The <see cref="T:System.String"/> between the 1st and 2nd occurrence of <paramref name="sep"/> in <paramref name="input"/>.
            In case <paramref name="sep"/> has not been found twice in the specified interval the return value is
            -either- <see langword="null"/> if <paramref name="isEoiValid"/> is <see langword="false"/>
            -or- the <see cref="T:System.String"/> from the 1st occurrence of <paramref name="sep"/> to the end of the interval if <paramref name="isEoiValid"/> is <see langword="true"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Helper.StringHelper.ExtractStringBetweenChars(System.String,System.Int32,System.Int32,System.Char,System.Boolean)">
            <summary>
            Extracts the <see cref="T:System.String"/> between two characters specified by <paramref name="sep"/>.
            Starts searching <paramref name="input"/> at index <paramref name="startIndex"/> and 
            checks the following <paramref name="count"/> characters.
            </summary>
            <param name="input">The input <see cref="T:System.String"/>.</param>
            <param name="startIndex">The index in <paramref name="input"/> at which to start searching for <paramref name="sep"/>.</param>
            <param name="count">The amount of characters after <paramref name="startIndex"/> to check.</param>
            <param name="sep">The character to check; default is quotes (").</param>
            <param name="isEoiValid">Determines whether the end of the interval is a valid termination criteria.
            This means that no 2nd instance of <paramref name="sep"/> is not a must have.</param>
            <returns>The <see cref="T:System.String"/> between the 1st and 2nd occurrence of <paramref name="sep"/> in <paramref name="input"/>.
            In case <paramref name="sep"/> has not been found twice in the specified interval the return value is
            -either- <see langword="null"/> if <paramref name="isEoiValid"/> is <see langword="false"/>
            -or- the <see cref="T:System.String"/> from the 1st occurrence of <paramref name="sep"/> to the end of the interval if <paramref name="isEoiValid"/> is <see langword="true"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Helper.StringHelper.ExtractStringBetweenChars(System.String,System.Int32,System.Int32,System.Int32@,System.Char,System.Boolean)">
            <summary>
            Extracts the <see cref="T:System.String"/> between two characters specified by <paramref name="sep"/>.
            Starts searching <paramref name="input"/> at index <paramref name="startIndex"/> and 
            checks the following <paramref name="count"/> characters.
            Sets <paramref name="endIndex"/> to the index of the 2nd occurrence of <paramref name="sep"/> in <paramref name="input"/>.
            </summary>
            <param name="input">The input <see cref="T:System.String"/>.</param>
            <param name="startIndex">The index in <paramref name="input"/> at which to start searching for <paramref name="sep"/>.</param>
            <param name="count">The amount of characters after <paramref name="startIndex"/> to check.</param>
            <param name="endIndex">The index of the 2nd occurrence of <paramref name="sep"/> in <paramref name="input"/>.
            <c>-1</c> indicates that <paramref name="sep"/> has not been found twice in the specified interval.
            In this case the return value will be either
            <see langword="null"/> if <paramref name="isEoiValid"/> is <see langword="false"/>
            -or- the <see cref="T:System.String"/> from the 1st occurrence of <paramref name="sep"/> to the end of the interval.</param>
            <param name="sep">The character to check; default is quotes (").</param>
            <param name="isEoiValid">Determines whether the end of the interval is a valid termination criteria.
            This means that no 2nd instance of <paramref name="sep"/> is not a must have.</param>
            <returns>The <see cref="T:System.String"/> between the 1st and 2nd occurrence of <paramref name="sep"/> in <paramref name="input"/>.
            In case <paramref name="sep"/> has not been found twice in the specified interval the return value is
            -either- <see langword="null"/> if <paramref name="isEoiValid"/> is <see langword="false"/>
            -or- the <see cref="T:System.String"/> from the 1st occurrence of <paramref name="sep"/> to the end of the interval if <paramref name="isEoiValid"/> is <see langword="true"/>.
            In case <paramref name="sep"/> is not found twice <paramref name="endIndex"/> will be <c>-1</c>.</returns>
        </member>
        <member name="T:Mobile.Core.ExceptionCallback">
            <summary>
            A callback to handle <see cref="T:System.Exception"/>s.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Mobile.Core.InvocationCallback">
            <summary>
            A callback to call a method and provide specific arguments.
            </summary>
            <param name="method">The method to call.</param>
            <param name="args">The arguments to provide to <paramref name="method"/>.</param>
        </member>
        <member name="T:Mobile.Core.Invocation">
            <summary>
            A static class that offers methods to safely invoke delegates/methods.
            </summary>
        </member>
        <member name="M:Mobile.Core.Invocation.ThreadSafeInvoke(System.Delegate,System.Object,Mobile.Core.ExceptionCallback,System.Object[])">
            <summary>
            A thread safe invoke of a delegate.
            Returns immediately if <paramref name="method"/> is <see langword="null"/>.
            Calls <paramref name="exCallback"/> passing a <see cref="T:System.Exception"/>
            if a <see cref="T:System.Exception"/> is thrown out of <paramref name="method"/>'s code.
            </summary>
            <param name="method">The method to invoke.</param>
            <param name="lockObject">The <see cref="T:System.Object"/> to lock for thread safety -or- <see langword="null"/> if no thread safety is required.</param>
            <param name="exCallback">The callback to call if a <see cref="T:System.Exception"/> is thrown out of <paramref name="method"/>.</param>
            <param name="args">The arguments to pass to the delegate.</param>
        </member>
        <member name="T:Mobile.Core.NamespaceDoc">
            <summary>
            The <see cref="N:Mobile.Core"/> namespace contains static classes used throughout the Mobile projects.
            </summary>
        </member>
        <member name="T:Mobile.Core.NotifyablePropertyChangeBase">
            <summary>
            This is a base class that implements methods to help signaling that a property changes.
            </summary>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.SetProperty``1(``0@,``0,System.Func{``0,``0,System.Boolean},System.Action,System.String)">
            <summary>
            Sets the value and raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged"/> event if the value changed.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="backingStore">A reference to the underlying parameter.</param>
            <param name="value">The new value to set.</param>
            <param name="equals">The function to call for checking equality between <paramref name="backingStore"/> and <paramref name="value"/>.</param>
            <param name="onChanged">The <see cref="T:System.Action"/> to execute if the parameter changed.
            This parameter is optional and defaults to <see langword="null"/> (no additional tasks).</param>
            <param name="propertyName">The name of the property that has been changed.
            This parameter is optional and is automatically set to the calling method/property.</param>
            <returns><see langword="true"/> if the value has changed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.SetProperty``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.Action,System.String)">
            <summary>
            Sets the value and raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged"/> event if the value changed.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="backingStore">A reference to the underlying parameter.</param>
            <param name="value">The new value to set.</param>
            <param name="comparer">The equality comparer for checking equality between <paramref name="backingStore"/> and <paramref name="value"/>.
            This parameter is optional and defaults to <see langword="null"/> which will use the default equality comparer for <typeparamref name="T"/>.</param>
            <param name="onChanged">The <see cref="T:System.Action"/> to execute if the parameter changed.
            This parameter is optional and defaults to <see langword="null"/> (no additional tasks).</param>
            <param name="propertyName">The name of the property that has been changed.
            This parameter is optional and is automatically set to the calling method/property.</param>
            <returns><see langword="true"/> if the value has changed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged">
            <summary>
            Occurs when a property value changed.
            </summary>
        </member>
        <member name="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanging"/> event.
            </summary>
            <param name="propertyName">The name of the property that has been changed.
            This parameter is optional and is automatically set to the calling method/property.</param>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanging"/> event.
            </summary>
            <param name="args">The arguments to pass to the event.</param>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that has been changed.
            This parameter is optional and is automatically set to the calling method/property.</param>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged"/> event.
            </summary>
            <param name="args">The arguments to pass to the event.</param>>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.ClearPropertyChanging">
            <summary>
            Clears <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanging"/> by resetting it to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Mobile.Core.NotifyablePropertyChangeBase.ClearPropertyChanged">
            <summary>
            Clears <see cref="E:Mobile.Core.NotifyablePropertyChangeBase.PropertyChanged"/> by resetting it to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Mobile.Core.Security.SecureStringComparer">
            <summary>
            A class that can compare <see cref="T:System.Security.SecureString"/>s.
            </summary>
        </member>
        <member name="P:Mobile.Core.Security.SecureStringComparer.CurrentCulture">
            <summary>
            Gets a <see cref="T:Mobile.Core.Security.SecureStringComparer"/> that uses the name of a <see cref="T:System.Security.SecureString"/> as a basis.
            </summary>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.Compare(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:System.Security.SecureString"/>.</exception>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.Equals(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">An object to compare to <paramref name="y"/>.</param>
            <param name="y">An object to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are both the same type of object and those objects are equal; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is no <see cref="T:System.Security.SecureString"/>.</exception>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.GetHashCode(System.Object)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is no <see cref="T:System.Security.SecureString"/>.</exception>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.Compare(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
            </summary>
            <param name="x">A <see cref="T:System.Security.SecureString"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:System.Security.SecureString"/> to compare to <paramref name="x"/>.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table:
            <para />Value &lt; 0: <paramref name="x"/> is less than <paramref name="y"/>. -or- <paramref name="x"/> is <see langword="null"/>.
            <para />Value = 0: <paramref name="x"/> is equal to <paramref name="y"/>.
            <para />Value &gt; 0: <paramref name="x"/> is greater than <paramref name="y"/>. -or- <paramref name="y"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.Equals(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            When overridden in a derived class, indicates whether two objects are equal.
            </summary>
            <param name="x">A <see cref="T:System.Security.SecureString"/> to compare to <paramref name="y"/>.</param>
            <param name="y">A <see cref="T:System.Security.SecureString"/> to compare to <paramref name="x"/>.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> refer to the same object,
            or <paramref name="x"/> and <paramref name="y"/> are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringComparer.GetHashCode(System.Security.SecureString)">
            <summary>
            When overridden in a derived class, gets the hash code for the specified <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="obj">A <see cref="T:System.Security.SecureString"/>.</param>
            <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj"/>.</returns>
        </member>
        <member name="T:Mobile.Core.Security.SecureStringConversion">
            <summary>
            A helper class for <see cref="T:System.Security.SecureString"/> to <see cref="T:System.String"/> conversion.
            </summary>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringConversion.SecureStringToString(System.Security.SecureString)">
            <summary>
            Converts a <see cref="T:System.Security.SecureString"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.Security.SecureString"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Mobile.Core.Security.SecureStringConversion.StringToSecureString(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to <see cref="T:System.Security.SecureString"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Security.SecureString"/>.</returns>
        </member>
    </members>
</doc>
